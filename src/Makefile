# Makefile.in generated by automake 1.15.1 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2017 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



################################################################################
# ES40 emulator.
# Copyright (C) 2007-2008 by the ES40 Emulator Project
#
# Website: http://www.es40.org
# E-mail : camiel@es40.org
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 
# 02110-1301, USA.
# 
# Although this is not required, the author would appreciate being notified of, 
# and receiving any modifications you may make to the source code that might serve
# the general public.
#
################################################################################
#
# $Id: Makefile.am,v 1.6 2008/06/12 06:54:21 iamcamiel Exp $
#
# X-1.6      Caolan McNamara                          12-JUN-2008
#      Fixes to build on Fedora 9 / gcc 4.3.0.
#
# X-1.5      Camiel Vanderhoeven                      31-MAY-2008
#      Add parts of Poco.
#
# X-1.4      Camiel Vanderhoeven                      04-APR-2008
#      Added comments.
#
# X-1.3      Camiel Vanderhoeven                      29-MAR-2008
#      Added es40_cfg.
#
# X-1.1	     Camiel Vanderhoeven                      20-MAR-2008
#      File Created.
#
################################################################################


am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/es40
pkgincludedir = $(includedir)/es40
pkglibdir = $(libdir)/es40
pkglibexecdir = $(libexecdir)/es40
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-pc-linux-gnu
host_triplet = x86_64-pc-linux-gnu
bin_PROGRAMS = es40$(EXEEXT) es40_idb$(EXEEXT) es40_lss$(EXEEXT) \
	es40_lsm$(EXEEXT) es40_cfg$(EXEEXT)
subdir = src
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/libpcap.m4 \
	$(top_srcdir)/m4/pthreads.m4 $(top_srcdir)/m4/sdl.m4 \
	$(top_srcdir)/m4/x11.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am__dirstamp = $(am__leading_dot)dirstamp
am_es40_OBJECTS = AliM1543C.$(OBJEXT) AliM1543C_ide.$(OBJEXT) \
	AliM1543C_usb.$(OBJEXT) AlphaCPU.$(OBJEXT) \
	AlphaCPU_ieeefloat.$(OBJEXT) AlphaCPU_vaxfloat.$(OBJEXT) \
	AlphaCPU_vmspal.$(OBJEXT) AlphaSim.$(OBJEXT) Cirrus.$(OBJEXT) \
	Configurator.$(OBJEXT) DEC21143.$(OBJEXT) Disk.$(OBJEXT) \
	DiskController.$(OBJEXT) DiskDevice.$(OBJEXT) \
	DiskFile.$(OBJEXT) DiskRam.$(OBJEXT) DMA.$(OBJEXT) \
	DPR.$(OBJEXT) es40_debug.$(OBJEXT) Ethernet.$(OBJEXT) \
	Flash.$(OBJEXT) FloppyController.$(OBJEXT) Keyboard.$(OBJEXT) \
	lockstep.$(OBJEXT) PCIDevice.$(OBJEXT) Port80.$(OBJEXT) \
	S3Trio64.$(OBJEXT) SCSIBus.$(OBJEXT) SCSIDevice.$(OBJEXT) \
	Serial.$(OBJEXT) StdAfx.$(OBJEXT) Sym53C810.$(OBJEXT) \
	Sym53C895.$(OBJEXT) SystemComponent.$(OBJEXT) System.$(OBJEXT) \
	TraceEngine.$(OBJEXT) VGA.$(OBJEXT) gui/gui.$(OBJEXT) \
	gui/gui_x11.$(OBJEXT) gui/keymap.$(OBJEXT) \
	gui/scancodes.$(OBJEXT) gui/sdl.$(OBJEXT) \
	base/Bugcheck.$(OBJEXT) base/ErrorHandler.$(OBJEXT) \
	base/Event.$(OBJEXT) base/Exception.$(OBJEXT) \
	base/Mutex.$(OBJEXT) base/NumberFormatter.$(OBJEXT) \
	base/RefCountedObject.$(OBJEXT) base/Runnable.$(OBJEXT) \
	base/RWLock.$(OBJEXT) base/Semaphore.$(OBJEXT) \
	base/SignalHandler.$(OBJEXT) base/ThreadLocal.$(OBJEXT) \
	base/Thread.$(OBJEXT) base/Timestamp.$(OBJEXT)
es40_OBJECTS = $(am_es40_OBJECTS)
es40_LDADD = $(LDADD)
am_es40_cfg_OBJECTS = es40-cfg.$(OBJEXT) base/Exception.$(OBJEXT)
es40_cfg_OBJECTS = $(am_es40_cfg_OBJECTS)
es40_cfg_LDADD = $(LDADD)
am__objects_1 = es40_idb-AliM1543C.$(OBJEXT) \
	es40_idb-AliM1543C_ide.$(OBJEXT) \
	es40_idb-AliM1543C_usb.$(OBJEXT) es40_idb-AlphaCPU.$(OBJEXT) \
	es40_idb-AlphaCPU_ieeefloat.$(OBJEXT) \
	es40_idb-AlphaCPU_vaxfloat.$(OBJEXT) \
	es40_idb-AlphaCPU_vmspal.$(OBJEXT) es40_idb-AlphaSim.$(OBJEXT) \
	es40_idb-Cirrus.$(OBJEXT) es40_idb-Configurator.$(OBJEXT) \
	es40_idb-DEC21143.$(OBJEXT) es40_idb-Disk.$(OBJEXT) \
	es40_idb-DiskController.$(OBJEXT) \
	es40_idb-DiskDevice.$(OBJEXT) es40_idb-DiskFile.$(OBJEXT) \
	es40_idb-DiskRam.$(OBJEXT) es40_idb-DMA.$(OBJEXT) \
	es40_idb-DPR.$(OBJEXT) es40_idb-es40_debug.$(OBJEXT) \
	es40_idb-Ethernet.$(OBJEXT) es40_idb-Flash.$(OBJEXT) \
	es40_idb-FloppyController.$(OBJEXT) \
	es40_idb-Keyboard.$(OBJEXT) es40_idb-lockstep.$(OBJEXT) \
	es40_idb-PCIDevice.$(OBJEXT) es40_idb-Port80.$(OBJEXT) \
	es40_idb-S3Trio64.$(OBJEXT) es40_idb-SCSIBus.$(OBJEXT) \
	es40_idb-SCSIDevice.$(OBJEXT) es40_idb-Serial.$(OBJEXT) \
	es40_idb-StdAfx.$(OBJEXT) es40_idb-Sym53C810.$(OBJEXT) \
	es40_idb-Sym53C895.$(OBJEXT) \
	es40_idb-SystemComponent.$(OBJEXT) es40_idb-System.$(OBJEXT) \
	es40_idb-TraceEngine.$(OBJEXT) es40_idb-VGA.$(OBJEXT) \
	gui/es40_idb-gui.$(OBJEXT) gui/es40_idb-gui_x11.$(OBJEXT) \
	gui/es40_idb-keymap.$(OBJEXT) gui/es40_idb-scancodes.$(OBJEXT) \
	gui/es40_idb-sdl.$(OBJEXT) base/es40_idb-Bugcheck.$(OBJEXT) \
	base/es40_idb-ErrorHandler.$(OBJEXT) \
	base/es40_idb-Event.$(OBJEXT) \
	base/es40_idb-Exception.$(OBJEXT) \
	base/es40_idb-Mutex.$(OBJEXT) \
	base/es40_idb-NumberFormatter.$(OBJEXT) \
	base/es40_idb-RefCountedObject.$(OBJEXT) \
	base/es40_idb-Runnable.$(OBJEXT) \
	base/es40_idb-RWLock.$(OBJEXT) \
	base/es40_idb-Semaphore.$(OBJEXT) \
	base/es40_idb-SignalHandler.$(OBJEXT) \
	base/es40_idb-ThreadLocal.$(OBJEXT) \
	base/es40_idb-Thread.$(OBJEXT) \
	base/es40_idb-Timestamp.$(OBJEXT)
am_es40_idb_OBJECTS = $(am__objects_1)
es40_idb_OBJECTS = $(am_es40_idb_OBJECTS)
es40_idb_LDADD = $(LDADD)
es40_idb_LINK = $(CXXLD) $(es40_idb_CXXFLAGS) $(CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
am__objects_2 = es40_lsm-AliM1543C.$(OBJEXT) \
	es40_lsm-AliM1543C_ide.$(OBJEXT) \
	es40_lsm-AliM1543C_usb.$(OBJEXT) es40_lsm-AlphaCPU.$(OBJEXT) \
	es40_lsm-AlphaCPU_ieeefloat.$(OBJEXT) \
	es40_lsm-AlphaCPU_vaxfloat.$(OBJEXT) \
	es40_lsm-AlphaCPU_vmspal.$(OBJEXT) es40_lsm-AlphaSim.$(OBJEXT) \
	es40_lsm-Cirrus.$(OBJEXT) es40_lsm-Configurator.$(OBJEXT) \
	es40_lsm-DEC21143.$(OBJEXT) es40_lsm-Disk.$(OBJEXT) \
	es40_lsm-DiskController.$(OBJEXT) \
	es40_lsm-DiskDevice.$(OBJEXT) es40_lsm-DiskFile.$(OBJEXT) \
	es40_lsm-DiskRam.$(OBJEXT) es40_lsm-DMA.$(OBJEXT) \
	es40_lsm-DPR.$(OBJEXT) es40_lsm-es40_debug.$(OBJEXT) \
	es40_lsm-Ethernet.$(OBJEXT) es40_lsm-Flash.$(OBJEXT) \
	es40_lsm-FloppyController.$(OBJEXT) \
	es40_lsm-Keyboard.$(OBJEXT) es40_lsm-lockstep.$(OBJEXT) \
	es40_lsm-PCIDevice.$(OBJEXT) es40_lsm-Port80.$(OBJEXT) \
	es40_lsm-S3Trio64.$(OBJEXT) es40_lsm-SCSIBus.$(OBJEXT) \
	es40_lsm-SCSIDevice.$(OBJEXT) es40_lsm-Serial.$(OBJEXT) \
	es40_lsm-StdAfx.$(OBJEXT) es40_lsm-Sym53C810.$(OBJEXT) \
	es40_lsm-Sym53C895.$(OBJEXT) \
	es40_lsm-SystemComponent.$(OBJEXT) es40_lsm-System.$(OBJEXT) \
	es40_lsm-TraceEngine.$(OBJEXT) es40_lsm-VGA.$(OBJEXT) \
	gui/es40_lsm-gui.$(OBJEXT) gui/es40_lsm-gui_x11.$(OBJEXT) \
	gui/es40_lsm-keymap.$(OBJEXT) gui/es40_lsm-scancodes.$(OBJEXT) \
	gui/es40_lsm-sdl.$(OBJEXT) base/es40_lsm-Bugcheck.$(OBJEXT) \
	base/es40_lsm-ErrorHandler.$(OBJEXT) \
	base/es40_lsm-Event.$(OBJEXT) \
	base/es40_lsm-Exception.$(OBJEXT) \
	base/es40_lsm-Mutex.$(OBJEXT) \
	base/es40_lsm-NumberFormatter.$(OBJEXT) \
	base/es40_lsm-RefCountedObject.$(OBJEXT) \
	base/es40_lsm-Runnable.$(OBJEXT) \
	base/es40_lsm-RWLock.$(OBJEXT) \
	base/es40_lsm-Semaphore.$(OBJEXT) \
	base/es40_lsm-SignalHandler.$(OBJEXT) \
	base/es40_lsm-ThreadLocal.$(OBJEXT) \
	base/es40_lsm-Thread.$(OBJEXT) \
	base/es40_lsm-Timestamp.$(OBJEXT)
am_es40_lsm_OBJECTS = $(am__objects_2)
es40_lsm_OBJECTS = $(am_es40_lsm_OBJECTS)
es40_lsm_LDADD = $(LDADD)
es40_lsm_LINK = $(CXXLD) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
am__objects_3 = es40_lss-AliM1543C.$(OBJEXT) \
	es40_lss-AliM1543C_ide.$(OBJEXT) \
	es40_lss-AliM1543C_usb.$(OBJEXT) es40_lss-AlphaCPU.$(OBJEXT) \
	es40_lss-AlphaCPU_ieeefloat.$(OBJEXT) \
	es40_lss-AlphaCPU_vaxfloat.$(OBJEXT) \
	es40_lss-AlphaCPU_vmspal.$(OBJEXT) es40_lss-AlphaSim.$(OBJEXT) \
	es40_lss-Cirrus.$(OBJEXT) es40_lss-Configurator.$(OBJEXT) \
	es40_lss-DEC21143.$(OBJEXT) es40_lss-Disk.$(OBJEXT) \
	es40_lss-DiskController.$(OBJEXT) \
	es40_lss-DiskDevice.$(OBJEXT) es40_lss-DiskFile.$(OBJEXT) \
	es40_lss-DiskRam.$(OBJEXT) es40_lss-DMA.$(OBJEXT) \
	es40_lss-DPR.$(OBJEXT) es40_lss-es40_debug.$(OBJEXT) \
	es40_lss-Ethernet.$(OBJEXT) es40_lss-Flash.$(OBJEXT) \
	es40_lss-FloppyController.$(OBJEXT) \
	es40_lss-Keyboard.$(OBJEXT) es40_lss-lockstep.$(OBJEXT) \
	es40_lss-PCIDevice.$(OBJEXT) es40_lss-Port80.$(OBJEXT) \
	es40_lss-S3Trio64.$(OBJEXT) es40_lss-SCSIBus.$(OBJEXT) \
	es40_lss-SCSIDevice.$(OBJEXT) es40_lss-Serial.$(OBJEXT) \
	es40_lss-StdAfx.$(OBJEXT) es40_lss-Sym53C810.$(OBJEXT) \
	es40_lss-Sym53C895.$(OBJEXT) \
	es40_lss-SystemComponent.$(OBJEXT) es40_lss-System.$(OBJEXT) \
	es40_lss-TraceEngine.$(OBJEXT) es40_lss-VGA.$(OBJEXT) \
	gui/es40_lss-gui.$(OBJEXT) gui/es40_lss-gui_x11.$(OBJEXT) \
	gui/es40_lss-keymap.$(OBJEXT) gui/es40_lss-scancodes.$(OBJEXT) \
	gui/es40_lss-sdl.$(OBJEXT) base/es40_lss-Bugcheck.$(OBJEXT) \
	base/es40_lss-ErrorHandler.$(OBJEXT) \
	base/es40_lss-Event.$(OBJEXT) \
	base/es40_lss-Exception.$(OBJEXT) \
	base/es40_lss-Mutex.$(OBJEXT) \
	base/es40_lss-NumberFormatter.$(OBJEXT) \
	base/es40_lss-RefCountedObject.$(OBJEXT) \
	base/es40_lss-Runnable.$(OBJEXT) \
	base/es40_lss-RWLock.$(OBJEXT) \
	base/es40_lss-Semaphore.$(OBJEXT) \
	base/es40_lss-SignalHandler.$(OBJEXT) \
	base/es40_lss-ThreadLocal.$(OBJEXT) \
	base/es40_lss-Thread.$(OBJEXT) \
	base/es40_lss-Timestamp.$(OBJEXT)
am_es40_lss_OBJECTS = $(am__objects_3)
es40_lss_OBJECTS = $(am_es40_lss_OBJECTS)
es40_lss_LDADD = $(LDADD)
es40_lss_LINK = $(CXXLD) $(es40_lss_CXXFLAGS) $(CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I.
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = $(es40_SOURCES) $(es40_cfg_SOURCES) $(es40_idb_SOURCES) \
	$(es40_lsm_SOURCES) $(es40_lss_SOURCES)
DIST_SOURCES = $(es40_SOURCES) $(es40_cfg_SOURCES) $(es40_idb_SOURCES) \
	$(es40_lsm_SOURCES) $(es40_lss_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) \
	$(LISP)config.h.in
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/config.h.in \
	$(top_srcdir)/depcomp
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/mv/Projekte/es40/src/missing aclocal-1.15
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 1
AUTOCONF = ${SHELL} /home/mv/Projekte/es40/src/missing autoconf
AUTOHEADER = ${SHELL} /home/mv/Projekte/es40/src/missing autoheader
AUTOMAKE = ${SHELL} /home/mv/Projekte/es40/src/missing automake-1.15
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -Ofast -flto -Wall -Wno-unused-variable -Wno-unused-but-set-variable -I/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT -DHAVE_SDL -I/usr/include -DHAVE_PCAP  -DHAVE_X11 -pthread
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS =  -L/usr/lib/x86_64-linux-gnu -lSDL -L/usr/ng/lib -lpcap -lX11 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/mv/Projekte/es40/src/missing makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = es40
PACKAGE_BUGREPORT = iamcamiel@gmail.com
PACKAGE_NAME = es40
PACKAGE_STRING = es40 0.18+
PACKAGE_TARNAME = es40
PACKAGE_URL = 
PACKAGE_VERSION = 0.18+
PATH_SEPARATOR = :
PCAP_CFLAGS = -I/usr/include
PCAP_LIBS = -L/usr/ng/lib -lpcap
PTHREAD_CC = gcc
PTHREAD_CFLAGS = -pthread
PTHREAD_LIBS = 
SDL_CFLAGS = -I/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT
SDL_CONFIG = /usr/bin/sdl-config
SDL_LIBS = -L/usr/lib/x86_64-linux-gnu -lSDL
SET_MAKE = 
SHELL = /bin/bash
STRIP = 
VERSION = 0.18+
X11_CFLAGS = 
X11_LIBS = -lX11
XMKMF = 
abs_builddir = /home/mv/Projekte/es40/src/src
abs_srcdir = /home/mv/Projekte/es40/src/src
abs_top_builddir = /home/mv/Projekte/es40/src
abs_top_srcdir = /home/mv/Projekte/es40/src
ac_ct_CC = gcc
ac_ct_CXX = 
acx_pthread_config = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-pc-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-pc-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/mv/Projekte/es40/src/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
runstatedir = ${localstatedir}/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
es40_SOURCES = AliM1543C.cpp \
       AliM1543C_ide.cpp \
       AliM1543C_usb.cpp \
       AlphaCPU.cpp \
       AlphaCPU_ieeefloat.cpp \
       AlphaCPU_vaxfloat.cpp \
       AlphaCPU_vmspal.cpp \
       AlphaSim.cpp \
       Cirrus.cpp \
       Configurator.cpp \
       DEC21143.cpp \
       Disk.cpp \
       DiskController.cpp \
       DiskDevice.cpp \
       DiskFile.cpp \
       DiskRam.cpp \
       DMA.cpp \
       DPR.cpp \
       es40_debug.cpp \
       Ethernet.cpp \
       Flash.cpp \
       FloppyController.cpp \
       Keyboard.cpp \
       lockstep.cpp \
       PCIDevice.cpp \
       Port80.cpp \
       S3Trio64.cpp \
       SCSIBus.cpp \
       SCSIDevice.cpp \
       Serial.cpp \
       StdAfx.cpp \
       Sym53C810.cpp \
       Sym53C895.cpp \
       SystemComponent.cpp \
       System.cpp \
       TraceEngine.cpp \
       VGA.cpp \
       gui/gui.cpp \
       gui/gui_x11.cpp \
       gui/keymap.cpp \
       gui/scancodes.cpp \
       gui/sdl.cpp \
        base/Bugcheck.cpp \
	base/ErrorHandler.cpp \
	base/Event.cpp \
	base/Exception.cpp \
	base/Mutex.cpp \
	base/NumberFormatter.cpp \
	base/RefCountedObject.cpp \
	base/Runnable.cpp \
	base/RWLock.cpp \
	base/Semaphore.cpp \
	base/SignalHandler.cpp \
	base/ThreadLocal.cpp \
	base/Thread.cpp \
	base/Timestamp.cpp

es40_idb_SOURCES = $(es40_SOURCES)
es40_lss_SOURCES = $(es40_SOURCES)
es40_lsm_SOURCES = $(es40_SOURCES)
es40_idb_CXXFLAGS = -DIDB
es40_lss_CXXFLAGS = -DIDB -DLSS
es40_lsm_CXXFLAGS = -DIDB -DLSM
es40_cfg_SOURCES = es40-cfg.cpp \
    base/Exception.cpp

all: config.h
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu src/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

config.h: stamp-h1
	@test -f $@ || rm -f stamp-h1
	@test -f $@ || $(MAKE) $(AM_MAKEFLAGS) stamp-h1

stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status src/config.h
$(srcdir)/config.h.in:  $(am__configure_deps) 
	($(am__cd) $(top_srcdir) && $(AUTOHEADER))
	rm -f stamp-h1
	touch $@

distclean-hdr:
	-rm -f config.h stamp-h1
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
gui/$(am__dirstamp):
	@$(MKDIR_P) gui
	@: > gui/$(am__dirstamp)
gui/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) gui/$(DEPDIR)
	@: > gui/$(DEPDIR)/$(am__dirstamp)
gui/gui.$(OBJEXT): gui/$(am__dirstamp) gui/$(DEPDIR)/$(am__dirstamp)
gui/gui_x11.$(OBJEXT): gui/$(am__dirstamp) \
	gui/$(DEPDIR)/$(am__dirstamp)
gui/keymap.$(OBJEXT): gui/$(am__dirstamp) \
	gui/$(DEPDIR)/$(am__dirstamp)
gui/scancodes.$(OBJEXT): gui/$(am__dirstamp) \
	gui/$(DEPDIR)/$(am__dirstamp)
gui/sdl.$(OBJEXT): gui/$(am__dirstamp) gui/$(DEPDIR)/$(am__dirstamp)
base/$(am__dirstamp):
	@$(MKDIR_P) base
	@: > base/$(am__dirstamp)
base/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) base/$(DEPDIR)
	@: > base/$(DEPDIR)/$(am__dirstamp)
base/Bugcheck.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/ErrorHandler.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/Event.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/Exception.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/Mutex.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/NumberFormatter.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/RefCountedObject.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/Runnable.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/RWLock.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/Semaphore.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/SignalHandler.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/ThreadLocal.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/Thread.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/Timestamp.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)

es40$(EXEEXT): $(es40_OBJECTS) $(es40_DEPENDENCIES) $(EXTRA_es40_DEPENDENCIES) 
	@rm -f es40$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(es40_OBJECTS) $(es40_LDADD) $(LIBS)

es40_cfg$(EXEEXT): $(es40_cfg_OBJECTS) $(es40_cfg_DEPENDENCIES) $(EXTRA_es40_cfg_DEPENDENCIES) 
	@rm -f es40_cfg$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(es40_cfg_OBJECTS) $(es40_cfg_LDADD) $(LIBS)
gui/es40_idb-gui.$(OBJEXT): gui/$(am__dirstamp) \
	gui/$(DEPDIR)/$(am__dirstamp)
gui/es40_idb-gui_x11.$(OBJEXT): gui/$(am__dirstamp) \
	gui/$(DEPDIR)/$(am__dirstamp)
gui/es40_idb-keymap.$(OBJEXT): gui/$(am__dirstamp) \
	gui/$(DEPDIR)/$(am__dirstamp)
gui/es40_idb-scancodes.$(OBJEXT): gui/$(am__dirstamp) \
	gui/$(DEPDIR)/$(am__dirstamp)
gui/es40_idb-sdl.$(OBJEXT): gui/$(am__dirstamp) \
	gui/$(DEPDIR)/$(am__dirstamp)
base/es40_idb-Bugcheck.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_idb-ErrorHandler.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_idb-Event.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_idb-Exception.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_idb-Mutex.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_idb-NumberFormatter.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_idb-RefCountedObject.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_idb-Runnable.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_idb-RWLock.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_idb-Semaphore.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_idb-SignalHandler.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_idb-ThreadLocal.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_idb-Thread.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_idb-Timestamp.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)

es40_idb$(EXEEXT): $(es40_idb_OBJECTS) $(es40_idb_DEPENDENCIES) $(EXTRA_es40_idb_DEPENDENCIES) 
	@rm -f es40_idb$(EXEEXT)
	$(AM_V_CXXLD)$(es40_idb_LINK) $(es40_idb_OBJECTS) $(es40_idb_LDADD) $(LIBS)
gui/es40_lsm-gui.$(OBJEXT): gui/$(am__dirstamp) \
	gui/$(DEPDIR)/$(am__dirstamp)
gui/es40_lsm-gui_x11.$(OBJEXT): gui/$(am__dirstamp) \
	gui/$(DEPDIR)/$(am__dirstamp)
gui/es40_lsm-keymap.$(OBJEXT): gui/$(am__dirstamp) \
	gui/$(DEPDIR)/$(am__dirstamp)
gui/es40_lsm-scancodes.$(OBJEXT): gui/$(am__dirstamp) \
	gui/$(DEPDIR)/$(am__dirstamp)
gui/es40_lsm-sdl.$(OBJEXT): gui/$(am__dirstamp) \
	gui/$(DEPDIR)/$(am__dirstamp)
base/es40_lsm-Bugcheck.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lsm-ErrorHandler.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lsm-Event.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lsm-Exception.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lsm-Mutex.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lsm-NumberFormatter.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lsm-RefCountedObject.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lsm-Runnable.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lsm-RWLock.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lsm-Semaphore.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lsm-SignalHandler.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lsm-ThreadLocal.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lsm-Thread.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lsm-Timestamp.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)

es40_lsm$(EXEEXT): $(es40_lsm_OBJECTS) $(es40_lsm_DEPENDENCIES) $(EXTRA_es40_lsm_DEPENDENCIES) 
	@rm -f es40_lsm$(EXEEXT)
	$(AM_V_CXXLD)$(es40_lsm_LINK) $(es40_lsm_OBJECTS) $(es40_lsm_LDADD) $(LIBS)
gui/es40_lss-gui.$(OBJEXT): gui/$(am__dirstamp) \
	gui/$(DEPDIR)/$(am__dirstamp)
gui/es40_lss-gui_x11.$(OBJEXT): gui/$(am__dirstamp) \
	gui/$(DEPDIR)/$(am__dirstamp)
gui/es40_lss-keymap.$(OBJEXT): gui/$(am__dirstamp) \
	gui/$(DEPDIR)/$(am__dirstamp)
gui/es40_lss-scancodes.$(OBJEXT): gui/$(am__dirstamp) \
	gui/$(DEPDIR)/$(am__dirstamp)
gui/es40_lss-sdl.$(OBJEXT): gui/$(am__dirstamp) \
	gui/$(DEPDIR)/$(am__dirstamp)
base/es40_lss-Bugcheck.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lss-ErrorHandler.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lss-Event.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lss-Exception.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lss-Mutex.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lss-NumberFormatter.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lss-RefCountedObject.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lss-Runnable.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lss-RWLock.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lss-Semaphore.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lss-SignalHandler.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lss-ThreadLocal.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lss-Thread.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)
base/es40_lss-Timestamp.$(OBJEXT): base/$(am__dirstamp) \
	base/$(DEPDIR)/$(am__dirstamp)

es40_lss$(EXEEXT): $(es40_lss_OBJECTS) $(es40_lss_DEPENDENCIES) $(EXTRA_es40_lss_DEPENDENCIES) 
	@rm -f es40_lss$(EXEEXT)
	$(AM_V_CXXLD)$(es40_lss_LINK) $(es40_lss_OBJECTS) $(es40_lss_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)
	-rm -f base/*.$(OBJEXT)
	-rm -f gui/*.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/AliM1543C.Po
include ./$(DEPDIR)/AliM1543C_ide.Po
include ./$(DEPDIR)/AliM1543C_usb.Po
include ./$(DEPDIR)/AlphaCPU.Po
include ./$(DEPDIR)/AlphaCPU_ieeefloat.Po
include ./$(DEPDIR)/AlphaCPU_vaxfloat.Po
include ./$(DEPDIR)/AlphaCPU_vmspal.Po
include ./$(DEPDIR)/AlphaSim.Po
include ./$(DEPDIR)/Cirrus.Po
include ./$(DEPDIR)/Configurator.Po
include ./$(DEPDIR)/DEC21143.Po
include ./$(DEPDIR)/DMA.Po
include ./$(DEPDIR)/DPR.Po
include ./$(DEPDIR)/Disk.Po
include ./$(DEPDIR)/DiskController.Po
include ./$(DEPDIR)/DiskDevice.Po
include ./$(DEPDIR)/DiskFile.Po
include ./$(DEPDIR)/DiskRam.Po
include ./$(DEPDIR)/Ethernet.Po
include ./$(DEPDIR)/Flash.Po
include ./$(DEPDIR)/FloppyController.Po
include ./$(DEPDIR)/Keyboard.Po
include ./$(DEPDIR)/PCIDevice.Po
include ./$(DEPDIR)/Port80.Po
include ./$(DEPDIR)/S3Trio64.Po
include ./$(DEPDIR)/SCSIBus.Po
include ./$(DEPDIR)/SCSIDevice.Po
include ./$(DEPDIR)/Serial.Po
include ./$(DEPDIR)/StdAfx.Po
include ./$(DEPDIR)/Sym53C810.Po
include ./$(DEPDIR)/Sym53C895.Po
include ./$(DEPDIR)/System.Po
include ./$(DEPDIR)/SystemComponent.Po
include ./$(DEPDIR)/TraceEngine.Po
include ./$(DEPDIR)/VGA.Po
include ./$(DEPDIR)/es40-cfg.Po
include ./$(DEPDIR)/es40_debug.Po
include ./$(DEPDIR)/es40_idb-AliM1543C.Po
include ./$(DEPDIR)/es40_idb-AliM1543C_ide.Po
include ./$(DEPDIR)/es40_idb-AliM1543C_usb.Po
include ./$(DEPDIR)/es40_idb-AlphaCPU.Po
include ./$(DEPDIR)/es40_idb-AlphaCPU_ieeefloat.Po
include ./$(DEPDIR)/es40_idb-AlphaCPU_vaxfloat.Po
include ./$(DEPDIR)/es40_idb-AlphaCPU_vmspal.Po
include ./$(DEPDIR)/es40_idb-AlphaSim.Po
include ./$(DEPDIR)/es40_idb-Cirrus.Po
include ./$(DEPDIR)/es40_idb-Configurator.Po
include ./$(DEPDIR)/es40_idb-DEC21143.Po
include ./$(DEPDIR)/es40_idb-DMA.Po
include ./$(DEPDIR)/es40_idb-DPR.Po
include ./$(DEPDIR)/es40_idb-Disk.Po
include ./$(DEPDIR)/es40_idb-DiskController.Po
include ./$(DEPDIR)/es40_idb-DiskDevice.Po
include ./$(DEPDIR)/es40_idb-DiskFile.Po
include ./$(DEPDIR)/es40_idb-DiskRam.Po
include ./$(DEPDIR)/es40_idb-Ethernet.Po
include ./$(DEPDIR)/es40_idb-Flash.Po
include ./$(DEPDIR)/es40_idb-FloppyController.Po
include ./$(DEPDIR)/es40_idb-Keyboard.Po
include ./$(DEPDIR)/es40_idb-PCIDevice.Po
include ./$(DEPDIR)/es40_idb-Port80.Po
include ./$(DEPDIR)/es40_idb-S3Trio64.Po
include ./$(DEPDIR)/es40_idb-SCSIBus.Po
include ./$(DEPDIR)/es40_idb-SCSIDevice.Po
include ./$(DEPDIR)/es40_idb-Serial.Po
include ./$(DEPDIR)/es40_idb-StdAfx.Po
include ./$(DEPDIR)/es40_idb-Sym53C810.Po
include ./$(DEPDIR)/es40_idb-Sym53C895.Po
include ./$(DEPDIR)/es40_idb-System.Po
include ./$(DEPDIR)/es40_idb-SystemComponent.Po
include ./$(DEPDIR)/es40_idb-TraceEngine.Po
include ./$(DEPDIR)/es40_idb-VGA.Po
include ./$(DEPDIR)/es40_idb-es40_debug.Po
include ./$(DEPDIR)/es40_idb-lockstep.Po
include ./$(DEPDIR)/es40_lsm-AliM1543C.Po
include ./$(DEPDIR)/es40_lsm-AliM1543C_ide.Po
include ./$(DEPDIR)/es40_lsm-AliM1543C_usb.Po
include ./$(DEPDIR)/es40_lsm-AlphaCPU.Po
include ./$(DEPDIR)/es40_lsm-AlphaCPU_ieeefloat.Po
include ./$(DEPDIR)/es40_lsm-AlphaCPU_vaxfloat.Po
include ./$(DEPDIR)/es40_lsm-AlphaCPU_vmspal.Po
include ./$(DEPDIR)/es40_lsm-AlphaSim.Po
include ./$(DEPDIR)/es40_lsm-Cirrus.Po
include ./$(DEPDIR)/es40_lsm-Configurator.Po
include ./$(DEPDIR)/es40_lsm-DEC21143.Po
include ./$(DEPDIR)/es40_lsm-DMA.Po
include ./$(DEPDIR)/es40_lsm-DPR.Po
include ./$(DEPDIR)/es40_lsm-Disk.Po
include ./$(DEPDIR)/es40_lsm-DiskController.Po
include ./$(DEPDIR)/es40_lsm-DiskDevice.Po
include ./$(DEPDIR)/es40_lsm-DiskFile.Po
include ./$(DEPDIR)/es40_lsm-DiskRam.Po
include ./$(DEPDIR)/es40_lsm-Ethernet.Po
include ./$(DEPDIR)/es40_lsm-Flash.Po
include ./$(DEPDIR)/es40_lsm-FloppyController.Po
include ./$(DEPDIR)/es40_lsm-Keyboard.Po
include ./$(DEPDIR)/es40_lsm-PCIDevice.Po
include ./$(DEPDIR)/es40_lsm-Port80.Po
include ./$(DEPDIR)/es40_lsm-S3Trio64.Po
include ./$(DEPDIR)/es40_lsm-SCSIBus.Po
include ./$(DEPDIR)/es40_lsm-SCSIDevice.Po
include ./$(DEPDIR)/es40_lsm-Serial.Po
include ./$(DEPDIR)/es40_lsm-StdAfx.Po
include ./$(DEPDIR)/es40_lsm-Sym53C810.Po
include ./$(DEPDIR)/es40_lsm-Sym53C895.Po
include ./$(DEPDIR)/es40_lsm-System.Po
include ./$(DEPDIR)/es40_lsm-SystemComponent.Po
include ./$(DEPDIR)/es40_lsm-TraceEngine.Po
include ./$(DEPDIR)/es40_lsm-VGA.Po
include ./$(DEPDIR)/es40_lsm-es40_debug.Po
include ./$(DEPDIR)/es40_lsm-lockstep.Po
include ./$(DEPDIR)/es40_lss-AliM1543C.Po
include ./$(DEPDIR)/es40_lss-AliM1543C_ide.Po
include ./$(DEPDIR)/es40_lss-AliM1543C_usb.Po
include ./$(DEPDIR)/es40_lss-AlphaCPU.Po
include ./$(DEPDIR)/es40_lss-AlphaCPU_ieeefloat.Po
include ./$(DEPDIR)/es40_lss-AlphaCPU_vaxfloat.Po
include ./$(DEPDIR)/es40_lss-AlphaCPU_vmspal.Po
include ./$(DEPDIR)/es40_lss-AlphaSim.Po
include ./$(DEPDIR)/es40_lss-Cirrus.Po
include ./$(DEPDIR)/es40_lss-Configurator.Po
include ./$(DEPDIR)/es40_lss-DEC21143.Po
include ./$(DEPDIR)/es40_lss-DMA.Po
include ./$(DEPDIR)/es40_lss-DPR.Po
include ./$(DEPDIR)/es40_lss-Disk.Po
include ./$(DEPDIR)/es40_lss-DiskController.Po
include ./$(DEPDIR)/es40_lss-DiskDevice.Po
include ./$(DEPDIR)/es40_lss-DiskFile.Po
include ./$(DEPDIR)/es40_lss-DiskRam.Po
include ./$(DEPDIR)/es40_lss-Ethernet.Po
include ./$(DEPDIR)/es40_lss-Flash.Po
include ./$(DEPDIR)/es40_lss-FloppyController.Po
include ./$(DEPDIR)/es40_lss-Keyboard.Po
include ./$(DEPDIR)/es40_lss-PCIDevice.Po
include ./$(DEPDIR)/es40_lss-Port80.Po
include ./$(DEPDIR)/es40_lss-S3Trio64.Po
include ./$(DEPDIR)/es40_lss-SCSIBus.Po
include ./$(DEPDIR)/es40_lss-SCSIDevice.Po
include ./$(DEPDIR)/es40_lss-Serial.Po
include ./$(DEPDIR)/es40_lss-StdAfx.Po
include ./$(DEPDIR)/es40_lss-Sym53C810.Po
include ./$(DEPDIR)/es40_lss-Sym53C895.Po
include ./$(DEPDIR)/es40_lss-System.Po
include ./$(DEPDIR)/es40_lss-SystemComponent.Po
include ./$(DEPDIR)/es40_lss-TraceEngine.Po
include ./$(DEPDIR)/es40_lss-VGA.Po
include ./$(DEPDIR)/es40_lss-es40_debug.Po
include ./$(DEPDIR)/es40_lss-lockstep.Po
include ./$(DEPDIR)/lockstep.Po
include base/$(DEPDIR)/Bugcheck.Po
include base/$(DEPDIR)/ErrorHandler.Po
include base/$(DEPDIR)/Event.Po
include base/$(DEPDIR)/Exception.Po
include base/$(DEPDIR)/Mutex.Po
include base/$(DEPDIR)/NumberFormatter.Po
include base/$(DEPDIR)/RWLock.Po
include base/$(DEPDIR)/RefCountedObject.Po
include base/$(DEPDIR)/Runnable.Po
include base/$(DEPDIR)/Semaphore.Po
include base/$(DEPDIR)/SignalHandler.Po
include base/$(DEPDIR)/Thread.Po
include base/$(DEPDIR)/ThreadLocal.Po
include base/$(DEPDIR)/Timestamp.Po
include base/$(DEPDIR)/es40_idb-Bugcheck.Po
include base/$(DEPDIR)/es40_idb-ErrorHandler.Po
include base/$(DEPDIR)/es40_idb-Event.Po
include base/$(DEPDIR)/es40_idb-Exception.Po
include base/$(DEPDIR)/es40_idb-Mutex.Po
include base/$(DEPDIR)/es40_idb-NumberFormatter.Po
include base/$(DEPDIR)/es40_idb-RWLock.Po
include base/$(DEPDIR)/es40_idb-RefCountedObject.Po
include base/$(DEPDIR)/es40_idb-Runnable.Po
include base/$(DEPDIR)/es40_idb-Semaphore.Po
include base/$(DEPDIR)/es40_idb-SignalHandler.Po
include base/$(DEPDIR)/es40_idb-Thread.Po
include base/$(DEPDIR)/es40_idb-ThreadLocal.Po
include base/$(DEPDIR)/es40_idb-Timestamp.Po
include base/$(DEPDIR)/es40_lsm-Bugcheck.Po
include base/$(DEPDIR)/es40_lsm-ErrorHandler.Po
include base/$(DEPDIR)/es40_lsm-Event.Po
include base/$(DEPDIR)/es40_lsm-Exception.Po
include base/$(DEPDIR)/es40_lsm-Mutex.Po
include base/$(DEPDIR)/es40_lsm-NumberFormatter.Po
include base/$(DEPDIR)/es40_lsm-RWLock.Po
include base/$(DEPDIR)/es40_lsm-RefCountedObject.Po
include base/$(DEPDIR)/es40_lsm-Runnable.Po
include base/$(DEPDIR)/es40_lsm-Semaphore.Po
include base/$(DEPDIR)/es40_lsm-SignalHandler.Po
include base/$(DEPDIR)/es40_lsm-Thread.Po
include base/$(DEPDIR)/es40_lsm-ThreadLocal.Po
include base/$(DEPDIR)/es40_lsm-Timestamp.Po
include base/$(DEPDIR)/es40_lss-Bugcheck.Po
include base/$(DEPDIR)/es40_lss-ErrorHandler.Po
include base/$(DEPDIR)/es40_lss-Event.Po
include base/$(DEPDIR)/es40_lss-Exception.Po
include base/$(DEPDIR)/es40_lss-Mutex.Po
include base/$(DEPDIR)/es40_lss-NumberFormatter.Po
include base/$(DEPDIR)/es40_lss-RWLock.Po
include base/$(DEPDIR)/es40_lss-RefCountedObject.Po
include base/$(DEPDIR)/es40_lss-Runnable.Po
include base/$(DEPDIR)/es40_lss-Semaphore.Po
include base/$(DEPDIR)/es40_lss-SignalHandler.Po
include base/$(DEPDIR)/es40_lss-Thread.Po
include base/$(DEPDIR)/es40_lss-ThreadLocal.Po
include base/$(DEPDIR)/es40_lss-Timestamp.Po
include gui/$(DEPDIR)/es40_idb-gui.Po
include gui/$(DEPDIR)/es40_idb-gui_x11.Po
include gui/$(DEPDIR)/es40_idb-keymap.Po
include gui/$(DEPDIR)/es40_idb-scancodes.Po
include gui/$(DEPDIR)/es40_idb-sdl.Po
include gui/$(DEPDIR)/es40_lsm-gui.Po
include gui/$(DEPDIR)/es40_lsm-gui_x11.Po
include gui/$(DEPDIR)/es40_lsm-keymap.Po
include gui/$(DEPDIR)/es40_lsm-scancodes.Po
include gui/$(DEPDIR)/es40_lsm-sdl.Po
include gui/$(DEPDIR)/es40_lss-gui.Po
include gui/$(DEPDIR)/es40_lss-gui_x11.Po
include gui/$(DEPDIR)/es40_lss-keymap.Po
include gui/$(DEPDIR)/es40_lss-scancodes.Po
include gui/$(DEPDIR)/es40_lss-sdl.Po
include gui/$(DEPDIR)/gui.Po
include gui/$(DEPDIR)/gui_x11.Po
include gui/$(DEPDIR)/keymap.Po
include gui/$(DEPDIR)/scancodes.Po
include gui/$(DEPDIR)/sdl.Po

.cpp.o:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

es40_idb-AliM1543C.o: AliM1543C.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-AliM1543C.o -MD -MP -MF $(DEPDIR)/es40_idb-AliM1543C.Tpo -c -o es40_idb-AliM1543C.o `test -f 'AliM1543C.cpp' || echo '$(srcdir)/'`AliM1543C.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-AliM1543C.Tpo $(DEPDIR)/es40_idb-AliM1543C.Po
#	$(AM_V_CXX)source='AliM1543C.cpp' object='es40_idb-AliM1543C.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-AliM1543C.o `test -f 'AliM1543C.cpp' || echo '$(srcdir)/'`AliM1543C.cpp

es40_idb-AliM1543C.obj: AliM1543C.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-AliM1543C.obj -MD -MP -MF $(DEPDIR)/es40_idb-AliM1543C.Tpo -c -o es40_idb-AliM1543C.obj `if test -f 'AliM1543C.cpp'; then $(CYGPATH_W) 'AliM1543C.cpp'; else $(CYGPATH_W) '$(srcdir)/AliM1543C.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-AliM1543C.Tpo $(DEPDIR)/es40_idb-AliM1543C.Po
#	$(AM_V_CXX)source='AliM1543C.cpp' object='es40_idb-AliM1543C.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-AliM1543C.obj `if test -f 'AliM1543C.cpp'; then $(CYGPATH_W) 'AliM1543C.cpp'; else $(CYGPATH_W) '$(srcdir)/AliM1543C.cpp'; fi`

es40_idb-AliM1543C_ide.o: AliM1543C_ide.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-AliM1543C_ide.o -MD -MP -MF $(DEPDIR)/es40_idb-AliM1543C_ide.Tpo -c -o es40_idb-AliM1543C_ide.o `test -f 'AliM1543C_ide.cpp' || echo '$(srcdir)/'`AliM1543C_ide.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-AliM1543C_ide.Tpo $(DEPDIR)/es40_idb-AliM1543C_ide.Po
#	$(AM_V_CXX)source='AliM1543C_ide.cpp' object='es40_idb-AliM1543C_ide.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-AliM1543C_ide.o `test -f 'AliM1543C_ide.cpp' || echo '$(srcdir)/'`AliM1543C_ide.cpp

es40_idb-AliM1543C_ide.obj: AliM1543C_ide.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-AliM1543C_ide.obj -MD -MP -MF $(DEPDIR)/es40_idb-AliM1543C_ide.Tpo -c -o es40_idb-AliM1543C_ide.obj `if test -f 'AliM1543C_ide.cpp'; then $(CYGPATH_W) 'AliM1543C_ide.cpp'; else $(CYGPATH_W) '$(srcdir)/AliM1543C_ide.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-AliM1543C_ide.Tpo $(DEPDIR)/es40_idb-AliM1543C_ide.Po
#	$(AM_V_CXX)source='AliM1543C_ide.cpp' object='es40_idb-AliM1543C_ide.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-AliM1543C_ide.obj `if test -f 'AliM1543C_ide.cpp'; then $(CYGPATH_W) 'AliM1543C_ide.cpp'; else $(CYGPATH_W) '$(srcdir)/AliM1543C_ide.cpp'; fi`

es40_idb-AliM1543C_usb.o: AliM1543C_usb.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-AliM1543C_usb.o -MD -MP -MF $(DEPDIR)/es40_idb-AliM1543C_usb.Tpo -c -o es40_idb-AliM1543C_usb.o `test -f 'AliM1543C_usb.cpp' || echo '$(srcdir)/'`AliM1543C_usb.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-AliM1543C_usb.Tpo $(DEPDIR)/es40_idb-AliM1543C_usb.Po
#	$(AM_V_CXX)source='AliM1543C_usb.cpp' object='es40_idb-AliM1543C_usb.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-AliM1543C_usb.o `test -f 'AliM1543C_usb.cpp' || echo '$(srcdir)/'`AliM1543C_usb.cpp

es40_idb-AliM1543C_usb.obj: AliM1543C_usb.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-AliM1543C_usb.obj -MD -MP -MF $(DEPDIR)/es40_idb-AliM1543C_usb.Tpo -c -o es40_idb-AliM1543C_usb.obj `if test -f 'AliM1543C_usb.cpp'; then $(CYGPATH_W) 'AliM1543C_usb.cpp'; else $(CYGPATH_W) '$(srcdir)/AliM1543C_usb.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-AliM1543C_usb.Tpo $(DEPDIR)/es40_idb-AliM1543C_usb.Po
#	$(AM_V_CXX)source='AliM1543C_usb.cpp' object='es40_idb-AliM1543C_usb.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-AliM1543C_usb.obj `if test -f 'AliM1543C_usb.cpp'; then $(CYGPATH_W) 'AliM1543C_usb.cpp'; else $(CYGPATH_W) '$(srcdir)/AliM1543C_usb.cpp'; fi`

es40_idb-AlphaCPU.o: AlphaCPU.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-AlphaCPU.o -MD -MP -MF $(DEPDIR)/es40_idb-AlphaCPU.Tpo -c -o es40_idb-AlphaCPU.o `test -f 'AlphaCPU.cpp' || echo '$(srcdir)/'`AlphaCPU.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-AlphaCPU.Tpo $(DEPDIR)/es40_idb-AlphaCPU.Po
#	$(AM_V_CXX)source='AlphaCPU.cpp' object='es40_idb-AlphaCPU.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-AlphaCPU.o `test -f 'AlphaCPU.cpp' || echo '$(srcdir)/'`AlphaCPU.cpp

es40_idb-AlphaCPU.obj: AlphaCPU.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-AlphaCPU.obj -MD -MP -MF $(DEPDIR)/es40_idb-AlphaCPU.Tpo -c -o es40_idb-AlphaCPU.obj `if test -f 'AlphaCPU.cpp'; then $(CYGPATH_W) 'AlphaCPU.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-AlphaCPU.Tpo $(DEPDIR)/es40_idb-AlphaCPU.Po
#	$(AM_V_CXX)source='AlphaCPU.cpp' object='es40_idb-AlphaCPU.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-AlphaCPU.obj `if test -f 'AlphaCPU.cpp'; then $(CYGPATH_W) 'AlphaCPU.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU.cpp'; fi`

es40_idb-AlphaCPU_ieeefloat.o: AlphaCPU_ieeefloat.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-AlphaCPU_ieeefloat.o -MD -MP -MF $(DEPDIR)/es40_idb-AlphaCPU_ieeefloat.Tpo -c -o es40_idb-AlphaCPU_ieeefloat.o `test -f 'AlphaCPU_ieeefloat.cpp' || echo '$(srcdir)/'`AlphaCPU_ieeefloat.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-AlphaCPU_ieeefloat.Tpo $(DEPDIR)/es40_idb-AlphaCPU_ieeefloat.Po
#	$(AM_V_CXX)source='AlphaCPU_ieeefloat.cpp' object='es40_idb-AlphaCPU_ieeefloat.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-AlphaCPU_ieeefloat.o `test -f 'AlphaCPU_ieeefloat.cpp' || echo '$(srcdir)/'`AlphaCPU_ieeefloat.cpp

es40_idb-AlphaCPU_ieeefloat.obj: AlphaCPU_ieeefloat.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-AlphaCPU_ieeefloat.obj -MD -MP -MF $(DEPDIR)/es40_idb-AlphaCPU_ieeefloat.Tpo -c -o es40_idb-AlphaCPU_ieeefloat.obj `if test -f 'AlphaCPU_ieeefloat.cpp'; then $(CYGPATH_W) 'AlphaCPU_ieeefloat.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU_ieeefloat.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-AlphaCPU_ieeefloat.Tpo $(DEPDIR)/es40_idb-AlphaCPU_ieeefloat.Po
#	$(AM_V_CXX)source='AlphaCPU_ieeefloat.cpp' object='es40_idb-AlphaCPU_ieeefloat.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-AlphaCPU_ieeefloat.obj `if test -f 'AlphaCPU_ieeefloat.cpp'; then $(CYGPATH_W) 'AlphaCPU_ieeefloat.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU_ieeefloat.cpp'; fi`

es40_idb-AlphaCPU_vaxfloat.o: AlphaCPU_vaxfloat.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-AlphaCPU_vaxfloat.o -MD -MP -MF $(DEPDIR)/es40_idb-AlphaCPU_vaxfloat.Tpo -c -o es40_idb-AlphaCPU_vaxfloat.o `test -f 'AlphaCPU_vaxfloat.cpp' || echo '$(srcdir)/'`AlphaCPU_vaxfloat.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-AlphaCPU_vaxfloat.Tpo $(DEPDIR)/es40_idb-AlphaCPU_vaxfloat.Po
#	$(AM_V_CXX)source='AlphaCPU_vaxfloat.cpp' object='es40_idb-AlphaCPU_vaxfloat.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-AlphaCPU_vaxfloat.o `test -f 'AlphaCPU_vaxfloat.cpp' || echo '$(srcdir)/'`AlphaCPU_vaxfloat.cpp

es40_idb-AlphaCPU_vaxfloat.obj: AlphaCPU_vaxfloat.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-AlphaCPU_vaxfloat.obj -MD -MP -MF $(DEPDIR)/es40_idb-AlphaCPU_vaxfloat.Tpo -c -o es40_idb-AlphaCPU_vaxfloat.obj `if test -f 'AlphaCPU_vaxfloat.cpp'; then $(CYGPATH_W) 'AlphaCPU_vaxfloat.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU_vaxfloat.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-AlphaCPU_vaxfloat.Tpo $(DEPDIR)/es40_idb-AlphaCPU_vaxfloat.Po
#	$(AM_V_CXX)source='AlphaCPU_vaxfloat.cpp' object='es40_idb-AlphaCPU_vaxfloat.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-AlphaCPU_vaxfloat.obj `if test -f 'AlphaCPU_vaxfloat.cpp'; then $(CYGPATH_W) 'AlphaCPU_vaxfloat.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU_vaxfloat.cpp'; fi`

es40_idb-AlphaCPU_vmspal.o: AlphaCPU_vmspal.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-AlphaCPU_vmspal.o -MD -MP -MF $(DEPDIR)/es40_idb-AlphaCPU_vmspal.Tpo -c -o es40_idb-AlphaCPU_vmspal.o `test -f 'AlphaCPU_vmspal.cpp' || echo '$(srcdir)/'`AlphaCPU_vmspal.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-AlphaCPU_vmspal.Tpo $(DEPDIR)/es40_idb-AlphaCPU_vmspal.Po
#	$(AM_V_CXX)source='AlphaCPU_vmspal.cpp' object='es40_idb-AlphaCPU_vmspal.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-AlphaCPU_vmspal.o `test -f 'AlphaCPU_vmspal.cpp' || echo '$(srcdir)/'`AlphaCPU_vmspal.cpp

es40_idb-AlphaCPU_vmspal.obj: AlphaCPU_vmspal.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-AlphaCPU_vmspal.obj -MD -MP -MF $(DEPDIR)/es40_idb-AlphaCPU_vmspal.Tpo -c -o es40_idb-AlphaCPU_vmspal.obj `if test -f 'AlphaCPU_vmspal.cpp'; then $(CYGPATH_W) 'AlphaCPU_vmspal.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU_vmspal.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-AlphaCPU_vmspal.Tpo $(DEPDIR)/es40_idb-AlphaCPU_vmspal.Po
#	$(AM_V_CXX)source='AlphaCPU_vmspal.cpp' object='es40_idb-AlphaCPU_vmspal.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-AlphaCPU_vmspal.obj `if test -f 'AlphaCPU_vmspal.cpp'; then $(CYGPATH_W) 'AlphaCPU_vmspal.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU_vmspal.cpp'; fi`

es40_idb-AlphaSim.o: AlphaSim.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-AlphaSim.o -MD -MP -MF $(DEPDIR)/es40_idb-AlphaSim.Tpo -c -o es40_idb-AlphaSim.o `test -f 'AlphaSim.cpp' || echo '$(srcdir)/'`AlphaSim.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-AlphaSim.Tpo $(DEPDIR)/es40_idb-AlphaSim.Po
#	$(AM_V_CXX)source='AlphaSim.cpp' object='es40_idb-AlphaSim.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-AlphaSim.o `test -f 'AlphaSim.cpp' || echo '$(srcdir)/'`AlphaSim.cpp

es40_idb-AlphaSim.obj: AlphaSim.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-AlphaSim.obj -MD -MP -MF $(DEPDIR)/es40_idb-AlphaSim.Tpo -c -o es40_idb-AlphaSim.obj `if test -f 'AlphaSim.cpp'; then $(CYGPATH_W) 'AlphaSim.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaSim.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-AlphaSim.Tpo $(DEPDIR)/es40_idb-AlphaSim.Po
#	$(AM_V_CXX)source='AlphaSim.cpp' object='es40_idb-AlphaSim.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-AlphaSim.obj `if test -f 'AlphaSim.cpp'; then $(CYGPATH_W) 'AlphaSim.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaSim.cpp'; fi`

es40_idb-Cirrus.o: Cirrus.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Cirrus.o -MD -MP -MF $(DEPDIR)/es40_idb-Cirrus.Tpo -c -o es40_idb-Cirrus.o `test -f 'Cirrus.cpp' || echo '$(srcdir)/'`Cirrus.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Cirrus.Tpo $(DEPDIR)/es40_idb-Cirrus.Po
#	$(AM_V_CXX)source='Cirrus.cpp' object='es40_idb-Cirrus.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Cirrus.o `test -f 'Cirrus.cpp' || echo '$(srcdir)/'`Cirrus.cpp

es40_idb-Cirrus.obj: Cirrus.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Cirrus.obj -MD -MP -MF $(DEPDIR)/es40_idb-Cirrus.Tpo -c -o es40_idb-Cirrus.obj `if test -f 'Cirrus.cpp'; then $(CYGPATH_W) 'Cirrus.cpp'; else $(CYGPATH_W) '$(srcdir)/Cirrus.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Cirrus.Tpo $(DEPDIR)/es40_idb-Cirrus.Po
#	$(AM_V_CXX)source='Cirrus.cpp' object='es40_idb-Cirrus.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Cirrus.obj `if test -f 'Cirrus.cpp'; then $(CYGPATH_W) 'Cirrus.cpp'; else $(CYGPATH_W) '$(srcdir)/Cirrus.cpp'; fi`

es40_idb-Configurator.o: Configurator.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Configurator.o -MD -MP -MF $(DEPDIR)/es40_idb-Configurator.Tpo -c -o es40_idb-Configurator.o `test -f 'Configurator.cpp' || echo '$(srcdir)/'`Configurator.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Configurator.Tpo $(DEPDIR)/es40_idb-Configurator.Po
#	$(AM_V_CXX)source='Configurator.cpp' object='es40_idb-Configurator.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Configurator.o `test -f 'Configurator.cpp' || echo '$(srcdir)/'`Configurator.cpp

es40_idb-Configurator.obj: Configurator.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Configurator.obj -MD -MP -MF $(DEPDIR)/es40_idb-Configurator.Tpo -c -o es40_idb-Configurator.obj `if test -f 'Configurator.cpp'; then $(CYGPATH_W) 'Configurator.cpp'; else $(CYGPATH_W) '$(srcdir)/Configurator.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Configurator.Tpo $(DEPDIR)/es40_idb-Configurator.Po
#	$(AM_V_CXX)source='Configurator.cpp' object='es40_idb-Configurator.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Configurator.obj `if test -f 'Configurator.cpp'; then $(CYGPATH_W) 'Configurator.cpp'; else $(CYGPATH_W) '$(srcdir)/Configurator.cpp'; fi`

es40_idb-DEC21143.o: DEC21143.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-DEC21143.o -MD -MP -MF $(DEPDIR)/es40_idb-DEC21143.Tpo -c -o es40_idb-DEC21143.o `test -f 'DEC21143.cpp' || echo '$(srcdir)/'`DEC21143.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-DEC21143.Tpo $(DEPDIR)/es40_idb-DEC21143.Po
#	$(AM_V_CXX)source='DEC21143.cpp' object='es40_idb-DEC21143.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-DEC21143.o `test -f 'DEC21143.cpp' || echo '$(srcdir)/'`DEC21143.cpp

es40_idb-DEC21143.obj: DEC21143.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-DEC21143.obj -MD -MP -MF $(DEPDIR)/es40_idb-DEC21143.Tpo -c -o es40_idb-DEC21143.obj `if test -f 'DEC21143.cpp'; then $(CYGPATH_W) 'DEC21143.cpp'; else $(CYGPATH_W) '$(srcdir)/DEC21143.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-DEC21143.Tpo $(DEPDIR)/es40_idb-DEC21143.Po
#	$(AM_V_CXX)source='DEC21143.cpp' object='es40_idb-DEC21143.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-DEC21143.obj `if test -f 'DEC21143.cpp'; then $(CYGPATH_W) 'DEC21143.cpp'; else $(CYGPATH_W) '$(srcdir)/DEC21143.cpp'; fi`

es40_idb-Disk.o: Disk.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Disk.o -MD -MP -MF $(DEPDIR)/es40_idb-Disk.Tpo -c -o es40_idb-Disk.o `test -f 'Disk.cpp' || echo '$(srcdir)/'`Disk.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Disk.Tpo $(DEPDIR)/es40_idb-Disk.Po
#	$(AM_V_CXX)source='Disk.cpp' object='es40_idb-Disk.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Disk.o `test -f 'Disk.cpp' || echo '$(srcdir)/'`Disk.cpp

es40_idb-Disk.obj: Disk.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Disk.obj -MD -MP -MF $(DEPDIR)/es40_idb-Disk.Tpo -c -o es40_idb-Disk.obj `if test -f 'Disk.cpp'; then $(CYGPATH_W) 'Disk.cpp'; else $(CYGPATH_W) '$(srcdir)/Disk.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Disk.Tpo $(DEPDIR)/es40_idb-Disk.Po
#	$(AM_V_CXX)source='Disk.cpp' object='es40_idb-Disk.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Disk.obj `if test -f 'Disk.cpp'; then $(CYGPATH_W) 'Disk.cpp'; else $(CYGPATH_W) '$(srcdir)/Disk.cpp'; fi`

es40_idb-DiskController.o: DiskController.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-DiskController.o -MD -MP -MF $(DEPDIR)/es40_idb-DiskController.Tpo -c -o es40_idb-DiskController.o `test -f 'DiskController.cpp' || echo '$(srcdir)/'`DiskController.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-DiskController.Tpo $(DEPDIR)/es40_idb-DiskController.Po
#	$(AM_V_CXX)source='DiskController.cpp' object='es40_idb-DiskController.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-DiskController.o `test -f 'DiskController.cpp' || echo '$(srcdir)/'`DiskController.cpp

es40_idb-DiskController.obj: DiskController.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-DiskController.obj -MD -MP -MF $(DEPDIR)/es40_idb-DiskController.Tpo -c -o es40_idb-DiskController.obj `if test -f 'DiskController.cpp'; then $(CYGPATH_W) 'DiskController.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskController.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-DiskController.Tpo $(DEPDIR)/es40_idb-DiskController.Po
#	$(AM_V_CXX)source='DiskController.cpp' object='es40_idb-DiskController.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-DiskController.obj `if test -f 'DiskController.cpp'; then $(CYGPATH_W) 'DiskController.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskController.cpp'; fi`

es40_idb-DiskDevice.o: DiskDevice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-DiskDevice.o -MD -MP -MF $(DEPDIR)/es40_idb-DiskDevice.Tpo -c -o es40_idb-DiskDevice.o `test -f 'DiskDevice.cpp' || echo '$(srcdir)/'`DiskDevice.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-DiskDevice.Tpo $(DEPDIR)/es40_idb-DiskDevice.Po
#	$(AM_V_CXX)source='DiskDevice.cpp' object='es40_idb-DiskDevice.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-DiskDevice.o `test -f 'DiskDevice.cpp' || echo '$(srcdir)/'`DiskDevice.cpp

es40_idb-DiskDevice.obj: DiskDevice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-DiskDevice.obj -MD -MP -MF $(DEPDIR)/es40_idb-DiskDevice.Tpo -c -o es40_idb-DiskDevice.obj `if test -f 'DiskDevice.cpp'; then $(CYGPATH_W) 'DiskDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskDevice.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-DiskDevice.Tpo $(DEPDIR)/es40_idb-DiskDevice.Po
#	$(AM_V_CXX)source='DiskDevice.cpp' object='es40_idb-DiskDevice.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-DiskDevice.obj `if test -f 'DiskDevice.cpp'; then $(CYGPATH_W) 'DiskDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskDevice.cpp'; fi`

es40_idb-DiskFile.o: DiskFile.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-DiskFile.o -MD -MP -MF $(DEPDIR)/es40_idb-DiskFile.Tpo -c -o es40_idb-DiskFile.o `test -f 'DiskFile.cpp' || echo '$(srcdir)/'`DiskFile.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-DiskFile.Tpo $(DEPDIR)/es40_idb-DiskFile.Po
#	$(AM_V_CXX)source='DiskFile.cpp' object='es40_idb-DiskFile.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-DiskFile.o `test -f 'DiskFile.cpp' || echo '$(srcdir)/'`DiskFile.cpp

es40_idb-DiskFile.obj: DiskFile.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-DiskFile.obj -MD -MP -MF $(DEPDIR)/es40_idb-DiskFile.Tpo -c -o es40_idb-DiskFile.obj `if test -f 'DiskFile.cpp'; then $(CYGPATH_W) 'DiskFile.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskFile.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-DiskFile.Tpo $(DEPDIR)/es40_idb-DiskFile.Po
#	$(AM_V_CXX)source='DiskFile.cpp' object='es40_idb-DiskFile.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-DiskFile.obj `if test -f 'DiskFile.cpp'; then $(CYGPATH_W) 'DiskFile.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskFile.cpp'; fi`

es40_idb-DiskRam.o: DiskRam.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-DiskRam.o -MD -MP -MF $(DEPDIR)/es40_idb-DiskRam.Tpo -c -o es40_idb-DiskRam.o `test -f 'DiskRam.cpp' || echo '$(srcdir)/'`DiskRam.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-DiskRam.Tpo $(DEPDIR)/es40_idb-DiskRam.Po
#	$(AM_V_CXX)source='DiskRam.cpp' object='es40_idb-DiskRam.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-DiskRam.o `test -f 'DiskRam.cpp' || echo '$(srcdir)/'`DiskRam.cpp

es40_idb-DiskRam.obj: DiskRam.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-DiskRam.obj -MD -MP -MF $(DEPDIR)/es40_idb-DiskRam.Tpo -c -o es40_idb-DiskRam.obj `if test -f 'DiskRam.cpp'; then $(CYGPATH_W) 'DiskRam.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskRam.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-DiskRam.Tpo $(DEPDIR)/es40_idb-DiskRam.Po
#	$(AM_V_CXX)source='DiskRam.cpp' object='es40_idb-DiskRam.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-DiskRam.obj `if test -f 'DiskRam.cpp'; then $(CYGPATH_W) 'DiskRam.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskRam.cpp'; fi`

es40_idb-DMA.o: DMA.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-DMA.o -MD -MP -MF $(DEPDIR)/es40_idb-DMA.Tpo -c -o es40_idb-DMA.o `test -f 'DMA.cpp' || echo '$(srcdir)/'`DMA.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-DMA.Tpo $(DEPDIR)/es40_idb-DMA.Po
#	$(AM_V_CXX)source='DMA.cpp' object='es40_idb-DMA.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-DMA.o `test -f 'DMA.cpp' || echo '$(srcdir)/'`DMA.cpp

es40_idb-DMA.obj: DMA.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-DMA.obj -MD -MP -MF $(DEPDIR)/es40_idb-DMA.Tpo -c -o es40_idb-DMA.obj `if test -f 'DMA.cpp'; then $(CYGPATH_W) 'DMA.cpp'; else $(CYGPATH_W) '$(srcdir)/DMA.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-DMA.Tpo $(DEPDIR)/es40_idb-DMA.Po
#	$(AM_V_CXX)source='DMA.cpp' object='es40_idb-DMA.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-DMA.obj `if test -f 'DMA.cpp'; then $(CYGPATH_W) 'DMA.cpp'; else $(CYGPATH_W) '$(srcdir)/DMA.cpp'; fi`

es40_idb-DPR.o: DPR.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-DPR.o -MD -MP -MF $(DEPDIR)/es40_idb-DPR.Tpo -c -o es40_idb-DPR.o `test -f 'DPR.cpp' || echo '$(srcdir)/'`DPR.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-DPR.Tpo $(DEPDIR)/es40_idb-DPR.Po
#	$(AM_V_CXX)source='DPR.cpp' object='es40_idb-DPR.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-DPR.o `test -f 'DPR.cpp' || echo '$(srcdir)/'`DPR.cpp

es40_idb-DPR.obj: DPR.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-DPR.obj -MD -MP -MF $(DEPDIR)/es40_idb-DPR.Tpo -c -o es40_idb-DPR.obj `if test -f 'DPR.cpp'; then $(CYGPATH_W) 'DPR.cpp'; else $(CYGPATH_W) '$(srcdir)/DPR.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-DPR.Tpo $(DEPDIR)/es40_idb-DPR.Po
#	$(AM_V_CXX)source='DPR.cpp' object='es40_idb-DPR.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-DPR.obj `if test -f 'DPR.cpp'; then $(CYGPATH_W) 'DPR.cpp'; else $(CYGPATH_W) '$(srcdir)/DPR.cpp'; fi`

es40_idb-es40_debug.o: es40_debug.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-es40_debug.o -MD -MP -MF $(DEPDIR)/es40_idb-es40_debug.Tpo -c -o es40_idb-es40_debug.o `test -f 'es40_debug.cpp' || echo '$(srcdir)/'`es40_debug.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-es40_debug.Tpo $(DEPDIR)/es40_idb-es40_debug.Po
#	$(AM_V_CXX)source='es40_debug.cpp' object='es40_idb-es40_debug.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-es40_debug.o `test -f 'es40_debug.cpp' || echo '$(srcdir)/'`es40_debug.cpp

es40_idb-es40_debug.obj: es40_debug.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-es40_debug.obj -MD -MP -MF $(DEPDIR)/es40_idb-es40_debug.Tpo -c -o es40_idb-es40_debug.obj `if test -f 'es40_debug.cpp'; then $(CYGPATH_W) 'es40_debug.cpp'; else $(CYGPATH_W) '$(srcdir)/es40_debug.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-es40_debug.Tpo $(DEPDIR)/es40_idb-es40_debug.Po
#	$(AM_V_CXX)source='es40_debug.cpp' object='es40_idb-es40_debug.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-es40_debug.obj `if test -f 'es40_debug.cpp'; then $(CYGPATH_W) 'es40_debug.cpp'; else $(CYGPATH_W) '$(srcdir)/es40_debug.cpp'; fi`

es40_idb-Ethernet.o: Ethernet.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Ethernet.o -MD -MP -MF $(DEPDIR)/es40_idb-Ethernet.Tpo -c -o es40_idb-Ethernet.o `test -f 'Ethernet.cpp' || echo '$(srcdir)/'`Ethernet.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Ethernet.Tpo $(DEPDIR)/es40_idb-Ethernet.Po
#	$(AM_V_CXX)source='Ethernet.cpp' object='es40_idb-Ethernet.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Ethernet.o `test -f 'Ethernet.cpp' || echo '$(srcdir)/'`Ethernet.cpp

es40_idb-Ethernet.obj: Ethernet.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Ethernet.obj -MD -MP -MF $(DEPDIR)/es40_idb-Ethernet.Tpo -c -o es40_idb-Ethernet.obj `if test -f 'Ethernet.cpp'; then $(CYGPATH_W) 'Ethernet.cpp'; else $(CYGPATH_W) '$(srcdir)/Ethernet.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Ethernet.Tpo $(DEPDIR)/es40_idb-Ethernet.Po
#	$(AM_V_CXX)source='Ethernet.cpp' object='es40_idb-Ethernet.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Ethernet.obj `if test -f 'Ethernet.cpp'; then $(CYGPATH_W) 'Ethernet.cpp'; else $(CYGPATH_W) '$(srcdir)/Ethernet.cpp'; fi`

es40_idb-Flash.o: Flash.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Flash.o -MD -MP -MF $(DEPDIR)/es40_idb-Flash.Tpo -c -o es40_idb-Flash.o `test -f 'Flash.cpp' || echo '$(srcdir)/'`Flash.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Flash.Tpo $(DEPDIR)/es40_idb-Flash.Po
#	$(AM_V_CXX)source='Flash.cpp' object='es40_idb-Flash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Flash.o `test -f 'Flash.cpp' || echo '$(srcdir)/'`Flash.cpp

es40_idb-Flash.obj: Flash.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Flash.obj -MD -MP -MF $(DEPDIR)/es40_idb-Flash.Tpo -c -o es40_idb-Flash.obj `if test -f 'Flash.cpp'; then $(CYGPATH_W) 'Flash.cpp'; else $(CYGPATH_W) '$(srcdir)/Flash.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Flash.Tpo $(DEPDIR)/es40_idb-Flash.Po
#	$(AM_V_CXX)source='Flash.cpp' object='es40_idb-Flash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Flash.obj `if test -f 'Flash.cpp'; then $(CYGPATH_W) 'Flash.cpp'; else $(CYGPATH_W) '$(srcdir)/Flash.cpp'; fi`

es40_idb-FloppyController.o: FloppyController.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-FloppyController.o -MD -MP -MF $(DEPDIR)/es40_idb-FloppyController.Tpo -c -o es40_idb-FloppyController.o `test -f 'FloppyController.cpp' || echo '$(srcdir)/'`FloppyController.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-FloppyController.Tpo $(DEPDIR)/es40_idb-FloppyController.Po
#	$(AM_V_CXX)source='FloppyController.cpp' object='es40_idb-FloppyController.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-FloppyController.o `test -f 'FloppyController.cpp' || echo '$(srcdir)/'`FloppyController.cpp

es40_idb-FloppyController.obj: FloppyController.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-FloppyController.obj -MD -MP -MF $(DEPDIR)/es40_idb-FloppyController.Tpo -c -o es40_idb-FloppyController.obj `if test -f 'FloppyController.cpp'; then $(CYGPATH_W) 'FloppyController.cpp'; else $(CYGPATH_W) '$(srcdir)/FloppyController.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-FloppyController.Tpo $(DEPDIR)/es40_idb-FloppyController.Po
#	$(AM_V_CXX)source='FloppyController.cpp' object='es40_idb-FloppyController.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-FloppyController.obj `if test -f 'FloppyController.cpp'; then $(CYGPATH_W) 'FloppyController.cpp'; else $(CYGPATH_W) '$(srcdir)/FloppyController.cpp'; fi`

es40_idb-Keyboard.o: Keyboard.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Keyboard.o -MD -MP -MF $(DEPDIR)/es40_idb-Keyboard.Tpo -c -o es40_idb-Keyboard.o `test -f 'Keyboard.cpp' || echo '$(srcdir)/'`Keyboard.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Keyboard.Tpo $(DEPDIR)/es40_idb-Keyboard.Po
#	$(AM_V_CXX)source='Keyboard.cpp' object='es40_idb-Keyboard.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Keyboard.o `test -f 'Keyboard.cpp' || echo '$(srcdir)/'`Keyboard.cpp

es40_idb-Keyboard.obj: Keyboard.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Keyboard.obj -MD -MP -MF $(DEPDIR)/es40_idb-Keyboard.Tpo -c -o es40_idb-Keyboard.obj `if test -f 'Keyboard.cpp'; then $(CYGPATH_W) 'Keyboard.cpp'; else $(CYGPATH_W) '$(srcdir)/Keyboard.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Keyboard.Tpo $(DEPDIR)/es40_idb-Keyboard.Po
#	$(AM_V_CXX)source='Keyboard.cpp' object='es40_idb-Keyboard.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Keyboard.obj `if test -f 'Keyboard.cpp'; then $(CYGPATH_W) 'Keyboard.cpp'; else $(CYGPATH_W) '$(srcdir)/Keyboard.cpp'; fi`

es40_idb-lockstep.o: lockstep.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-lockstep.o -MD -MP -MF $(DEPDIR)/es40_idb-lockstep.Tpo -c -o es40_idb-lockstep.o `test -f 'lockstep.cpp' || echo '$(srcdir)/'`lockstep.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-lockstep.Tpo $(DEPDIR)/es40_idb-lockstep.Po
#	$(AM_V_CXX)source='lockstep.cpp' object='es40_idb-lockstep.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-lockstep.o `test -f 'lockstep.cpp' || echo '$(srcdir)/'`lockstep.cpp

es40_idb-lockstep.obj: lockstep.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-lockstep.obj -MD -MP -MF $(DEPDIR)/es40_idb-lockstep.Tpo -c -o es40_idb-lockstep.obj `if test -f 'lockstep.cpp'; then $(CYGPATH_W) 'lockstep.cpp'; else $(CYGPATH_W) '$(srcdir)/lockstep.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-lockstep.Tpo $(DEPDIR)/es40_idb-lockstep.Po
#	$(AM_V_CXX)source='lockstep.cpp' object='es40_idb-lockstep.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-lockstep.obj `if test -f 'lockstep.cpp'; then $(CYGPATH_W) 'lockstep.cpp'; else $(CYGPATH_W) '$(srcdir)/lockstep.cpp'; fi`

es40_idb-PCIDevice.o: PCIDevice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-PCIDevice.o -MD -MP -MF $(DEPDIR)/es40_idb-PCIDevice.Tpo -c -o es40_idb-PCIDevice.o `test -f 'PCIDevice.cpp' || echo '$(srcdir)/'`PCIDevice.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-PCIDevice.Tpo $(DEPDIR)/es40_idb-PCIDevice.Po
#	$(AM_V_CXX)source='PCIDevice.cpp' object='es40_idb-PCIDevice.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-PCIDevice.o `test -f 'PCIDevice.cpp' || echo '$(srcdir)/'`PCIDevice.cpp

es40_idb-PCIDevice.obj: PCIDevice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-PCIDevice.obj -MD -MP -MF $(DEPDIR)/es40_idb-PCIDevice.Tpo -c -o es40_idb-PCIDevice.obj `if test -f 'PCIDevice.cpp'; then $(CYGPATH_W) 'PCIDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/PCIDevice.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-PCIDevice.Tpo $(DEPDIR)/es40_idb-PCIDevice.Po
#	$(AM_V_CXX)source='PCIDevice.cpp' object='es40_idb-PCIDevice.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-PCIDevice.obj `if test -f 'PCIDevice.cpp'; then $(CYGPATH_W) 'PCIDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/PCIDevice.cpp'; fi`

es40_idb-Port80.o: Port80.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Port80.o -MD -MP -MF $(DEPDIR)/es40_idb-Port80.Tpo -c -o es40_idb-Port80.o `test -f 'Port80.cpp' || echo '$(srcdir)/'`Port80.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Port80.Tpo $(DEPDIR)/es40_idb-Port80.Po
#	$(AM_V_CXX)source='Port80.cpp' object='es40_idb-Port80.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Port80.o `test -f 'Port80.cpp' || echo '$(srcdir)/'`Port80.cpp

es40_idb-Port80.obj: Port80.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Port80.obj -MD -MP -MF $(DEPDIR)/es40_idb-Port80.Tpo -c -o es40_idb-Port80.obj `if test -f 'Port80.cpp'; then $(CYGPATH_W) 'Port80.cpp'; else $(CYGPATH_W) '$(srcdir)/Port80.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Port80.Tpo $(DEPDIR)/es40_idb-Port80.Po
#	$(AM_V_CXX)source='Port80.cpp' object='es40_idb-Port80.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Port80.obj `if test -f 'Port80.cpp'; then $(CYGPATH_W) 'Port80.cpp'; else $(CYGPATH_W) '$(srcdir)/Port80.cpp'; fi`

es40_idb-S3Trio64.o: S3Trio64.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-S3Trio64.o -MD -MP -MF $(DEPDIR)/es40_idb-S3Trio64.Tpo -c -o es40_idb-S3Trio64.o `test -f 'S3Trio64.cpp' || echo '$(srcdir)/'`S3Trio64.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-S3Trio64.Tpo $(DEPDIR)/es40_idb-S3Trio64.Po
#	$(AM_V_CXX)source='S3Trio64.cpp' object='es40_idb-S3Trio64.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-S3Trio64.o `test -f 'S3Trio64.cpp' || echo '$(srcdir)/'`S3Trio64.cpp

es40_idb-S3Trio64.obj: S3Trio64.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-S3Trio64.obj -MD -MP -MF $(DEPDIR)/es40_idb-S3Trio64.Tpo -c -o es40_idb-S3Trio64.obj `if test -f 'S3Trio64.cpp'; then $(CYGPATH_W) 'S3Trio64.cpp'; else $(CYGPATH_W) '$(srcdir)/S3Trio64.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-S3Trio64.Tpo $(DEPDIR)/es40_idb-S3Trio64.Po
#	$(AM_V_CXX)source='S3Trio64.cpp' object='es40_idb-S3Trio64.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-S3Trio64.obj `if test -f 'S3Trio64.cpp'; then $(CYGPATH_W) 'S3Trio64.cpp'; else $(CYGPATH_W) '$(srcdir)/S3Trio64.cpp'; fi`

es40_idb-SCSIBus.o: SCSIBus.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-SCSIBus.o -MD -MP -MF $(DEPDIR)/es40_idb-SCSIBus.Tpo -c -o es40_idb-SCSIBus.o `test -f 'SCSIBus.cpp' || echo '$(srcdir)/'`SCSIBus.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-SCSIBus.Tpo $(DEPDIR)/es40_idb-SCSIBus.Po
#	$(AM_V_CXX)source='SCSIBus.cpp' object='es40_idb-SCSIBus.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-SCSIBus.o `test -f 'SCSIBus.cpp' || echo '$(srcdir)/'`SCSIBus.cpp

es40_idb-SCSIBus.obj: SCSIBus.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-SCSIBus.obj -MD -MP -MF $(DEPDIR)/es40_idb-SCSIBus.Tpo -c -o es40_idb-SCSIBus.obj `if test -f 'SCSIBus.cpp'; then $(CYGPATH_W) 'SCSIBus.cpp'; else $(CYGPATH_W) '$(srcdir)/SCSIBus.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-SCSIBus.Tpo $(DEPDIR)/es40_idb-SCSIBus.Po
#	$(AM_V_CXX)source='SCSIBus.cpp' object='es40_idb-SCSIBus.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-SCSIBus.obj `if test -f 'SCSIBus.cpp'; then $(CYGPATH_W) 'SCSIBus.cpp'; else $(CYGPATH_W) '$(srcdir)/SCSIBus.cpp'; fi`

es40_idb-SCSIDevice.o: SCSIDevice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-SCSIDevice.o -MD -MP -MF $(DEPDIR)/es40_idb-SCSIDevice.Tpo -c -o es40_idb-SCSIDevice.o `test -f 'SCSIDevice.cpp' || echo '$(srcdir)/'`SCSIDevice.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-SCSIDevice.Tpo $(DEPDIR)/es40_idb-SCSIDevice.Po
#	$(AM_V_CXX)source='SCSIDevice.cpp' object='es40_idb-SCSIDevice.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-SCSIDevice.o `test -f 'SCSIDevice.cpp' || echo '$(srcdir)/'`SCSIDevice.cpp

es40_idb-SCSIDevice.obj: SCSIDevice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-SCSIDevice.obj -MD -MP -MF $(DEPDIR)/es40_idb-SCSIDevice.Tpo -c -o es40_idb-SCSIDevice.obj `if test -f 'SCSIDevice.cpp'; then $(CYGPATH_W) 'SCSIDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/SCSIDevice.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-SCSIDevice.Tpo $(DEPDIR)/es40_idb-SCSIDevice.Po
#	$(AM_V_CXX)source='SCSIDevice.cpp' object='es40_idb-SCSIDevice.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-SCSIDevice.obj `if test -f 'SCSIDevice.cpp'; then $(CYGPATH_W) 'SCSIDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/SCSIDevice.cpp'; fi`

es40_idb-Serial.o: Serial.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Serial.o -MD -MP -MF $(DEPDIR)/es40_idb-Serial.Tpo -c -o es40_idb-Serial.o `test -f 'Serial.cpp' || echo '$(srcdir)/'`Serial.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Serial.Tpo $(DEPDIR)/es40_idb-Serial.Po
#	$(AM_V_CXX)source='Serial.cpp' object='es40_idb-Serial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Serial.o `test -f 'Serial.cpp' || echo '$(srcdir)/'`Serial.cpp

es40_idb-Serial.obj: Serial.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Serial.obj -MD -MP -MF $(DEPDIR)/es40_idb-Serial.Tpo -c -o es40_idb-Serial.obj `if test -f 'Serial.cpp'; then $(CYGPATH_W) 'Serial.cpp'; else $(CYGPATH_W) '$(srcdir)/Serial.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Serial.Tpo $(DEPDIR)/es40_idb-Serial.Po
#	$(AM_V_CXX)source='Serial.cpp' object='es40_idb-Serial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Serial.obj `if test -f 'Serial.cpp'; then $(CYGPATH_W) 'Serial.cpp'; else $(CYGPATH_W) '$(srcdir)/Serial.cpp'; fi`

es40_idb-StdAfx.o: StdAfx.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-StdAfx.o -MD -MP -MF $(DEPDIR)/es40_idb-StdAfx.Tpo -c -o es40_idb-StdAfx.o `test -f 'StdAfx.cpp' || echo '$(srcdir)/'`StdAfx.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-StdAfx.Tpo $(DEPDIR)/es40_idb-StdAfx.Po
#	$(AM_V_CXX)source='StdAfx.cpp' object='es40_idb-StdAfx.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-StdAfx.o `test -f 'StdAfx.cpp' || echo '$(srcdir)/'`StdAfx.cpp

es40_idb-StdAfx.obj: StdAfx.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-StdAfx.obj -MD -MP -MF $(DEPDIR)/es40_idb-StdAfx.Tpo -c -o es40_idb-StdAfx.obj `if test -f 'StdAfx.cpp'; then $(CYGPATH_W) 'StdAfx.cpp'; else $(CYGPATH_W) '$(srcdir)/StdAfx.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-StdAfx.Tpo $(DEPDIR)/es40_idb-StdAfx.Po
#	$(AM_V_CXX)source='StdAfx.cpp' object='es40_idb-StdAfx.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-StdAfx.obj `if test -f 'StdAfx.cpp'; then $(CYGPATH_W) 'StdAfx.cpp'; else $(CYGPATH_W) '$(srcdir)/StdAfx.cpp'; fi`

es40_idb-Sym53C810.o: Sym53C810.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Sym53C810.o -MD -MP -MF $(DEPDIR)/es40_idb-Sym53C810.Tpo -c -o es40_idb-Sym53C810.o `test -f 'Sym53C810.cpp' || echo '$(srcdir)/'`Sym53C810.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Sym53C810.Tpo $(DEPDIR)/es40_idb-Sym53C810.Po
#	$(AM_V_CXX)source='Sym53C810.cpp' object='es40_idb-Sym53C810.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Sym53C810.o `test -f 'Sym53C810.cpp' || echo '$(srcdir)/'`Sym53C810.cpp

es40_idb-Sym53C810.obj: Sym53C810.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Sym53C810.obj -MD -MP -MF $(DEPDIR)/es40_idb-Sym53C810.Tpo -c -o es40_idb-Sym53C810.obj `if test -f 'Sym53C810.cpp'; then $(CYGPATH_W) 'Sym53C810.cpp'; else $(CYGPATH_W) '$(srcdir)/Sym53C810.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Sym53C810.Tpo $(DEPDIR)/es40_idb-Sym53C810.Po
#	$(AM_V_CXX)source='Sym53C810.cpp' object='es40_idb-Sym53C810.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Sym53C810.obj `if test -f 'Sym53C810.cpp'; then $(CYGPATH_W) 'Sym53C810.cpp'; else $(CYGPATH_W) '$(srcdir)/Sym53C810.cpp'; fi`

es40_idb-Sym53C895.o: Sym53C895.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Sym53C895.o -MD -MP -MF $(DEPDIR)/es40_idb-Sym53C895.Tpo -c -o es40_idb-Sym53C895.o `test -f 'Sym53C895.cpp' || echo '$(srcdir)/'`Sym53C895.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Sym53C895.Tpo $(DEPDIR)/es40_idb-Sym53C895.Po
#	$(AM_V_CXX)source='Sym53C895.cpp' object='es40_idb-Sym53C895.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Sym53C895.o `test -f 'Sym53C895.cpp' || echo '$(srcdir)/'`Sym53C895.cpp

es40_idb-Sym53C895.obj: Sym53C895.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-Sym53C895.obj -MD -MP -MF $(DEPDIR)/es40_idb-Sym53C895.Tpo -c -o es40_idb-Sym53C895.obj `if test -f 'Sym53C895.cpp'; then $(CYGPATH_W) 'Sym53C895.cpp'; else $(CYGPATH_W) '$(srcdir)/Sym53C895.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-Sym53C895.Tpo $(DEPDIR)/es40_idb-Sym53C895.Po
#	$(AM_V_CXX)source='Sym53C895.cpp' object='es40_idb-Sym53C895.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-Sym53C895.obj `if test -f 'Sym53C895.cpp'; then $(CYGPATH_W) 'Sym53C895.cpp'; else $(CYGPATH_W) '$(srcdir)/Sym53C895.cpp'; fi`

es40_idb-SystemComponent.o: SystemComponent.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-SystemComponent.o -MD -MP -MF $(DEPDIR)/es40_idb-SystemComponent.Tpo -c -o es40_idb-SystemComponent.o `test -f 'SystemComponent.cpp' || echo '$(srcdir)/'`SystemComponent.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-SystemComponent.Tpo $(DEPDIR)/es40_idb-SystemComponent.Po
#	$(AM_V_CXX)source='SystemComponent.cpp' object='es40_idb-SystemComponent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-SystemComponent.o `test -f 'SystemComponent.cpp' || echo '$(srcdir)/'`SystemComponent.cpp

es40_idb-SystemComponent.obj: SystemComponent.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-SystemComponent.obj -MD -MP -MF $(DEPDIR)/es40_idb-SystemComponent.Tpo -c -o es40_idb-SystemComponent.obj `if test -f 'SystemComponent.cpp'; then $(CYGPATH_W) 'SystemComponent.cpp'; else $(CYGPATH_W) '$(srcdir)/SystemComponent.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-SystemComponent.Tpo $(DEPDIR)/es40_idb-SystemComponent.Po
#	$(AM_V_CXX)source='SystemComponent.cpp' object='es40_idb-SystemComponent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-SystemComponent.obj `if test -f 'SystemComponent.cpp'; then $(CYGPATH_W) 'SystemComponent.cpp'; else $(CYGPATH_W) '$(srcdir)/SystemComponent.cpp'; fi`

es40_idb-System.o: System.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-System.o -MD -MP -MF $(DEPDIR)/es40_idb-System.Tpo -c -o es40_idb-System.o `test -f 'System.cpp' || echo '$(srcdir)/'`System.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-System.Tpo $(DEPDIR)/es40_idb-System.Po
#	$(AM_V_CXX)source='System.cpp' object='es40_idb-System.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-System.o `test -f 'System.cpp' || echo '$(srcdir)/'`System.cpp

es40_idb-System.obj: System.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-System.obj -MD -MP -MF $(DEPDIR)/es40_idb-System.Tpo -c -o es40_idb-System.obj `if test -f 'System.cpp'; then $(CYGPATH_W) 'System.cpp'; else $(CYGPATH_W) '$(srcdir)/System.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-System.Tpo $(DEPDIR)/es40_idb-System.Po
#	$(AM_V_CXX)source='System.cpp' object='es40_idb-System.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-System.obj `if test -f 'System.cpp'; then $(CYGPATH_W) 'System.cpp'; else $(CYGPATH_W) '$(srcdir)/System.cpp'; fi`

es40_idb-TraceEngine.o: TraceEngine.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-TraceEngine.o -MD -MP -MF $(DEPDIR)/es40_idb-TraceEngine.Tpo -c -o es40_idb-TraceEngine.o `test -f 'TraceEngine.cpp' || echo '$(srcdir)/'`TraceEngine.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-TraceEngine.Tpo $(DEPDIR)/es40_idb-TraceEngine.Po
#	$(AM_V_CXX)source='TraceEngine.cpp' object='es40_idb-TraceEngine.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-TraceEngine.o `test -f 'TraceEngine.cpp' || echo '$(srcdir)/'`TraceEngine.cpp

es40_idb-TraceEngine.obj: TraceEngine.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-TraceEngine.obj -MD -MP -MF $(DEPDIR)/es40_idb-TraceEngine.Tpo -c -o es40_idb-TraceEngine.obj `if test -f 'TraceEngine.cpp'; then $(CYGPATH_W) 'TraceEngine.cpp'; else $(CYGPATH_W) '$(srcdir)/TraceEngine.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-TraceEngine.Tpo $(DEPDIR)/es40_idb-TraceEngine.Po
#	$(AM_V_CXX)source='TraceEngine.cpp' object='es40_idb-TraceEngine.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-TraceEngine.obj `if test -f 'TraceEngine.cpp'; then $(CYGPATH_W) 'TraceEngine.cpp'; else $(CYGPATH_W) '$(srcdir)/TraceEngine.cpp'; fi`

es40_idb-VGA.o: VGA.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-VGA.o -MD -MP -MF $(DEPDIR)/es40_idb-VGA.Tpo -c -o es40_idb-VGA.o `test -f 'VGA.cpp' || echo '$(srcdir)/'`VGA.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-VGA.Tpo $(DEPDIR)/es40_idb-VGA.Po
#	$(AM_V_CXX)source='VGA.cpp' object='es40_idb-VGA.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-VGA.o `test -f 'VGA.cpp' || echo '$(srcdir)/'`VGA.cpp

es40_idb-VGA.obj: VGA.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT es40_idb-VGA.obj -MD -MP -MF $(DEPDIR)/es40_idb-VGA.Tpo -c -o es40_idb-VGA.obj `if test -f 'VGA.cpp'; then $(CYGPATH_W) 'VGA.cpp'; else $(CYGPATH_W) '$(srcdir)/VGA.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_idb-VGA.Tpo $(DEPDIR)/es40_idb-VGA.Po
#	$(AM_V_CXX)source='VGA.cpp' object='es40_idb-VGA.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o es40_idb-VGA.obj `if test -f 'VGA.cpp'; then $(CYGPATH_W) 'VGA.cpp'; else $(CYGPATH_W) '$(srcdir)/VGA.cpp'; fi`

gui/es40_idb-gui.o: gui/gui.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_idb-gui.o -MD -MP -MF gui/$(DEPDIR)/es40_idb-gui.Tpo -c -o gui/es40_idb-gui.o `test -f 'gui/gui.cpp' || echo '$(srcdir)/'`gui/gui.cpp
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_idb-gui.Tpo gui/$(DEPDIR)/es40_idb-gui.Po
#	$(AM_V_CXX)source='gui/gui.cpp' object='gui/es40_idb-gui.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_idb-gui.o `test -f 'gui/gui.cpp' || echo '$(srcdir)/'`gui/gui.cpp

gui/es40_idb-gui.obj: gui/gui.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_idb-gui.obj -MD -MP -MF gui/$(DEPDIR)/es40_idb-gui.Tpo -c -o gui/es40_idb-gui.obj `if test -f 'gui/gui.cpp'; then $(CYGPATH_W) 'gui/gui.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/gui.cpp'; fi`
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_idb-gui.Tpo gui/$(DEPDIR)/es40_idb-gui.Po
#	$(AM_V_CXX)source='gui/gui.cpp' object='gui/es40_idb-gui.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_idb-gui.obj `if test -f 'gui/gui.cpp'; then $(CYGPATH_W) 'gui/gui.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/gui.cpp'; fi`

gui/es40_idb-gui_x11.o: gui/gui_x11.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_idb-gui_x11.o -MD -MP -MF gui/$(DEPDIR)/es40_idb-gui_x11.Tpo -c -o gui/es40_idb-gui_x11.o `test -f 'gui/gui_x11.cpp' || echo '$(srcdir)/'`gui/gui_x11.cpp
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_idb-gui_x11.Tpo gui/$(DEPDIR)/es40_idb-gui_x11.Po
#	$(AM_V_CXX)source='gui/gui_x11.cpp' object='gui/es40_idb-gui_x11.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_idb-gui_x11.o `test -f 'gui/gui_x11.cpp' || echo '$(srcdir)/'`gui/gui_x11.cpp

gui/es40_idb-gui_x11.obj: gui/gui_x11.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_idb-gui_x11.obj -MD -MP -MF gui/$(DEPDIR)/es40_idb-gui_x11.Tpo -c -o gui/es40_idb-gui_x11.obj `if test -f 'gui/gui_x11.cpp'; then $(CYGPATH_W) 'gui/gui_x11.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/gui_x11.cpp'; fi`
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_idb-gui_x11.Tpo gui/$(DEPDIR)/es40_idb-gui_x11.Po
#	$(AM_V_CXX)source='gui/gui_x11.cpp' object='gui/es40_idb-gui_x11.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_idb-gui_x11.obj `if test -f 'gui/gui_x11.cpp'; then $(CYGPATH_W) 'gui/gui_x11.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/gui_x11.cpp'; fi`

gui/es40_idb-keymap.o: gui/keymap.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_idb-keymap.o -MD -MP -MF gui/$(DEPDIR)/es40_idb-keymap.Tpo -c -o gui/es40_idb-keymap.o `test -f 'gui/keymap.cpp' || echo '$(srcdir)/'`gui/keymap.cpp
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_idb-keymap.Tpo gui/$(DEPDIR)/es40_idb-keymap.Po
#	$(AM_V_CXX)source='gui/keymap.cpp' object='gui/es40_idb-keymap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_idb-keymap.o `test -f 'gui/keymap.cpp' || echo '$(srcdir)/'`gui/keymap.cpp

gui/es40_idb-keymap.obj: gui/keymap.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_idb-keymap.obj -MD -MP -MF gui/$(DEPDIR)/es40_idb-keymap.Tpo -c -o gui/es40_idb-keymap.obj `if test -f 'gui/keymap.cpp'; then $(CYGPATH_W) 'gui/keymap.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/keymap.cpp'; fi`
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_idb-keymap.Tpo gui/$(DEPDIR)/es40_idb-keymap.Po
#	$(AM_V_CXX)source='gui/keymap.cpp' object='gui/es40_idb-keymap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_idb-keymap.obj `if test -f 'gui/keymap.cpp'; then $(CYGPATH_W) 'gui/keymap.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/keymap.cpp'; fi`

gui/es40_idb-scancodes.o: gui/scancodes.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_idb-scancodes.o -MD -MP -MF gui/$(DEPDIR)/es40_idb-scancodes.Tpo -c -o gui/es40_idb-scancodes.o `test -f 'gui/scancodes.cpp' || echo '$(srcdir)/'`gui/scancodes.cpp
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_idb-scancodes.Tpo gui/$(DEPDIR)/es40_idb-scancodes.Po
#	$(AM_V_CXX)source='gui/scancodes.cpp' object='gui/es40_idb-scancodes.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_idb-scancodes.o `test -f 'gui/scancodes.cpp' || echo '$(srcdir)/'`gui/scancodes.cpp

gui/es40_idb-scancodes.obj: gui/scancodes.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_idb-scancodes.obj -MD -MP -MF gui/$(DEPDIR)/es40_idb-scancodes.Tpo -c -o gui/es40_idb-scancodes.obj `if test -f 'gui/scancodes.cpp'; then $(CYGPATH_W) 'gui/scancodes.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/scancodes.cpp'; fi`
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_idb-scancodes.Tpo gui/$(DEPDIR)/es40_idb-scancodes.Po
#	$(AM_V_CXX)source='gui/scancodes.cpp' object='gui/es40_idb-scancodes.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_idb-scancodes.obj `if test -f 'gui/scancodes.cpp'; then $(CYGPATH_W) 'gui/scancodes.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/scancodes.cpp'; fi`

gui/es40_idb-sdl.o: gui/sdl.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_idb-sdl.o -MD -MP -MF gui/$(DEPDIR)/es40_idb-sdl.Tpo -c -o gui/es40_idb-sdl.o `test -f 'gui/sdl.cpp' || echo '$(srcdir)/'`gui/sdl.cpp
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_idb-sdl.Tpo gui/$(DEPDIR)/es40_idb-sdl.Po
#	$(AM_V_CXX)source='gui/sdl.cpp' object='gui/es40_idb-sdl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_idb-sdl.o `test -f 'gui/sdl.cpp' || echo '$(srcdir)/'`gui/sdl.cpp

gui/es40_idb-sdl.obj: gui/sdl.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_idb-sdl.obj -MD -MP -MF gui/$(DEPDIR)/es40_idb-sdl.Tpo -c -o gui/es40_idb-sdl.obj `if test -f 'gui/sdl.cpp'; then $(CYGPATH_W) 'gui/sdl.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/sdl.cpp'; fi`
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_idb-sdl.Tpo gui/$(DEPDIR)/es40_idb-sdl.Po
#	$(AM_V_CXX)source='gui/sdl.cpp' object='gui/es40_idb-sdl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_idb-sdl.obj `if test -f 'gui/sdl.cpp'; then $(CYGPATH_W) 'gui/sdl.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/sdl.cpp'; fi`

base/es40_idb-Bugcheck.o: base/Bugcheck.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-Bugcheck.o -MD -MP -MF base/$(DEPDIR)/es40_idb-Bugcheck.Tpo -c -o base/es40_idb-Bugcheck.o `test -f 'base/Bugcheck.cpp' || echo '$(srcdir)/'`base/Bugcheck.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-Bugcheck.Tpo base/$(DEPDIR)/es40_idb-Bugcheck.Po
#	$(AM_V_CXX)source='base/Bugcheck.cpp' object='base/es40_idb-Bugcheck.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-Bugcheck.o `test -f 'base/Bugcheck.cpp' || echo '$(srcdir)/'`base/Bugcheck.cpp

base/es40_idb-Bugcheck.obj: base/Bugcheck.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-Bugcheck.obj -MD -MP -MF base/$(DEPDIR)/es40_idb-Bugcheck.Tpo -c -o base/es40_idb-Bugcheck.obj `if test -f 'base/Bugcheck.cpp'; then $(CYGPATH_W) 'base/Bugcheck.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Bugcheck.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-Bugcheck.Tpo base/$(DEPDIR)/es40_idb-Bugcheck.Po
#	$(AM_V_CXX)source='base/Bugcheck.cpp' object='base/es40_idb-Bugcheck.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-Bugcheck.obj `if test -f 'base/Bugcheck.cpp'; then $(CYGPATH_W) 'base/Bugcheck.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Bugcheck.cpp'; fi`

base/es40_idb-ErrorHandler.o: base/ErrorHandler.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-ErrorHandler.o -MD -MP -MF base/$(DEPDIR)/es40_idb-ErrorHandler.Tpo -c -o base/es40_idb-ErrorHandler.o `test -f 'base/ErrorHandler.cpp' || echo '$(srcdir)/'`base/ErrorHandler.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-ErrorHandler.Tpo base/$(DEPDIR)/es40_idb-ErrorHandler.Po
#	$(AM_V_CXX)source='base/ErrorHandler.cpp' object='base/es40_idb-ErrorHandler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-ErrorHandler.o `test -f 'base/ErrorHandler.cpp' || echo '$(srcdir)/'`base/ErrorHandler.cpp

base/es40_idb-ErrorHandler.obj: base/ErrorHandler.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-ErrorHandler.obj -MD -MP -MF base/$(DEPDIR)/es40_idb-ErrorHandler.Tpo -c -o base/es40_idb-ErrorHandler.obj `if test -f 'base/ErrorHandler.cpp'; then $(CYGPATH_W) 'base/ErrorHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/base/ErrorHandler.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-ErrorHandler.Tpo base/$(DEPDIR)/es40_idb-ErrorHandler.Po
#	$(AM_V_CXX)source='base/ErrorHandler.cpp' object='base/es40_idb-ErrorHandler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-ErrorHandler.obj `if test -f 'base/ErrorHandler.cpp'; then $(CYGPATH_W) 'base/ErrorHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/base/ErrorHandler.cpp'; fi`

base/es40_idb-Event.o: base/Event.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-Event.o -MD -MP -MF base/$(DEPDIR)/es40_idb-Event.Tpo -c -o base/es40_idb-Event.o `test -f 'base/Event.cpp' || echo '$(srcdir)/'`base/Event.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-Event.Tpo base/$(DEPDIR)/es40_idb-Event.Po
#	$(AM_V_CXX)source='base/Event.cpp' object='base/es40_idb-Event.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-Event.o `test -f 'base/Event.cpp' || echo '$(srcdir)/'`base/Event.cpp

base/es40_idb-Event.obj: base/Event.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-Event.obj -MD -MP -MF base/$(DEPDIR)/es40_idb-Event.Tpo -c -o base/es40_idb-Event.obj `if test -f 'base/Event.cpp'; then $(CYGPATH_W) 'base/Event.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Event.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-Event.Tpo base/$(DEPDIR)/es40_idb-Event.Po
#	$(AM_V_CXX)source='base/Event.cpp' object='base/es40_idb-Event.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-Event.obj `if test -f 'base/Event.cpp'; then $(CYGPATH_W) 'base/Event.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Event.cpp'; fi`

base/es40_idb-Exception.o: base/Exception.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-Exception.o -MD -MP -MF base/$(DEPDIR)/es40_idb-Exception.Tpo -c -o base/es40_idb-Exception.o `test -f 'base/Exception.cpp' || echo '$(srcdir)/'`base/Exception.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-Exception.Tpo base/$(DEPDIR)/es40_idb-Exception.Po
#	$(AM_V_CXX)source='base/Exception.cpp' object='base/es40_idb-Exception.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-Exception.o `test -f 'base/Exception.cpp' || echo '$(srcdir)/'`base/Exception.cpp

base/es40_idb-Exception.obj: base/Exception.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-Exception.obj -MD -MP -MF base/$(DEPDIR)/es40_idb-Exception.Tpo -c -o base/es40_idb-Exception.obj `if test -f 'base/Exception.cpp'; then $(CYGPATH_W) 'base/Exception.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Exception.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-Exception.Tpo base/$(DEPDIR)/es40_idb-Exception.Po
#	$(AM_V_CXX)source='base/Exception.cpp' object='base/es40_idb-Exception.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-Exception.obj `if test -f 'base/Exception.cpp'; then $(CYGPATH_W) 'base/Exception.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Exception.cpp'; fi`

base/es40_idb-Mutex.o: base/Mutex.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-Mutex.o -MD -MP -MF base/$(DEPDIR)/es40_idb-Mutex.Tpo -c -o base/es40_idb-Mutex.o `test -f 'base/Mutex.cpp' || echo '$(srcdir)/'`base/Mutex.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-Mutex.Tpo base/$(DEPDIR)/es40_idb-Mutex.Po
#	$(AM_V_CXX)source='base/Mutex.cpp' object='base/es40_idb-Mutex.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-Mutex.o `test -f 'base/Mutex.cpp' || echo '$(srcdir)/'`base/Mutex.cpp

base/es40_idb-Mutex.obj: base/Mutex.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-Mutex.obj -MD -MP -MF base/$(DEPDIR)/es40_idb-Mutex.Tpo -c -o base/es40_idb-Mutex.obj `if test -f 'base/Mutex.cpp'; then $(CYGPATH_W) 'base/Mutex.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Mutex.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-Mutex.Tpo base/$(DEPDIR)/es40_idb-Mutex.Po
#	$(AM_V_CXX)source='base/Mutex.cpp' object='base/es40_idb-Mutex.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-Mutex.obj `if test -f 'base/Mutex.cpp'; then $(CYGPATH_W) 'base/Mutex.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Mutex.cpp'; fi`

base/es40_idb-NumberFormatter.o: base/NumberFormatter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-NumberFormatter.o -MD -MP -MF base/$(DEPDIR)/es40_idb-NumberFormatter.Tpo -c -o base/es40_idb-NumberFormatter.o `test -f 'base/NumberFormatter.cpp' || echo '$(srcdir)/'`base/NumberFormatter.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-NumberFormatter.Tpo base/$(DEPDIR)/es40_idb-NumberFormatter.Po
#	$(AM_V_CXX)source='base/NumberFormatter.cpp' object='base/es40_idb-NumberFormatter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-NumberFormatter.o `test -f 'base/NumberFormatter.cpp' || echo '$(srcdir)/'`base/NumberFormatter.cpp

base/es40_idb-NumberFormatter.obj: base/NumberFormatter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-NumberFormatter.obj -MD -MP -MF base/$(DEPDIR)/es40_idb-NumberFormatter.Tpo -c -o base/es40_idb-NumberFormatter.obj `if test -f 'base/NumberFormatter.cpp'; then $(CYGPATH_W) 'base/NumberFormatter.cpp'; else $(CYGPATH_W) '$(srcdir)/base/NumberFormatter.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-NumberFormatter.Tpo base/$(DEPDIR)/es40_idb-NumberFormatter.Po
#	$(AM_V_CXX)source='base/NumberFormatter.cpp' object='base/es40_idb-NumberFormatter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-NumberFormatter.obj `if test -f 'base/NumberFormatter.cpp'; then $(CYGPATH_W) 'base/NumberFormatter.cpp'; else $(CYGPATH_W) '$(srcdir)/base/NumberFormatter.cpp'; fi`

base/es40_idb-RefCountedObject.o: base/RefCountedObject.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-RefCountedObject.o -MD -MP -MF base/$(DEPDIR)/es40_idb-RefCountedObject.Tpo -c -o base/es40_idb-RefCountedObject.o `test -f 'base/RefCountedObject.cpp' || echo '$(srcdir)/'`base/RefCountedObject.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-RefCountedObject.Tpo base/$(DEPDIR)/es40_idb-RefCountedObject.Po
#	$(AM_V_CXX)source='base/RefCountedObject.cpp' object='base/es40_idb-RefCountedObject.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-RefCountedObject.o `test -f 'base/RefCountedObject.cpp' || echo '$(srcdir)/'`base/RefCountedObject.cpp

base/es40_idb-RefCountedObject.obj: base/RefCountedObject.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-RefCountedObject.obj -MD -MP -MF base/$(DEPDIR)/es40_idb-RefCountedObject.Tpo -c -o base/es40_idb-RefCountedObject.obj `if test -f 'base/RefCountedObject.cpp'; then $(CYGPATH_W) 'base/RefCountedObject.cpp'; else $(CYGPATH_W) '$(srcdir)/base/RefCountedObject.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-RefCountedObject.Tpo base/$(DEPDIR)/es40_idb-RefCountedObject.Po
#	$(AM_V_CXX)source='base/RefCountedObject.cpp' object='base/es40_idb-RefCountedObject.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-RefCountedObject.obj `if test -f 'base/RefCountedObject.cpp'; then $(CYGPATH_W) 'base/RefCountedObject.cpp'; else $(CYGPATH_W) '$(srcdir)/base/RefCountedObject.cpp'; fi`

base/es40_idb-Runnable.o: base/Runnable.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-Runnable.o -MD -MP -MF base/$(DEPDIR)/es40_idb-Runnable.Tpo -c -o base/es40_idb-Runnable.o `test -f 'base/Runnable.cpp' || echo '$(srcdir)/'`base/Runnable.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-Runnable.Tpo base/$(DEPDIR)/es40_idb-Runnable.Po
#	$(AM_V_CXX)source='base/Runnable.cpp' object='base/es40_idb-Runnable.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-Runnable.o `test -f 'base/Runnable.cpp' || echo '$(srcdir)/'`base/Runnable.cpp

base/es40_idb-Runnable.obj: base/Runnable.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-Runnable.obj -MD -MP -MF base/$(DEPDIR)/es40_idb-Runnable.Tpo -c -o base/es40_idb-Runnable.obj `if test -f 'base/Runnable.cpp'; then $(CYGPATH_W) 'base/Runnable.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Runnable.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-Runnable.Tpo base/$(DEPDIR)/es40_idb-Runnable.Po
#	$(AM_V_CXX)source='base/Runnable.cpp' object='base/es40_idb-Runnable.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-Runnable.obj `if test -f 'base/Runnable.cpp'; then $(CYGPATH_W) 'base/Runnable.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Runnable.cpp'; fi`

base/es40_idb-RWLock.o: base/RWLock.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-RWLock.o -MD -MP -MF base/$(DEPDIR)/es40_idb-RWLock.Tpo -c -o base/es40_idb-RWLock.o `test -f 'base/RWLock.cpp' || echo '$(srcdir)/'`base/RWLock.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-RWLock.Tpo base/$(DEPDIR)/es40_idb-RWLock.Po
#	$(AM_V_CXX)source='base/RWLock.cpp' object='base/es40_idb-RWLock.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-RWLock.o `test -f 'base/RWLock.cpp' || echo '$(srcdir)/'`base/RWLock.cpp

base/es40_idb-RWLock.obj: base/RWLock.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-RWLock.obj -MD -MP -MF base/$(DEPDIR)/es40_idb-RWLock.Tpo -c -o base/es40_idb-RWLock.obj `if test -f 'base/RWLock.cpp'; then $(CYGPATH_W) 'base/RWLock.cpp'; else $(CYGPATH_W) '$(srcdir)/base/RWLock.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-RWLock.Tpo base/$(DEPDIR)/es40_idb-RWLock.Po
#	$(AM_V_CXX)source='base/RWLock.cpp' object='base/es40_idb-RWLock.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-RWLock.obj `if test -f 'base/RWLock.cpp'; then $(CYGPATH_W) 'base/RWLock.cpp'; else $(CYGPATH_W) '$(srcdir)/base/RWLock.cpp'; fi`

base/es40_idb-Semaphore.o: base/Semaphore.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-Semaphore.o -MD -MP -MF base/$(DEPDIR)/es40_idb-Semaphore.Tpo -c -o base/es40_idb-Semaphore.o `test -f 'base/Semaphore.cpp' || echo '$(srcdir)/'`base/Semaphore.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-Semaphore.Tpo base/$(DEPDIR)/es40_idb-Semaphore.Po
#	$(AM_V_CXX)source='base/Semaphore.cpp' object='base/es40_idb-Semaphore.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-Semaphore.o `test -f 'base/Semaphore.cpp' || echo '$(srcdir)/'`base/Semaphore.cpp

base/es40_idb-Semaphore.obj: base/Semaphore.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-Semaphore.obj -MD -MP -MF base/$(DEPDIR)/es40_idb-Semaphore.Tpo -c -o base/es40_idb-Semaphore.obj `if test -f 'base/Semaphore.cpp'; then $(CYGPATH_W) 'base/Semaphore.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Semaphore.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-Semaphore.Tpo base/$(DEPDIR)/es40_idb-Semaphore.Po
#	$(AM_V_CXX)source='base/Semaphore.cpp' object='base/es40_idb-Semaphore.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-Semaphore.obj `if test -f 'base/Semaphore.cpp'; then $(CYGPATH_W) 'base/Semaphore.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Semaphore.cpp'; fi`

base/es40_idb-SignalHandler.o: base/SignalHandler.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-SignalHandler.o -MD -MP -MF base/$(DEPDIR)/es40_idb-SignalHandler.Tpo -c -o base/es40_idb-SignalHandler.o `test -f 'base/SignalHandler.cpp' || echo '$(srcdir)/'`base/SignalHandler.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-SignalHandler.Tpo base/$(DEPDIR)/es40_idb-SignalHandler.Po
#	$(AM_V_CXX)source='base/SignalHandler.cpp' object='base/es40_idb-SignalHandler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-SignalHandler.o `test -f 'base/SignalHandler.cpp' || echo '$(srcdir)/'`base/SignalHandler.cpp

base/es40_idb-SignalHandler.obj: base/SignalHandler.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-SignalHandler.obj -MD -MP -MF base/$(DEPDIR)/es40_idb-SignalHandler.Tpo -c -o base/es40_idb-SignalHandler.obj `if test -f 'base/SignalHandler.cpp'; then $(CYGPATH_W) 'base/SignalHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/base/SignalHandler.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-SignalHandler.Tpo base/$(DEPDIR)/es40_idb-SignalHandler.Po
#	$(AM_V_CXX)source='base/SignalHandler.cpp' object='base/es40_idb-SignalHandler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-SignalHandler.obj `if test -f 'base/SignalHandler.cpp'; then $(CYGPATH_W) 'base/SignalHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/base/SignalHandler.cpp'; fi`

base/es40_idb-ThreadLocal.o: base/ThreadLocal.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-ThreadLocal.o -MD -MP -MF base/$(DEPDIR)/es40_idb-ThreadLocal.Tpo -c -o base/es40_idb-ThreadLocal.o `test -f 'base/ThreadLocal.cpp' || echo '$(srcdir)/'`base/ThreadLocal.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-ThreadLocal.Tpo base/$(DEPDIR)/es40_idb-ThreadLocal.Po
#	$(AM_V_CXX)source='base/ThreadLocal.cpp' object='base/es40_idb-ThreadLocal.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-ThreadLocal.o `test -f 'base/ThreadLocal.cpp' || echo '$(srcdir)/'`base/ThreadLocal.cpp

base/es40_idb-ThreadLocal.obj: base/ThreadLocal.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-ThreadLocal.obj -MD -MP -MF base/$(DEPDIR)/es40_idb-ThreadLocal.Tpo -c -o base/es40_idb-ThreadLocal.obj `if test -f 'base/ThreadLocal.cpp'; then $(CYGPATH_W) 'base/ThreadLocal.cpp'; else $(CYGPATH_W) '$(srcdir)/base/ThreadLocal.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-ThreadLocal.Tpo base/$(DEPDIR)/es40_idb-ThreadLocal.Po
#	$(AM_V_CXX)source='base/ThreadLocal.cpp' object='base/es40_idb-ThreadLocal.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-ThreadLocal.obj `if test -f 'base/ThreadLocal.cpp'; then $(CYGPATH_W) 'base/ThreadLocal.cpp'; else $(CYGPATH_W) '$(srcdir)/base/ThreadLocal.cpp'; fi`

base/es40_idb-Thread.o: base/Thread.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-Thread.o -MD -MP -MF base/$(DEPDIR)/es40_idb-Thread.Tpo -c -o base/es40_idb-Thread.o `test -f 'base/Thread.cpp' || echo '$(srcdir)/'`base/Thread.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-Thread.Tpo base/$(DEPDIR)/es40_idb-Thread.Po
#	$(AM_V_CXX)source='base/Thread.cpp' object='base/es40_idb-Thread.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-Thread.o `test -f 'base/Thread.cpp' || echo '$(srcdir)/'`base/Thread.cpp

base/es40_idb-Thread.obj: base/Thread.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-Thread.obj -MD -MP -MF base/$(DEPDIR)/es40_idb-Thread.Tpo -c -o base/es40_idb-Thread.obj `if test -f 'base/Thread.cpp'; then $(CYGPATH_W) 'base/Thread.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Thread.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-Thread.Tpo base/$(DEPDIR)/es40_idb-Thread.Po
#	$(AM_V_CXX)source='base/Thread.cpp' object='base/es40_idb-Thread.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-Thread.obj `if test -f 'base/Thread.cpp'; then $(CYGPATH_W) 'base/Thread.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Thread.cpp'; fi`

base/es40_idb-Timestamp.o: base/Timestamp.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-Timestamp.o -MD -MP -MF base/$(DEPDIR)/es40_idb-Timestamp.Tpo -c -o base/es40_idb-Timestamp.o `test -f 'base/Timestamp.cpp' || echo '$(srcdir)/'`base/Timestamp.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-Timestamp.Tpo base/$(DEPDIR)/es40_idb-Timestamp.Po
#	$(AM_V_CXX)source='base/Timestamp.cpp' object='base/es40_idb-Timestamp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-Timestamp.o `test -f 'base/Timestamp.cpp' || echo '$(srcdir)/'`base/Timestamp.cpp

base/es40_idb-Timestamp.obj: base/Timestamp.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -MT base/es40_idb-Timestamp.obj -MD -MP -MF base/$(DEPDIR)/es40_idb-Timestamp.Tpo -c -o base/es40_idb-Timestamp.obj `if test -f 'base/Timestamp.cpp'; then $(CYGPATH_W) 'base/Timestamp.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Timestamp.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_idb-Timestamp.Tpo base/$(DEPDIR)/es40_idb-Timestamp.Po
#	$(AM_V_CXX)source='base/Timestamp.cpp' object='base/es40_idb-Timestamp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_idb_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_idb-Timestamp.obj `if test -f 'base/Timestamp.cpp'; then $(CYGPATH_W) 'base/Timestamp.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Timestamp.cpp'; fi`

es40_lsm-AliM1543C.o: AliM1543C.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-AliM1543C.o -MD -MP -MF $(DEPDIR)/es40_lsm-AliM1543C.Tpo -c -o es40_lsm-AliM1543C.o `test -f 'AliM1543C.cpp' || echo '$(srcdir)/'`AliM1543C.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-AliM1543C.Tpo $(DEPDIR)/es40_lsm-AliM1543C.Po
#	$(AM_V_CXX)source='AliM1543C.cpp' object='es40_lsm-AliM1543C.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-AliM1543C.o `test -f 'AliM1543C.cpp' || echo '$(srcdir)/'`AliM1543C.cpp

es40_lsm-AliM1543C.obj: AliM1543C.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-AliM1543C.obj -MD -MP -MF $(DEPDIR)/es40_lsm-AliM1543C.Tpo -c -o es40_lsm-AliM1543C.obj `if test -f 'AliM1543C.cpp'; then $(CYGPATH_W) 'AliM1543C.cpp'; else $(CYGPATH_W) '$(srcdir)/AliM1543C.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-AliM1543C.Tpo $(DEPDIR)/es40_lsm-AliM1543C.Po
#	$(AM_V_CXX)source='AliM1543C.cpp' object='es40_lsm-AliM1543C.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-AliM1543C.obj `if test -f 'AliM1543C.cpp'; then $(CYGPATH_W) 'AliM1543C.cpp'; else $(CYGPATH_W) '$(srcdir)/AliM1543C.cpp'; fi`

es40_lsm-AliM1543C_ide.o: AliM1543C_ide.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-AliM1543C_ide.o -MD -MP -MF $(DEPDIR)/es40_lsm-AliM1543C_ide.Tpo -c -o es40_lsm-AliM1543C_ide.o `test -f 'AliM1543C_ide.cpp' || echo '$(srcdir)/'`AliM1543C_ide.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-AliM1543C_ide.Tpo $(DEPDIR)/es40_lsm-AliM1543C_ide.Po
#	$(AM_V_CXX)source='AliM1543C_ide.cpp' object='es40_lsm-AliM1543C_ide.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-AliM1543C_ide.o `test -f 'AliM1543C_ide.cpp' || echo '$(srcdir)/'`AliM1543C_ide.cpp

es40_lsm-AliM1543C_ide.obj: AliM1543C_ide.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-AliM1543C_ide.obj -MD -MP -MF $(DEPDIR)/es40_lsm-AliM1543C_ide.Tpo -c -o es40_lsm-AliM1543C_ide.obj `if test -f 'AliM1543C_ide.cpp'; then $(CYGPATH_W) 'AliM1543C_ide.cpp'; else $(CYGPATH_W) '$(srcdir)/AliM1543C_ide.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-AliM1543C_ide.Tpo $(DEPDIR)/es40_lsm-AliM1543C_ide.Po
#	$(AM_V_CXX)source='AliM1543C_ide.cpp' object='es40_lsm-AliM1543C_ide.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-AliM1543C_ide.obj `if test -f 'AliM1543C_ide.cpp'; then $(CYGPATH_W) 'AliM1543C_ide.cpp'; else $(CYGPATH_W) '$(srcdir)/AliM1543C_ide.cpp'; fi`

es40_lsm-AliM1543C_usb.o: AliM1543C_usb.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-AliM1543C_usb.o -MD -MP -MF $(DEPDIR)/es40_lsm-AliM1543C_usb.Tpo -c -o es40_lsm-AliM1543C_usb.o `test -f 'AliM1543C_usb.cpp' || echo '$(srcdir)/'`AliM1543C_usb.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-AliM1543C_usb.Tpo $(DEPDIR)/es40_lsm-AliM1543C_usb.Po
#	$(AM_V_CXX)source='AliM1543C_usb.cpp' object='es40_lsm-AliM1543C_usb.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-AliM1543C_usb.o `test -f 'AliM1543C_usb.cpp' || echo '$(srcdir)/'`AliM1543C_usb.cpp

es40_lsm-AliM1543C_usb.obj: AliM1543C_usb.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-AliM1543C_usb.obj -MD -MP -MF $(DEPDIR)/es40_lsm-AliM1543C_usb.Tpo -c -o es40_lsm-AliM1543C_usb.obj `if test -f 'AliM1543C_usb.cpp'; then $(CYGPATH_W) 'AliM1543C_usb.cpp'; else $(CYGPATH_W) '$(srcdir)/AliM1543C_usb.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-AliM1543C_usb.Tpo $(DEPDIR)/es40_lsm-AliM1543C_usb.Po
#	$(AM_V_CXX)source='AliM1543C_usb.cpp' object='es40_lsm-AliM1543C_usb.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-AliM1543C_usb.obj `if test -f 'AliM1543C_usb.cpp'; then $(CYGPATH_W) 'AliM1543C_usb.cpp'; else $(CYGPATH_W) '$(srcdir)/AliM1543C_usb.cpp'; fi`

es40_lsm-AlphaCPU.o: AlphaCPU.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-AlphaCPU.o -MD -MP -MF $(DEPDIR)/es40_lsm-AlphaCPU.Tpo -c -o es40_lsm-AlphaCPU.o `test -f 'AlphaCPU.cpp' || echo '$(srcdir)/'`AlphaCPU.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-AlphaCPU.Tpo $(DEPDIR)/es40_lsm-AlphaCPU.Po
#	$(AM_V_CXX)source='AlphaCPU.cpp' object='es40_lsm-AlphaCPU.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-AlphaCPU.o `test -f 'AlphaCPU.cpp' || echo '$(srcdir)/'`AlphaCPU.cpp

es40_lsm-AlphaCPU.obj: AlphaCPU.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-AlphaCPU.obj -MD -MP -MF $(DEPDIR)/es40_lsm-AlphaCPU.Tpo -c -o es40_lsm-AlphaCPU.obj `if test -f 'AlphaCPU.cpp'; then $(CYGPATH_W) 'AlphaCPU.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-AlphaCPU.Tpo $(DEPDIR)/es40_lsm-AlphaCPU.Po
#	$(AM_V_CXX)source='AlphaCPU.cpp' object='es40_lsm-AlphaCPU.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-AlphaCPU.obj `if test -f 'AlphaCPU.cpp'; then $(CYGPATH_W) 'AlphaCPU.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU.cpp'; fi`

es40_lsm-AlphaCPU_ieeefloat.o: AlphaCPU_ieeefloat.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-AlphaCPU_ieeefloat.o -MD -MP -MF $(DEPDIR)/es40_lsm-AlphaCPU_ieeefloat.Tpo -c -o es40_lsm-AlphaCPU_ieeefloat.o `test -f 'AlphaCPU_ieeefloat.cpp' || echo '$(srcdir)/'`AlphaCPU_ieeefloat.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-AlphaCPU_ieeefloat.Tpo $(DEPDIR)/es40_lsm-AlphaCPU_ieeefloat.Po
#	$(AM_V_CXX)source='AlphaCPU_ieeefloat.cpp' object='es40_lsm-AlphaCPU_ieeefloat.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-AlphaCPU_ieeefloat.o `test -f 'AlphaCPU_ieeefloat.cpp' || echo '$(srcdir)/'`AlphaCPU_ieeefloat.cpp

es40_lsm-AlphaCPU_ieeefloat.obj: AlphaCPU_ieeefloat.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-AlphaCPU_ieeefloat.obj -MD -MP -MF $(DEPDIR)/es40_lsm-AlphaCPU_ieeefloat.Tpo -c -o es40_lsm-AlphaCPU_ieeefloat.obj `if test -f 'AlphaCPU_ieeefloat.cpp'; then $(CYGPATH_W) 'AlphaCPU_ieeefloat.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU_ieeefloat.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-AlphaCPU_ieeefloat.Tpo $(DEPDIR)/es40_lsm-AlphaCPU_ieeefloat.Po
#	$(AM_V_CXX)source='AlphaCPU_ieeefloat.cpp' object='es40_lsm-AlphaCPU_ieeefloat.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-AlphaCPU_ieeefloat.obj `if test -f 'AlphaCPU_ieeefloat.cpp'; then $(CYGPATH_W) 'AlphaCPU_ieeefloat.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU_ieeefloat.cpp'; fi`

es40_lsm-AlphaCPU_vaxfloat.o: AlphaCPU_vaxfloat.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-AlphaCPU_vaxfloat.o -MD -MP -MF $(DEPDIR)/es40_lsm-AlphaCPU_vaxfloat.Tpo -c -o es40_lsm-AlphaCPU_vaxfloat.o `test -f 'AlphaCPU_vaxfloat.cpp' || echo '$(srcdir)/'`AlphaCPU_vaxfloat.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-AlphaCPU_vaxfloat.Tpo $(DEPDIR)/es40_lsm-AlphaCPU_vaxfloat.Po
#	$(AM_V_CXX)source='AlphaCPU_vaxfloat.cpp' object='es40_lsm-AlphaCPU_vaxfloat.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-AlphaCPU_vaxfloat.o `test -f 'AlphaCPU_vaxfloat.cpp' || echo '$(srcdir)/'`AlphaCPU_vaxfloat.cpp

es40_lsm-AlphaCPU_vaxfloat.obj: AlphaCPU_vaxfloat.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-AlphaCPU_vaxfloat.obj -MD -MP -MF $(DEPDIR)/es40_lsm-AlphaCPU_vaxfloat.Tpo -c -o es40_lsm-AlphaCPU_vaxfloat.obj `if test -f 'AlphaCPU_vaxfloat.cpp'; then $(CYGPATH_W) 'AlphaCPU_vaxfloat.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU_vaxfloat.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-AlphaCPU_vaxfloat.Tpo $(DEPDIR)/es40_lsm-AlphaCPU_vaxfloat.Po
#	$(AM_V_CXX)source='AlphaCPU_vaxfloat.cpp' object='es40_lsm-AlphaCPU_vaxfloat.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-AlphaCPU_vaxfloat.obj `if test -f 'AlphaCPU_vaxfloat.cpp'; then $(CYGPATH_W) 'AlphaCPU_vaxfloat.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU_vaxfloat.cpp'; fi`

es40_lsm-AlphaCPU_vmspal.o: AlphaCPU_vmspal.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-AlphaCPU_vmspal.o -MD -MP -MF $(DEPDIR)/es40_lsm-AlphaCPU_vmspal.Tpo -c -o es40_lsm-AlphaCPU_vmspal.o `test -f 'AlphaCPU_vmspal.cpp' || echo '$(srcdir)/'`AlphaCPU_vmspal.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-AlphaCPU_vmspal.Tpo $(DEPDIR)/es40_lsm-AlphaCPU_vmspal.Po
#	$(AM_V_CXX)source='AlphaCPU_vmspal.cpp' object='es40_lsm-AlphaCPU_vmspal.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-AlphaCPU_vmspal.o `test -f 'AlphaCPU_vmspal.cpp' || echo '$(srcdir)/'`AlphaCPU_vmspal.cpp

es40_lsm-AlphaCPU_vmspal.obj: AlphaCPU_vmspal.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-AlphaCPU_vmspal.obj -MD -MP -MF $(DEPDIR)/es40_lsm-AlphaCPU_vmspal.Tpo -c -o es40_lsm-AlphaCPU_vmspal.obj `if test -f 'AlphaCPU_vmspal.cpp'; then $(CYGPATH_W) 'AlphaCPU_vmspal.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU_vmspal.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-AlphaCPU_vmspal.Tpo $(DEPDIR)/es40_lsm-AlphaCPU_vmspal.Po
#	$(AM_V_CXX)source='AlphaCPU_vmspal.cpp' object='es40_lsm-AlphaCPU_vmspal.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-AlphaCPU_vmspal.obj `if test -f 'AlphaCPU_vmspal.cpp'; then $(CYGPATH_W) 'AlphaCPU_vmspal.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU_vmspal.cpp'; fi`

es40_lsm-AlphaSim.o: AlphaSim.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-AlphaSim.o -MD -MP -MF $(DEPDIR)/es40_lsm-AlphaSim.Tpo -c -o es40_lsm-AlphaSim.o `test -f 'AlphaSim.cpp' || echo '$(srcdir)/'`AlphaSim.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-AlphaSim.Tpo $(DEPDIR)/es40_lsm-AlphaSim.Po
#	$(AM_V_CXX)source='AlphaSim.cpp' object='es40_lsm-AlphaSim.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-AlphaSim.o `test -f 'AlphaSim.cpp' || echo '$(srcdir)/'`AlphaSim.cpp

es40_lsm-AlphaSim.obj: AlphaSim.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-AlphaSim.obj -MD -MP -MF $(DEPDIR)/es40_lsm-AlphaSim.Tpo -c -o es40_lsm-AlphaSim.obj `if test -f 'AlphaSim.cpp'; then $(CYGPATH_W) 'AlphaSim.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaSim.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-AlphaSim.Tpo $(DEPDIR)/es40_lsm-AlphaSim.Po
#	$(AM_V_CXX)source='AlphaSim.cpp' object='es40_lsm-AlphaSim.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-AlphaSim.obj `if test -f 'AlphaSim.cpp'; then $(CYGPATH_W) 'AlphaSim.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaSim.cpp'; fi`

es40_lsm-Cirrus.o: Cirrus.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Cirrus.o -MD -MP -MF $(DEPDIR)/es40_lsm-Cirrus.Tpo -c -o es40_lsm-Cirrus.o `test -f 'Cirrus.cpp' || echo '$(srcdir)/'`Cirrus.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Cirrus.Tpo $(DEPDIR)/es40_lsm-Cirrus.Po
#	$(AM_V_CXX)source='Cirrus.cpp' object='es40_lsm-Cirrus.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Cirrus.o `test -f 'Cirrus.cpp' || echo '$(srcdir)/'`Cirrus.cpp

es40_lsm-Cirrus.obj: Cirrus.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Cirrus.obj -MD -MP -MF $(DEPDIR)/es40_lsm-Cirrus.Tpo -c -o es40_lsm-Cirrus.obj `if test -f 'Cirrus.cpp'; then $(CYGPATH_W) 'Cirrus.cpp'; else $(CYGPATH_W) '$(srcdir)/Cirrus.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Cirrus.Tpo $(DEPDIR)/es40_lsm-Cirrus.Po
#	$(AM_V_CXX)source='Cirrus.cpp' object='es40_lsm-Cirrus.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Cirrus.obj `if test -f 'Cirrus.cpp'; then $(CYGPATH_W) 'Cirrus.cpp'; else $(CYGPATH_W) '$(srcdir)/Cirrus.cpp'; fi`

es40_lsm-Configurator.o: Configurator.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Configurator.o -MD -MP -MF $(DEPDIR)/es40_lsm-Configurator.Tpo -c -o es40_lsm-Configurator.o `test -f 'Configurator.cpp' || echo '$(srcdir)/'`Configurator.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Configurator.Tpo $(DEPDIR)/es40_lsm-Configurator.Po
#	$(AM_V_CXX)source='Configurator.cpp' object='es40_lsm-Configurator.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Configurator.o `test -f 'Configurator.cpp' || echo '$(srcdir)/'`Configurator.cpp

es40_lsm-Configurator.obj: Configurator.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Configurator.obj -MD -MP -MF $(DEPDIR)/es40_lsm-Configurator.Tpo -c -o es40_lsm-Configurator.obj `if test -f 'Configurator.cpp'; then $(CYGPATH_W) 'Configurator.cpp'; else $(CYGPATH_W) '$(srcdir)/Configurator.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Configurator.Tpo $(DEPDIR)/es40_lsm-Configurator.Po
#	$(AM_V_CXX)source='Configurator.cpp' object='es40_lsm-Configurator.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Configurator.obj `if test -f 'Configurator.cpp'; then $(CYGPATH_W) 'Configurator.cpp'; else $(CYGPATH_W) '$(srcdir)/Configurator.cpp'; fi`

es40_lsm-DEC21143.o: DEC21143.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-DEC21143.o -MD -MP -MF $(DEPDIR)/es40_lsm-DEC21143.Tpo -c -o es40_lsm-DEC21143.o `test -f 'DEC21143.cpp' || echo '$(srcdir)/'`DEC21143.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-DEC21143.Tpo $(DEPDIR)/es40_lsm-DEC21143.Po
#	$(AM_V_CXX)source='DEC21143.cpp' object='es40_lsm-DEC21143.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-DEC21143.o `test -f 'DEC21143.cpp' || echo '$(srcdir)/'`DEC21143.cpp

es40_lsm-DEC21143.obj: DEC21143.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-DEC21143.obj -MD -MP -MF $(DEPDIR)/es40_lsm-DEC21143.Tpo -c -o es40_lsm-DEC21143.obj `if test -f 'DEC21143.cpp'; then $(CYGPATH_W) 'DEC21143.cpp'; else $(CYGPATH_W) '$(srcdir)/DEC21143.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-DEC21143.Tpo $(DEPDIR)/es40_lsm-DEC21143.Po
#	$(AM_V_CXX)source='DEC21143.cpp' object='es40_lsm-DEC21143.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-DEC21143.obj `if test -f 'DEC21143.cpp'; then $(CYGPATH_W) 'DEC21143.cpp'; else $(CYGPATH_W) '$(srcdir)/DEC21143.cpp'; fi`

es40_lsm-Disk.o: Disk.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Disk.o -MD -MP -MF $(DEPDIR)/es40_lsm-Disk.Tpo -c -o es40_lsm-Disk.o `test -f 'Disk.cpp' || echo '$(srcdir)/'`Disk.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Disk.Tpo $(DEPDIR)/es40_lsm-Disk.Po
#	$(AM_V_CXX)source='Disk.cpp' object='es40_lsm-Disk.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Disk.o `test -f 'Disk.cpp' || echo '$(srcdir)/'`Disk.cpp

es40_lsm-Disk.obj: Disk.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Disk.obj -MD -MP -MF $(DEPDIR)/es40_lsm-Disk.Tpo -c -o es40_lsm-Disk.obj `if test -f 'Disk.cpp'; then $(CYGPATH_W) 'Disk.cpp'; else $(CYGPATH_W) '$(srcdir)/Disk.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Disk.Tpo $(DEPDIR)/es40_lsm-Disk.Po
#	$(AM_V_CXX)source='Disk.cpp' object='es40_lsm-Disk.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Disk.obj `if test -f 'Disk.cpp'; then $(CYGPATH_W) 'Disk.cpp'; else $(CYGPATH_W) '$(srcdir)/Disk.cpp'; fi`

es40_lsm-DiskController.o: DiskController.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-DiskController.o -MD -MP -MF $(DEPDIR)/es40_lsm-DiskController.Tpo -c -o es40_lsm-DiskController.o `test -f 'DiskController.cpp' || echo '$(srcdir)/'`DiskController.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-DiskController.Tpo $(DEPDIR)/es40_lsm-DiskController.Po
#	$(AM_V_CXX)source='DiskController.cpp' object='es40_lsm-DiskController.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-DiskController.o `test -f 'DiskController.cpp' || echo '$(srcdir)/'`DiskController.cpp

es40_lsm-DiskController.obj: DiskController.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-DiskController.obj -MD -MP -MF $(DEPDIR)/es40_lsm-DiskController.Tpo -c -o es40_lsm-DiskController.obj `if test -f 'DiskController.cpp'; then $(CYGPATH_W) 'DiskController.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskController.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-DiskController.Tpo $(DEPDIR)/es40_lsm-DiskController.Po
#	$(AM_V_CXX)source='DiskController.cpp' object='es40_lsm-DiskController.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-DiskController.obj `if test -f 'DiskController.cpp'; then $(CYGPATH_W) 'DiskController.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskController.cpp'; fi`

es40_lsm-DiskDevice.o: DiskDevice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-DiskDevice.o -MD -MP -MF $(DEPDIR)/es40_lsm-DiskDevice.Tpo -c -o es40_lsm-DiskDevice.o `test -f 'DiskDevice.cpp' || echo '$(srcdir)/'`DiskDevice.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-DiskDevice.Tpo $(DEPDIR)/es40_lsm-DiskDevice.Po
#	$(AM_V_CXX)source='DiskDevice.cpp' object='es40_lsm-DiskDevice.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-DiskDevice.o `test -f 'DiskDevice.cpp' || echo '$(srcdir)/'`DiskDevice.cpp

es40_lsm-DiskDevice.obj: DiskDevice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-DiskDevice.obj -MD -MP -MF $(DEPDIR)/es40_lsm-DiskDevice.Tpo -c -o es40_lsm-DiskDevice.obj `if test -f 'DiskDevice.cpp'; then $(CYGPATH_W) 'DiskDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskDevice.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-DiskDevice.Tpo $(DEPDIR)/es40_lsm-DiskDevice.Po
#	$(AM_V_CXX)source='DiskDevice.cpp' object='es40_lsm-DiskDevice.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-DiskDevice.obj `if test -f 'DiskDevice.cpp'; then $(CYGPATH_W) 'DiskDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskDevice.cpp'; fi`

es40_lsm-DiskFile.o: DiskFile.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-DiskFile.o -MD -MP -MF $(DEPDIR)/es40_lsm-DiskFile.Tpo -c -o es40_lsm-DiskFile.o `test -f 'DiskFile.cpp' || echo '$(srcdir)/'`DiskFile.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-DiskFile.Tpo $(DEPDIR)/es40_lsm-DiskFile.Po
#	$(AM_V_CXX)source='DiskFile.cpp' object='es40_lsm-DiskFile.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-DiskFile.o `test -f 'DiskFile.cpp' || echo '$(srcdir)/'`DiskFile.cpp

es40_lsm-DiskFile.obj: DiskFile.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-DiskFile.obj -MD -MP -MF $(DEPDIR)/es40_lsm-DiskFile.Tpo -c -o es40_lsm-DiskFile.obj `if test -f 'DiskFile.cpp'; then $(CYGPATH_W) 'DiskFile.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskFile.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-DiskFile.Tpo $(DEPDIR)/es40_lsm-DiskFile.Po
#	$(AM_V_CXX)source='DiskFile.cpp' object='es40_lsm-DiskFile.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-DiskFile.obj `if test -f 'DiskFile.cpp'; then $(CYGPATH_W) 'DiskFile.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskFile.cpp'; fi`

es40_lsm-DiskRam.o: DiskRam.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-DiskRam.o -MD -MP -MF $(DEPDIR)/es40_lsm-DiskRam.Tpo -c -o es40_lsm-DiskRam.o `test -f 'DiskRam.cpp' || echo '$(srcdir)/'`DiskRam.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-DiskRam.Tpo $(DEPDIR)/es40_lsm-DiskRam.Po
#	$(AM_V_CXX)source='DiskRam.cpp' object='es40_lsm-DiskRam.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-DiskRam.o `test -f 'DiskRam.cpp' || echo '$(srcdir)/'`DiskRam.cpp

es40_lsm-DiskRam.obj: DiskRam.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-DiskRam.obj -MD -MP -MF $(DEPDIR)/es40_lsm-DiskRam.Tpo -c -o es40_lsm-DiskRam.obj `if test -f 'DiskRam.cpp'; then $(CYGPATH_W) 'DiskRam.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskRam.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-DiskRam.Tpo $(DEPDIR)/es40_lsm-DiskRam.Po
#	$(AM_V_CXX)source='DiskRam.cpp' object='es40_lsm-DiskRam.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-DiskRam.obj `if test -f 'DiskRam.cpp'; then $(CYGPATH_W) 'DiskRam.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskRam.cpp'; fi`

es40_lsm-DMA.o: DMA.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-DMA.o -MD -MP -MF $(DEPDIR)/es40_lsm-DMA.Tpo -c -o es40_lsm-DMA.o `test -f 'DMA.cpp' || echo '$(srcdir)/'`DMA.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-DMA.Tpo $(DEPDIR)/es40_lsm-DMA.Po
#	$(AM_V_CXX)source='DMA.cpp' object='es40_lsm-DMA.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-DMA.o `test -f 'DMA.cpp' || echo '$(srcdir)/'`DMA.cpp

es40_lsm-DMA.obj: DMA.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-DMA.obj -MD -MP -MF $(DEPDIR)/es40_lsm-DMA.Tpo -c -o es40_lsm-DMA.obj `if test -f 'DMA.cpp'; then $(CYGPATH_W) 'DMA.cpp'; else $(CYGPATH_W) '$(srcdir)/DMA.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-DMA.Tpo $(DEPDIR)/es40_lsm-DMA.Po
#	$(AM_V_CXX)source='DMA.cpp' object='es40_lsm-DMA.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-DMA.obj `if test -f 'DMA.cpp'; then $(CYGPATH_W) 'DMA.cpp'; else $(CYGPATH_W) '$(srcdir)/DMA.cpp'; fi`

es40_lsm-DPR.o: DPR.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-DPR.o -MD -MP -MF $(DEPDIR)/es40_lsm-DPR.Tpo -c -o es40_lsm-DPR.o `test -f 'DPR.cpp' || echo '$(srcdir)/'`DPR.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-DPR.Tpo $(DEPDIR)/es40_lsm-DPR.Po
#	$(AM_V_CXX)source='DPR.cpp' object='es40_lsm-DPR.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-DPR.o `test -f 'DPR.cpp' || echo '$(srcdir)/'`DPR.cpp

es40_lsm-DPR.obj: DPR.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-DPR.obj -MD -MP -MF $(DEPDIR)/es40_lsm-DPR.Tpo -c -o es40_lsm-DPR.obj `if test -f 'DPR.cpp'; then $(CYGPATH_W) 'DPR.cpp'; else $(CYGPATH_W) '$(srcdir)/DPR.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-DPR.Tpo $(DEPDIR)/es40_lsm-DPR.Po
#	$(AM_V_CXX)source='DPR.cpp' object='es40_lsm-DPR.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-DPR.obj `if test -f 'DPR.cpp'; then $(CYGPATH_W) 'DPR.cpp'; else $(CYGPATH_W) '$(srcdir)/DPR.cpp'; fi`

es40_lsm-es40_debug.o: es40_debug.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-es40_debug.o -MD -MP -MF $(DEPDIR)/es40_lsm-es40_debug.Tpo -c -o es40_lsm-es40_debug.o `test -f 'es40_debug.cpp' || echo '$(srcdir)/'`es40_debug.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-es40_debug.Tpo $(DEPDIR)/es40_lsm-es40_debug.Po
#	$(AM_V_CXX)source='es40_debug.cpp' object='es40_lsm-es40_debug.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-es40_debug.o `test -f 'es40_debug.cpp' || echo '$(srcdir)/'`es40_debug.cpp

es40_lsm-es40_debug.obj: es40_debug.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-es40_debug.obj -MD -MP -MF $(DEPDIR)/es40_lsm-es40_debug.Tpo -c -o es40_lsm-es40_debug.obj `if test -f 'es40_debug.cpp'; then $(CYGPATH_W) 'es40_debug.cpp'; else $(CYGPATH_W) '$(srcdir)/es40_debug.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-es40_debug.Tpo $(DEPDIR)/es40_lsm-es40_debug.Po
#	$(AM_V_CXX)source='es40_debug.cpp' object='es40_lsm-es40_debug.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-es40_debug.obj `if test -f 'es40_debug.cpp'; then $(CYGPATH_W) 'es40_debug.cpp'; else $(CYGPATH_W) '$(srcdir)/es40_debug.cpp'; fi`

es40_lsm-Ethernet.o: Ethernet.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Ethernet.o -MD -MP -MF $(DEPDIR)/es40_lsm-Ethernet.Tpo -c -o es40_lsm-Ethernet.o `test -f 'Ethernet.cpp' || echo '$(srcdir)/'`Ethernet.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Ethernet.Tpo $(DEPDIR)/es40_lsm-Ethernet.Po
#	$(AM_V_CXX)source='Ethernet.cpp' object='es40_lsm-Ethernet.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Ethernet.o `test -f 'Ethernet.cpp' || echo '$(srcdir)/'`Ethernet.cpp

es40_lsm-Ethernet.obj: Ethernet.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Ethernet.obj -MD -MP -MF $(DEPDIR)/es40_lsm-Ethernet.Tpo -c -o es40_lsm-Ethernet.obj `if test -f 'Ethernet.cpp'; then $(CYGPATH_W) 'Ethernet.cpp'; else $(CYGPATH_W) '$(srcdir)/Ethernet.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Ethernet.Tpo $(DEPDIR)/es40_lsm-Ethernet.Po
#	$(AM_V_CXX)source='Ethernet.cpp' object='es40_lsm-Ethernet.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Ethernet.obj `if test -f 'Ethernet.cpp'; then $(CYGPATH_W) 'Ethernet.cpp'; else $(CYGPATH_W) '$(srcdir)/Ethernet.cpp'; fi`

es40_lsm-Flash.o: Flash.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Flash.o -MD -MP -MF $(DEPDIR)/es40_lsm-Flash.Tpo -c -o es40_lsm-Flash.o `test -f 'Flash.cpp' || echo '$(srcdir)/'`Flash.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Flash.Tpo $(DEPDIR)/es40_lsm-Flash.Po
#	$(AM_V_CXX)source='Flash.cpp' object='es40_lsm-Flash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Flash.o `test -f 'Flash.cpp' || echo '$(srcdir)/'`Flash.cpp

es40_lsm-Flash.obj: Flash.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Flash.obj -MD -MP -MF $(DEPDIR)/es40_lsm-Flash.Tpo -c -o es40_lsm-Flash.obj `if test -f 'Flash.cpp'; then $(CYGPATH_W) 'Flash.cpp'; else $(CYGPATH_W) '$(srcdir)/Flash.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Flash.Tpo $(DEPDIR)/es40_lsm-Flash.Po
#	$(AM_V_CXX)source='Flash.cpp' object='es40_lsm-Flash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Flash.obj `if test -f 'Flash.cpp'; then $(CYGPATH_W) 'Flash.cpp'; else $(CYGPATH_W) '$(srcdir)/Flash.cpp'; fi`

es40_lsm-FloppyController.o: FloppyController.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-FloppyController.o -MD -MP -MF $(DEPDIR)/es40_lsm-FloppyController.Tpo -c -o es40_lsm-FloppyController.o `test -f 'FloppyController.cpp' || echo '$(srcdir)/'`FloppyController.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-FloppyController.Tpo $(DEPDIR)/es40_lsm-FloppyController.Po
#	$(AM_V_CXX)source='FloppyController.cpp' object='es40_lsm-FloppyController.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-FloppyController.o `test -f 'FloppyController.cpp' || echo '$(srcdir)/'`FloppyController.cpp

es40_lsm-FloppyController.obj: FloppyController.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-FloppyController.obj -MD -MP -MF $(DEPDIR)/es40_lsm-FloppyController.Tpo -c -o es40_lsm-FloppyController.obj `if test -f 'FloppyController.cpp'; then $(CYGPATH_W) 'FloppyController.cpp'; else $(CYGPATH_W) '$(srcdir)/FloppyController.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-FloppyController.Tpo $(DEPDIR)/es40_lsm-FloppyController.Po
#	$(AM_V_CXX)source='FloppyController.cpp' object='es40_lsm-FloppyController.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-FloppyController.obj `if test -f 'FloppyController.cpp'; then $(CYGPATH_W) 'FloppyController.cpp'; else $(CYGPATH_W) '$(srcdir)/FloppyController.cpp'; fi`

es40_lsm-Keyboard.o: Keyboard.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Keyboard.o -MD -MP -MF $(DEPDIR)/es40_lsm-Keyboard.Tpo -c -o es40_lsm-Keyboard.o `test -f 'Keyboard.cpp' || echo '$(srcdir)/'`Keyboard.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Keyboard.Tpo $(DEPDIR)/es40_lsm-Keyboard.Po
#	$(AM_V_CXX)source='Keyboard.cpp' object='es40_lsm-Keyboard.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Keyboard.o `test -f 'Keyboard.cpp' || echo '$(srcdir)/'`Keyboard.cpp

es40_lsm-Keyboard.obj: Keyboard.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Keyboard.obj -MD -MP -MF $(DEPDIR)/es40_lsm-Keyboard.Tpo -c -o es40_lsm-Keyboard.obj `if test -f 'Keyboard.cpp'; then $(CYGPATH_W) 'Keyboard.cpp'; else $(CYGPATH_W) '$(srcdir)/Keyboard.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Keyboard.Tpo $(DEPDIR)/es40_lsm-Keyboard.Po
#	$(AM_V_CXX)source='Keyboard.cpp' object='es40_lsm-Keyboard.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Keyboard.obj `if test -f 'Keyboard.cpp'; then $(CYGPATH_W) 'Keyboard.cpp'; else $(CYGPATH_W) '$(srcdir)/Keyboard.cpp'; fi`

es40_lsm-lockstep.o: lockstep.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-lockstep.o -MD -MP -MF $(DEPDIR)/es40_lsm-lockstep.Tpo -c -o es40_lsm-lockstep.o `test -f 'lockstep.cpp' || echo '$(srcdir)/'`lockstep.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-lockstep.Tpo $(DEPDIR)/es40_lsm-lockstep.Po
#	$(AM_V_CXX)source='lockstep.cpp' object='es40_lsm-lockstep.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-lockstep.o `test -f 'lockstep.cpp' || echo '$(srcdir)/'`lockstep.cpp

es40_lsm-lockstep.obj: lockstep.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-lockstep.obj -MD -MP -MF $(DEPDIR)/es40_lsm-lockstep.Tpo -c -o es40_lsm-lockstep.obj `if test -f 'lockstep.cpp'; then $(CYGPATH_W) 'lockstep.cpp'; else $(CYGPATH_W) '$(srcdir)/lockstep.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-lockstep.Tpo $(DEPDIR)/es40_lsm-lockstep.Po
#	$(AM_V_CXX)source='lockstep.cpp' object='es40_lsm-lockstep.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-lockstep.obj `if test -f 'lockstep.cpp'; then $(CYGPATH_W) 'lockstep.cpp'; else $(CYGPATH_W) '$(srcdir)/lockstep.cpp'; fi`

es40_lsm-PCIDevice.o: PCIDevice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-PCIDevice.o -MD -MP -MF $(DEPDIR)/es40_lsm-PCIDevice.Tpo -c -o es40_lsm-PCIDevice.o `test -f 'PCIDevice.cpp' || echo '$(srcdir)/'`PCIDevice.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-PCIDevice.Tpo $(DEPDIR)/es40_lsm-PCIDevice.Po
#	$(AM_V_CXX)source='PCIDevice.cpp' object='es40_lsm-PCIDevice.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-PCIDevice.o `test -f 'PCIDevice.cpp' || echo '$(srcdir)/'`PCIDevice.cpp

es40_lsm-PCIDevice.obj: PCIDevice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-PCIDevice.obj -MD -MP -MF $(DEPDIR)/es40_lsm-PCIDevice.Tpo -c -o es40_lsm-PCIDevice.obj `if test -f 'PCIDevice.cpp'; then $(CYGPATH_W) 'PCIDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/PCIDevice.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-PCIDevice.Tpo $(DEPDIR)/es40_lsm-PCIDevice.Po
#	$(AM_V_CXX)source='PCIDevice.cpp' object='es40_lsm-PCIDevice.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-PCIDevice.obj `if test -f 'PCIDevice.cpp'; then $(CYGPATH_W) 'PCIDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/PCIDevice.cpp'; fi`

es40_lsm-Port80.o: Port80.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Port80.o -MD -MP -MF $(DEPDIR)/es40_lsm-Port80.Tpo -c -o es40_lsm-Port80.o `test -f 'Port80.cpp' || echo '$(srcdir)/'`Port80.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Port80.Tpo $(DEPDIR)/es40_lsm-Port80.Po
#	$(AM_V_CXX)source='Port80.cpp' object='es40_lsm-Port80.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Port80.o `test -f 'Port80.cpp' || echo '$(srcdir)/'`Port80.cpp

es40_lsm-Port80.obj: Port80.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Port80.obj -MD -MP -MF $(DEPDIR)/es40_lsm-Port80.Tpo -c -o es40_lsm-Port80.obj `if test -f 'Port80.cpp'; then $(CYGPATH_W) 'Port80.cpp'; else $(CYGPATH_W) '$(srcdir)/Port80.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Port80.Tpo $(DEPDIR)/es40_lsm-Port80.Po
#	$(AM_V_CXX)source='Port80.cpp' object='es40_lsm-Port80.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Port80.obj `if test -f 'Port80.cpp'; then $(CYGPATH_W) 'Port80.cpp'; else $(CYGPATH_W) '$(srcdir)/Port80.cpp'; fi`

es40_lsm-S3Trio64.o: S3Trio64.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-S3Trio64.o -MD -MP -MF $(DEPDIR)/es40_lsm-S3Trio64.Tpo -c -o es40_lsm-S3Trio64.o `test -f 'S3Trio64.cpp' || echo '$(srcdir)/'`S3Trio64.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-S3Trio64.Tpo $(DEPDIR)/es40_lsm-S3Trio64.Po
#	$(AM_V_CXX)source='S3Trio64.cpp' object='es40_lsm-S3Trio64.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-S3Trio64.o `test -f 'S3Trio64.cpp' || echo '$(srcdir)/'`S3Trio64.cpp

es40_lsm-S3Trio64.obj: S3Trio64.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-S3Trio64.obj -MD -MP -MF $(DEPDIR)/es40_lsm-S3Trio64.Tpo -c -o es40_lsm-S3Trio64.obj `if test -f 'S3Trio64.cpp'; then $(CYGPATH_W) 'S3Trio64.cpp'; else $(CYGPATH_W) '$(srcdir)/S3Trio64.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-S3Trio64.Tpo $(DEPDIR)/es40_lsm-S3Trio64.Po
#	$(AM_V_CXX)source='S3Trio64.cpp' object='es40_lsm-S3Trio64.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-S3Trio64.obj `if test -f 'S3Trio64.cpp'; then $(CYGPATH_W) 'S3Trio64.cpp'; else $(CYGPATH_W) '$(srcdir)/S3Trio64.cpp'; fi`

es40_lsm-SCSIBus.o: SCSIBus.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-SCSIBus.o -MD -MP -MF $(DEPDIR)/es40_lsm-SCSIBus.Tpo -c -o es40_lsm-SCSIBus.o `test -f 'SCSIBus.cpp' || echo '$(srcdir)/'`SCSIBus.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-SCSIBus.Tpo $(DEPDIR)/es40_lsm-SCSIBus.Po
#	$(AM_V_CXX)source='SCSIBus.cpp' object='es40_lsm-SCSIBus.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-SCSIBus.o `test -f 'SCSIBus.cpp' || echo '$(srcdir)/'`SCSIBus.cpp

es40_lsm-SCSIBus.obj: SCSIBus.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-SCSIBus.obj -MD -MP -MF $(DEPDIR)/es40_lsm-SCSIBus.Tpo -c -o es40_lsm-SCSIBus.obj `if test -f 'SCSIBus.cpp'; then $(CYGPATH_W) 'SCSIBus.cpp'; else $(CYGPATH_W) '$(srcdir)/SCSIBus.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-SCSIBus.Tpo $(DEPDIR)/es40_lsm-SCSIBus.Po
#	$(AM_V_CXX)source='SCSIBus.cpp' object='es40_lsm-SCSIBus.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-SCSIBus.obj `if test -f 'SCSIBus.cpp'; then $(CYGPATH_W) 'SCSIBus.cpp'; else $(CYGPATH_W) '$(srcdir)/SCSIBus.cpp'; fi`

es40_lsm-SCSIDevice.o: SCSIDevice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-SCSIDevice.o -MD -MP -MF $(DEPDIR)/es40_lsm-SCSIDevice.Tpo -c -o es40_lsm-SCSIDevice.o `test -f 'SCSIDevice.cpp' || echo '$(srcdir)/'`SCSIDevice.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-SCSIDevice.Tpo $(DEPDIR)/es40_lsm-SCSIDevice.Po
#	$(AM_V_CXX)source='SCSIDevice.cpp' object='es40_lsm-SCSIDevice.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-SCSIDevice.o `test -f 'SCSIDevice.cpp' || echo '$(srcdir)/'`SCSIDevice.cpp

es40_lsm-SCSIDevice.obj: SCSIDevice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-SCSIDevice.obj -MD -MP -MF $(DEPDIR)/es40_lsm-SCSIDevice.Tpo -c -o es40_lsm-SCSIDevice.obj `if test -f 'SCSIDevice.cpp'; then $(CYGPATH_W) 'SCSIDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/SCSIDevice.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-SCSIDevice.Tpo $(DEPDIR)/es40_lsm-SCSIDevice.Po
#	$(AM_V_CXX)source='SCSIDevice.cpp' object='es40_lsm-SCSIDevice.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-SCSIDevice.obj `if test -f 'SCSIDevice.cpp'; then $(CYGPATH_W) 'SCSIDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/SCSIDevice.cpp'; fi`

es40_lsm-Serial.o: Serial.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Serial.o -MD -MP -MF $(DEPDIR)/es40_lsm-Serial.Tpo -c -o es40_lsm-Serial.o `test -f 'Serial.cpp' || echo '$(srcdir)/'`Serial.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Serial.Tpo $(DEPDIR)/es40_lsm-Serial.Po
#	$(AM_V_CXX)source='Serial.cpp' object='es40_lsm-Serial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Serial.o `test -f 'Serial.cpp' || echo '$(srcdir)/'`Serial.cpp

es40_lsm-Serial.obj: Serial.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Serial.obj -MD -MP -MF $(DEPDIR)/es40_lsm-Serial.Tpo -c -o es40_lsm-Serial.obj `if test -f 'Serial.cpp'; then $(CYGPATH_W) 'Serial.cpp'; else $(CYGPATH_W) '$(srcdir)/Serial.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Serial.Tpo $(DEPDIR)/es40_lsm-Serial.Po
#	$(AM_V_CXX)source='Serial.cpp' object='es40_lsm-Serial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Serial.obj `if test -f 'Serial.cpp'; then $(CYGPATH_W) 'Serial.cpp'; else $(CYGPATH_W) '$(srcdir)/Serial.cpp'; fi`

es40_lsm-StdAfx.o: StdAfx.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-StdAfx.o -MD -MP -MF $(DEPDIR)/es40_lsm-StdAfx.Tpo -c -o es40_lsm-StdAfx.o `test -f 'StdAfx.cpp' || echo '$(srcdir)/'`StdAfx.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-StdAfx.Tpo $(DEPDIR)/es40_lsm-StdAfx.Po
#	$(AM_V_CXX)source='StdAfx.cpp' object='es40_lsm-StdAfx.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-StdAfx.o `test -f 'StdAfx.cpp' || echo '$(srcdir)/'`StdAfx.cpp

es40_lsm-StdAfx.obj: StdAfx.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-StdAfx.obj -MD -MP -MF $(DEPDIR)/es40_lsm-StdAfx.Tpo -c -o es40_lsm-StdAfx.obj `if test -f 'StdAfx.cpp'; then $(CYGPATH_W) 'StdAfx.cpp'; else $(CYGPATH_W) '$(srcdir)/StdAfx.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-StdAfx.Tpo $(DEPDIR)/es40_lsm-StdAfx.Po
#	$(AM_V_CXX)source='StdAfx.cpp' object='es40_lsm-StdAfx.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-StdAfx.obj `if test -f 'StdAfx.cpp'; then $(CYGPATH_W) 'StdAfx.cpp'; else $(CYGPATH_W) '$(srcdir)/StdAfx.cpp'; fi`

es40_lsm-Sym53C810.o: Sym53C810.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Sym53C810.o -MD -MP -MF $(DEPDIR)/es40_lsm-Sym53C810.Tpo -c -o es40_lsm-Sym53C810.o `test -f 'Sym53C810.cpp' || echo '$(srcdir)/'`Sym53C810.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Sym53C810.Tpo $(DEPDIR)/es40_lsm-Sym53C810.Po
#	$(AM_V_CXX)source='Sym53C810.cpp' object='es40_lsm-Sym53C810.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Sym53C810.o `test -f 'Sym53C810.cpp' || echo '$(srcdir)/'`Sym53C810.cpp

es40_lsm-Sym53C810.obj: Sym53C810.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Sym53C810.obj -MD -MP -MF $(DEPDIR)/es40_lsm-Sym53C810.Tpo -c -o es40_lsm-Sym53C810.obj `if test -f 'Sym53C810.cpp'; then $(CYGPATH_W) 'Sym53C810.cpp'; else $(CYGPATH_W) '$(srcdir)/Sym53C810.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Sym53C810.Tpo $(DEPDIR)/es40_lsm-Sym53C810.Po
#	$(AM_V_CXX)source='Sym53C810.cpp' object='es40_lsm-Sym53C810.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Sym53C810.obj `if test -f 'Sym53C810.cpp'; then $(CYGPATH_W) 'Sym53C810.cpp'; else $(CYGPATH_W) '$(srcdir)/Sym53C810.cpp'; fi`

es40_lsm-Sym53C895.o: Sym53C895.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Sym53C895.o -MD -MP -MF $(DEPDIR)/es40_lsm-Sym53C895.Tpo -c -o es40_lsm-Sym53C895.o `test -f 'Sym53C895.cpp' || echo '$(srcdir)/'`Sym53C895.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Sym53C895.Tpo $(DEPDIR)/es40_lsm-Sym53C895.Po
#	$(AM_V_CXX)source='Sym53C895.cpp' object='es40_lsm-Sym53C895.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Sym53C895.o `test -f 'Sym53C895.cpp' || echo '$(srcdir)/'`Sym53C895.cpp

es40_lsm-Sym53C895.obj: Sym53C895.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-Sym53C895.obj -MD -MP -MF $(DEPDIR)/es40_lsm-Sym53C895.Tpo -c -o es40_lsm-Sym53C895.obj `if test -f 'Sym53C895.cpp'; then $(CYGPATH_W) 'Sym53C895.cpp'; else $(CYGPATH_W) '$(srcdir)/Sym53C895.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-Sym53C895.Tpo $(DEPDIR)/es40_lsm-Sym53C895.Po
#	$(AM_V_CXX)source='Sym53C895.cpp' object='es40_lsm-Sym53C895.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-Sym53C895.obj `if test -f 'Sym53C895.cpp'; then $(CYGPATH_W) 'Sym53C895.cpp'; else $(CYGPATH_W) '$(srcdir)/Sym53C895.cpp'; fi`

es40_lsm-SystemComponent.o: SystemComponent.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-SystemComponent.o -MD -MP -MF $(DEPDIR)/es40_lsm-SystemComponent.Tpo -c -o es40_lsm-SystemComponent.o `test -f 'SystemComponent.cpp' || echo '$(srcdir)/'`SystemComponent.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-SystemComponent.Tpo $(DEPDIR)/es40_lsm-SystemComponent.Po
#	$(AM_V_CXX)source='SystemComponent.cpp' object='es40_lsm-SystemComponent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-SystemComponent.o `test -f 'SystemComponent.cpp' || echo '$(srcdir)/'`SystemComponent.cpp

es40_lsm-SystemComponent.obj: SystemComponent.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-SystemComponent.obj -MD -MP -MF $(DEPDIR)/es40_lsm-SystemComponent.Tpo -c -o es40_lsm-SystemComponent.obj `if test -f 'SystemComponent.cpp'; then $(CYGPATH_W) 'SystemComponent.cpp'; else $(CYGPATH_W) '$(srcdir)/SystemComponent.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-SystemComponent.Tpo $(DEPDIR)/es40_lsm-SystemComponent.Po
#	$(AM_V_CXX)source='SystemComponent.cpp' object='es40_lsm-SystemComponent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-SystemComponent.obj `if test -f 'SystemComponent.cpp'; then $(CYGPATH_W) 'SystemComponent.cpp'; else $(CYGPATH_W) '$(srcdir)/SystemComponent.cpp'; fi`

es40_lsm-System.o: System.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-System.o -MD -MP -MF $(DEPDIR)/es40_lsm-System.Tpo -c -o es40_lsm-System.o `test -f 'System.cpp' || echo '$(srcdir)/'`System.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-System.Tpo $(DEPDIR)/es40_lsm-System.Po
#	$(AM_V_CXX)source='System.cpp' object='es40_lsm-System.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-System.o `test -f 'System.cpp' || echo '$(srcdir)/'`System.cpp

es40_lsm-System.obj: System.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-System.obj -MD -MP -MF $(DEPDIR)/es40_lsm-System.Tpo -c -o es40_lsm-System.obj `if test -f 'System.cpp'; then $(CYGPATH_W) 'System.cpp'; else $(CYGPATH_W) '$(srcdir)/System.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-System.Tpo $(DEPDIR)/es40_lsm-System.Po
#	$(AM_V_CXX)source='System.cpp' object='es40_lsm-System.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-System.obj `if test -f 'System.cpp'; then $(CYGPATH_W) 'System.cpp'; else $(CYGPATH_W) '$(srcdir)/System.cpp'; fi`

es40_lsm-TraceEngine.o: TraceEngine.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-TraceEngine.o -MD -MP -MF $(DEPDIR)/es40_lsm-TraceEngine.Tpo -c -o es40_lsm-TraceEngine.o `test -f 'TraceEngine.cpp' || echo '$(srcdir)/'`TraceEngine.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-TraceEngine.Tpo $(DEPDIR)/es40_lsm-TraceEngine.Po
#	$(AM_V_CXX)source='TraceEngine.cpp' object='es40_lsm-TraceEngine.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-TraceEngine.o `test -f 'TraceEngine.cpp' || echo '$(srcdir)/'`TraceEngine.cpp

es40_lsm-TraceEngine.obj: TraceEngine.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-TraceEngine.obj -MD -MP -MF $(DEPDIR)/es40_lsm-TraceEngine.Tpo -c -o es40_lsm-TraceEngine.obj `if test -f 'TraceEngine.cpp'; then $(CYGPATH_W) 'TraceEngine.cpp'; else $(CYGPATH_W) '$(srcdir)/TraceEngine.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-TraceEngine.Tpo $(DEPDIR)/es40_lsm-TraceEngine.Po
#	$(AM_V_CXX)source='TraceEngine.cpp' object='es40_lsm-TraceEngine.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-TraceEngine.obj `if test -f 'TraceEngine.cpp'; then $(CYGPATH_W) 'TraceEngine.cpp'; else $(CYGPATH_W) '$(srcdir)/TraceEngine.cpp'; fi`

es40_lsm-VGA.o: VGA.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-VGA.o -MD -MP -MF $(DEPDIR)/es40_lsm-VGA.Tpo -c -o es40_lsm-VGA.o `test -f 'VGA.cpp' || echo '$(srcdir)/'`VGA.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-VGA.Tpo $(DEPDIR)/es40_lsm-VGA.Po
#	$(AM_V_CXX)source='VGA.cpp' object='es40_lsm-VGA.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-VGA.o `test -f 'VGA.cpp' || echo '$(srcdir)/'`VGA.cpp

es40_lsm-VGA.obj: VGA.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT es40_lsm-VGA.obj -MD -MP -MF $(DEPDIR)/es40_lsm-VGA.Tpo -c -o es40_lsm-VGA.obj `if test -f 'VGA.cpp'; then $(CYGPATH_W) 'VGA.cpp'; else $(CYGPATH_W) '$(srcdir)/VGA.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lsm-VGA.Tpo $(DEPDIR)/es40_lsm-VGA.Po
#	$(AM_V_CXX)source='VGA.cpp' object='es40_lsm-VGA.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o es40_lsm-VGA.obj `if test -f 'VGA.cpp'; then $(CYGPATH_W) 'VGA.cpp'; else $(CYGPATH_W) '$(srcdir)/VGA.cpp'; fi`

gui/es40_lsm-gui.o: gui/gui.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lsm-gui.o -MD -MP -MF gui/$(DEPDIR)/es40_lsm-gui.Tpo -c -o gui/es40_lsm-gui.o `test -f 'gui/gui.cpp' || echo '$(srcdir)/'`gui/gui.cpp
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lsm-gui.Tpo gui/$(DEPDIR)/es40_lsm-gui.Po
#	$(AM_V_CXX)source='gui/gui.cpp' object='gui/es40_lsm-gui.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lsm-gui.o `test -f 'gui/gui.cpp' || echo '$(srcdir)/'`gui/gui.cpp

gui/es40_lsm-gui.obj: gui/gui.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lsm-gui.obj -MD -MP -MF gui/$(DEPDIR)/es40_lsm-gui.Tpo -c -o gui/es40_lsm-gui.obj `if test -f 'gui/gui.cpp'; then $(CYGPATH_W) 'gui/gui.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/gui.cpp'; fi`
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lsm-gui.Tpo gui/$(DEPDIR)/es40_lsm-gui.Po
#	$(AM_V_CXX)source='gui/gui.cpp' object='gui/es40_lsm-gui.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lsm-gui.obj `if test -f 'gui/gui.cpp'; then $(CYGPATH_W) 'gui/gui.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/gui.cpp'; fi`

gui/es40_lsm-gui_x11.o: gui/gui_x11.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lsm-gui_x11.o -MD -MP -MF gui/$(DEPDIR)/es40_lsm-gui_x11.Tpo -c -o gui/es40_lsm-gui_x11.o `test -f 'gui/gui_x11.cpp' || echo '$(srcdir)/'`gui/gui_x11.cpp
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lsm-gui_x11.Tpo gui/$(DEPDIR)/es40_lsm-gui_x11.Po
#	$(AM_V_CXX)source='gui/gui_x11.cpp' object='gui/es40_lsm-gui_x11.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lsm-gui_x11.o `test -f 'gui/gui_x11.cpp' || echo '$(srcdir)/'`gui/gui_x11.cpp

gui/es40_lsm-gui_x11.obj: gui/gui_x11.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lsm-gui_x11.obj -MD -MP -MF gui/$(DEPDIR)/es40_lsm-gui_x11.Tpo -c -o gui/es40_lsm-gui_x11.obj `if test -f 'gui/gui_x11.cpp'; then $(CYGPATH_W) 'gui/gui_x11.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/gui_x11.cpp'; fi`
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lsm-gui_x11.Tpo gui/$(DEPDIR)/es40_lsm-gui_x11.Po
#	$(AM_V_CXX)source='gui/gui_x11.cpp' object='gui/es40_lsm-gui_x11.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lsm-gui_x11.obj `if test -f 'gui/gui_x11.cpp'; then $(CYGPATH_W) 'gui/gui_x11.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/gui_x11.cpp'; fi`

gui/es40_lsm-keymap.o: gui/keymap.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lsm-keymap.o -MD -MP -MF gui/$(DEPDIR)/es40_lsm-keymap.Tpo -c -o gui/es40_lsm-keymap.o `test -f 'gui/keymap.cpp' || echo '$(srcdir)/'`gui/keymap.cpp
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lsm-keymap.Tpo gui/$(DEPDIR)/es40_lsm-keymap.Po
#	$(AM_V_CXX)source='gui/keymap.cpp' object='gui/es40_lsm-keymap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lsm-keymap.o `test -f 'gui/keymap.cpp' || echo '$(srcdir)/'`gui/keymap.cpp

gui/es40_lsm-keymap.obj: gui/keymap.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lsm-keymap.obj -MD -MP -MF gui/$(DEPDIR)/es40_lsm-keymap.Tpo -c -o gui/es40_lsm-keymap.obj `if test -f 'gui/keymap.cpp'; then $(CYGPATH_W) 'gui/keymap.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/keymap.cpp'; fi`
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lsm-keymap.Tpo gui/$(DEPDIR)/es40_lsm-keymap.Po
#	$(AM_V_CXX)source='gui/keymap.cpp' object='gui/es40_lsm-keymap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lsm-keymap.obj `if test -f 'gui/keymap.cpp'; then $(CYGPATH_W) 'gui/keymap.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/keymap.cpp'; fi`

gui/es40_lsm-scancodes.o: gui/scancodes.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lsm-scancodes.o -MD -MP -MF gui/$(DEPDIR)/es40_lsm-scancodes.Tpo -c -o gui/es40_lsm-scancodes.o `test -f 'gui/scancodes.cpp' || echo '$(srcdir)/'`gui/scancodes.cpp
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lsm-scancodes.Tpo gui/$(DEPDIR)/es40_lsm-scancodes.Po
#	$(AM_V_CXX)source='gui/scancodes.cpp' object='gui/es40_lsm-scancodes.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lsm-scancodes.o `test -f 'gui/scancodes.cpp' || echo '$(srcdir)/'`gui/scancodes.cpp

gui/es40_lsm-scancodes.obj: gui/scancodes.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lsm-scancodes.obj -MD -MP -MF gui/$(DEPDIR)/es40_lsm-scancodes.Tpo -c -o gui/es40_lsm-scancodes.obj `if test -f 'gui/scancodes.cpp'; then $(CYGPATH_W) 'gui/scancodes.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/scancodes.cpp'; fi`
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lsm-scancodes.Tpo gui/$(DEPDIR)/es40_lsm-scancodes.Po
#	$(AM_V_CXX)source='gui/scancodes.cpp' object='gui/es40_lsm-scancodes.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lsm-scancodes.obj `if test -f 'gui/scancodes.cpp'; then $(CYGPATH_W) 'gui/scancodes.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/scancodes.cpp'; fi`

gui/es40_lsm-sdl.o: gui/sdl.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lsm-sdl.o -MD -MP -MF gui/$(DEPDIR)/es40_lsm-sdl.Tpo -c -o gui/es40_lsm-sdl.o `test -f 'gui/sdl.cpp' || echo '$(srcdir)/'`gui/sdl.cpp
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lsm-sdl.Tpo gui/$(DEPDIR)/es40_lsm-sdl.Po
#	$(AM_V_CXX)source='gui/sdl.cpp' object='gui/es40_lsm-sdl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lsm-sdl.o `test -f 'gui/sdl.cpp' || echo '$(srcdir)/'`gui/sdl.cpp

gui/es40_lsm-sdl.obj: gui/sdl.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lsm-sdl.obj -MD -MP -MF gui/$(DEPDIR)/es40_lsm-sdl.Tpo -c -o gui/es40_lsm-sdl.obj `if test -f 'gui/sdl.cpp'; then $(CYGPATH_W) 'gui/sdl.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/sdl.cpp'; fi`
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lsm-sdl.Tpo gui/$(DEPDIR)/es40_lsm-sdl.Po
#	$(AM_V_CXX)source='gui/sdl.cpp' object='gui/es40_lsm-sdl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lsm-sdl.obj `if test -f 'gui/sdl.cpp'; then $(CYGPATH_W) 'gui/sdl.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/sdl.cpp'; fi`

base/es40_lsm-Bugcheck.o: base/Bugcheck.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-Bugcheck.o -MD -MP -MF base/$(DEPDIR)/es40_lsm-Bugcheck.Tpo -c -o base/es40_lsm-Bugcheck.o `test -f 'base/Bugcheck.cpp' || echo '$(srcdir)/'`base/Bugcheck.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-Bugcheck.Tpo base/$(DEPDIR)/es40_lsm-Bugcheck.Po
#	$(AM_V_CXX)source='base/Bugcheck.cpp' object='base/es40_lsm-Bugcheck.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-Bugcheck.o `test -f 'base/Bugcheck.cpp' || echo '$(srcdir)/'`base/Bugcheck.cpp

base/es40_lsm-Bugcheck.obj: base/Bugcheck.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-Bugcheck.obj -MD -MP -MF base/$(DEPDIR)/es40_lsm-Bugcheck.Tpo -c -o base/es40_lsm-Bugcheck.obj `if test -f 'base/Bugcheck.cpp'; then $(CYGPATH_W) 'base/Bugcheck.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Bugcheck.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-Bugcheck.Tpo base/$(DEPDIR)/es40_lsm-Bugcheck.Po
#	$(AM_V_CXX)source='base/Bugcheck.cpp' object='base/es40_lsm-Bugcheck.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-Bugcheck.obj `if test -f 'base/Bugcheck.cpp'; then $(CYGPATH_W) 'base/Bugcheck.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Bugcheck.cpp'; fi`

base/es40_lsm-ErrorHandler.o: base/ErrorHandler.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-ErrorHandler.o -MD -MP -MF base/$(DEPDIR)/es40_lsm-ErrorHandler.Tpo -c -o base/es40_lsm-ErrorHandler.o `test -f 'base/ErrorHandler.cpp' || echo '$(srcdir)/'`base/ErrorHandler.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-ErrorHandler.Tpo base/$(DEPDIR)/es40_lsm-ErrorHandler.Po
#	$(AM_V_CXX)source='base/ErrorHandler.cpp' object='base/es40_lsm-ErrorHandler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-ErrorHandler.o `test -f 'base/ErrorHandler.cpp' || echo '$(srcdir)/'`base/ErrorHandler.cpp

base/es40_lsm-ErrorHandler.obj: base/ErrorHandler.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-ErrorHandler.obj -MD -MP -MF base/$(DEPDIR)/es40_lsm-ErrorHandler.Tpo -c -o base/es40_lsm-ErrorHandler.obj `if test -f 'base/ErrorHandler.cpp'; then $(CYGPATH_W) 'base/ErrorHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/base/ErrorHandler.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-ErrorHandler.Tpo base/$(DEPDIR)/es40_lsm-ErrorHandler.Po
#	$(AM_V_CXX)source='base/ErrorHandler.cpp' object='base/es40_lsm-ErrorHandler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-ErrorHandler.obj `if test -f 'base/ErrorHandler.cpp'; then $(CYGPATH_W) 'base/ErrorHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/base/ErrorHandler.cpp'; fi`

base/es40_lsm-Event.o: base/Event.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-Event.o -MD -MP -MF base/$(DEPDIR)/es40_lsm-Event.Tpo -c -o base/es40_lsm-Event.o `test -f 'base/Event.cpp' || echo '$(srcdir)/'`base/Event.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-Event.Tpo base/$(DEPDIR)/es40_lsm-Event.Po
#	$(AM_V_CXX)source='base/Event.cpp' object='base/es40_lsm-Event.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-Event.o `test -f 'base/Event.cpp' || echo '$(srcdir)/'`base/Event.cpp

base/es40_lsm-Event.obj: base/Event.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-Event.obj -MD -MP -MF base/$(DEPDIR)/es40_lsm-Event.Tpo -c -o base/es40_lsm-Event.obj `if test -f 'base/Event.cpp'; then $(CYGPATH_W) 'base/Event.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Event.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-Event.Tpo base/$(DEPDIR)/es40_lsm-Event.Po
#	$(AM_V_CXX)source='base/Event.cpp' object='base/es40_lsm-Event.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-Event.obj `if test -f 'base/Event.cpp'; then $(CYGPATH_W) 'base/Event.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Event.cpp'; fi`

base/es40_lsm-Exception.o: base/Exception.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-Exception.o -MD -MP -MF base/$(DEPDIR)/es40_lsm-Exception.Tpo -c -o base/es40_lsm-Exception.o `test -f 'base/Exception.cpp' || echo '$(srcdir)/'`base/Exception.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-Exception.Tpo base/$(DEPDIR)/es40_lsm-Exception.Po
#	$(AM_V_CXX)source='base/Exception.cpp' object='base/es40_lsm-Exception.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-Exception.o `test -f 'base/Exception.cpp' || echo '$(srcdir)/'`base/Exception.cpp

base/es40_lsm-Exception.obj: base/Exception.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-Exception.obj -MD -MP -MF base/$(DEPDIR)/es40_lsm-Exception.Tpo -c -o base/es40_lsm-Exception.obj `if test -f 'base/Exception.cpp'; then $(CYGPATH_W) 'base/Exception.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Exception.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-Exception.Tpo base/$(DEPDIR)/es40_lsm-Exception.Po
#	$(AM_V_CXX)source='base/Exception.cpp' object='base/es40_lsm-Exception.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-Exception.obj `if test -f 'base/Exception.cpp'; then $(CYGPATH_W) 'base/Exception.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Exception.cpp'; fi`

base/es40_lsm-Mutex.o: base/Mutex.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-Mutex.o -MD -MP -MF base/$(DEPDIR)/es40_lsm-Mutex.Tpo -c -o base/es40_lsm-Mutex.o `test -f 'base/Mutex.cpp' || echo '$(srcdir)/'`base/Mutex.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-Mutex.Tpo base/$(DEPDIR)/es40_lsm-Mutex.Po
#	$(AM_V_CXX)source='base/Mutex.cpp' object='base/es40_lsm-Mutex.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-Mutex.o `test -f 'base/Mutex.cpp' || echo '$(srcdir)/'`base/Mutex.cpp

base/es40_lsm-Mutex.obj: base/Mutex.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-Mutex.obj -MD -MP -MF base/$(DEPDIR)/es40_lsm-Mutex.Tpo -c -o base/es40_lsm-Mutex.obj `if test -f 'base/Mutex.cpp'; then $(CYGPATH_W) 'base/Mutex.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Mutex.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-Mutex.Tpo base/$(DEPDIR)/es40_lsm-Mutex.Po
#	$(AM_V_CXX)source='base/Mutex.cpp' object='base/es40_lsm-Mutex.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-Mutex.obj `if test -f 'base/Mutex.cpp'; then $(CYGPATH_W) 'base/Mutex.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Mutex.cpp'; fi`

base/es40_lsm-NumberFormatter.o: base/NumberFormatter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-NumberFormatter.o -MD -MP -MF base/$(DEPDIR)/es40_lsm-NumberFormatter.Tpo -c -o base/es40_lsm-NumberFormatter.o `test -f 'base/NumberFormatter.cpp' || echo '$(srcdir)/'`base/NumberFormatter.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-NumberFormatter.Tpo base/$(DEPDIR)/es40_lsm-NumberFormatter.Po
#	$(AM_V_CXX)source='base/NumberFormatter.cpp' object='base/es40_lsm-NumberFormatter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-NumberFormatter.o `test -f 'base/NumberFormatter.cpp' || echo '$(srcdir)/'`base/NumberFormatter.cpp

base/es40_lsm-NumberFormatter.obj: base/NumberFormatter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-NumberFormatter.obj -MD -MP -MF base/$(DEPDIR)/es40_lsm-NumberFormatter.Tpo -c -o base/es40_lsm-NumberFormatter.obj `if test -f 'base/NumberFormatter.cpp'; then $(CYGPATH_W) 'base/NumberFormatter.cpp'; else $(CYGPATH_W) '$(srcdir)/base/NumberFormatter.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-NumberFormatter.Tpo base/$(DEPDIR)/es40_lsm-NumberFormatter.Po
#	$(AM_V_CXX)source='base/NumberFormatter.cpp' object='base/es40_lsm-NumberFormatter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-NumberFormatter.obj `if test -f 'base/NumberFormatter.cpp'; then $(CYGPATH_W) 'base/NumberFormatter.cpp'; else $(CYGPATH_W) '$(srcdir)/base/NumberFormatter.cpp'; fi`

base/es40_lsm-RefCountedObject.o: base/RefCountedObject.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-RefCountedObject.o -MD -MP -MF base/$(DEPDIR)/es40_lsm-RefCountedObject.Tpo -c -o base/es40_lsm-RefCountedObject.o `test -f 'base/RefCountedObject.cpp' || echo '$(srcdir)/'`base/RefCountedObject.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-RefCountedObject.Tpo base/$(DEPDIR)/es40_lsm-RefCountedObject.Po
#	$(AM_V_CXX)source='base/RefCountedObject.cpp' object='base/es40_lsm-RefCountedObject.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-RefCountedObject.o `test -f 'base/RefCountedObject.cpp' || echo '$(srcdir)/'`base/RefCountedObject.cpp

base/es40_lsm-RefCountedObject.obj: base/RefCountedObject.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-RefCountedObject.obj -MD -MP -MF base/$(DEPDIR)/es40_lsm-RefCountedObject.Tpo -c -o base/es40_lsm-RefCountedObject.obj `if test -f 'base/RefCountedObject.cpp'; then $(CYGPATH_W) 'base/RefCountedObject.cpp'; else $(CYGPATH_W) '$(srcdir)/base/RefCountedObject.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-RefCountedObject.Tpo base/$(DEPDIR)/es40_lsm-RefCountedObject.Po
#	$(AM_V_CXX)source='base/RefCountedObject.cpp' object='base/es40_lsm-RefCountedObject.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-RefCountedObject.obj `if test -f 'base/RefCountedObject.cpp'; then $(CYGPATH_W) 'base/RefCountedObject.cpp'; else $(CYGPATH_W) '$(srcdir)/base/RefCountedObject.cpp'; fi`

base/es40_lsm-Runnable.o: base/Runnable.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-Runnable.o -MD -MP -MF base/$(DEPDIR)/es40_lsm-Runnable.Tpo -c -o base/es40_lsm-Runnable.o `test -f 'base/Runnable.cpp' || echo '$(srcdir)/'`base/Runnable.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-Runnable.Tpo base/$(DEPDIR)/es40_lsm-Runnable.Po
#	$(AM_V_CXX)source='base/Runnable.cpp' object='base/es40_lsm-Runnable.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-Runnable.o `test -f 'base/Runnable.cpp' || echo '$(srcdir)/'`base/Runnable.cpp

base/es40_lsm-Runnable.obj: base/Runnable.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-Runnable.obj -MD -MP -MF base/$(DEPDIR)/es40_lsm-Runnable.Tpo -c -o base/es40_lsm-Runnable.obj `if test -f 'base/Runnable.cpp'; then $(CYGPATH_W) 'base/Runnable.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Runnable.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-Runnable.Tpo base/$(DEPDIR)/es40_lsm-Runnable.Po
#	$(AM_V_CXX)source='base/Runnable.cpp' object='base/es40_lsm-Runnable.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-Runnable.obj `if test -f 'base/Runnable.cpp'; then $(CYGPATH_W) 'base/Runnable.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Runnable.cpp'; fi`

base/es40_lsm-RWLock.o: base/RWLock.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-RWLock.o -MD -MP -MF base/$(DEPDIR)/es40_lsm-RWLock.Tpo -c -o base/es40_lsm-RWLock.o `test -f 'base/RWLock.cpp' || echo '$(srcdir)/'`base/RWLock.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-RWLock.Tpo base/$(DEPDIR)/es40_lsm-RWLock.Po
#	$(AM_V_CXX)source='base/RWLock.cpp' object='base/es40_lsm-RWLock.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-RWLock.o `test -f 'base/RWLock.cpp' || echo '$(srcdir)/'`base/RWLock.cpp

base/es40_lsm-RWLock.obj: base/RWLock.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-RWLock.obj -MD -MP -MF base/$(DEPDIR)/es40_lsm-RWLock.Tpo -c -o base/es40_lsm-RWLock.obj `if test -f 'base/RWLock.cpp'; then $(CYGPATH_W) 'base/RWLock.cpp'; else $(CYGPATH_W) '$(srcdir)/base/RWLock.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-RWLock.Tpo base/$(DEPDIR)/es40_lsm-RWLock.Po
#	$(AM_V_CXX)source='base/RWLock.cpp' object='base/es40_lsm-RWLock.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-RWLock.obj `if test -f 'base/RWLock.cpp'; then $(CYGPATH_W) 'base/RWLock.cpp'; else $(CYGPATH_W) '$(srcdir)/base/RWLock.cpp'; fi`

base/es40_lsm-Semaphore.o: base/Semaphore.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-Semaphore.o -MD -MP -MF base/$(DEPDIR)/es40_lsm-Semaphore.Tpo -c -o base/es40_lsm-Semaphore.o `test -f 'base/Semaphore.cpp' || echo '$(srcdir)/'`base/Semaphore.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-Semaphore.Tpo base/$(DEPDIR)/es40_lsm-Semaphore.Po
#	$(AM_V_CXX)source='base/Semaphore.cpp' object='base/es40_lsm-Semaphore.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-Semaphore.o `test -f 'base/Semaphore.cpp' || echo '$(srcdir)/'`base/Semaphore.cpp

base/es40_lsm-Semaphore.obj: base/Semaphore.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-Semaphore.obj -MD -MP -MF base/$(DEPDIR)/es40_lsm-Semaphore.Tpo -c -o base/es40_lsm-Semaphore.obj `if test -f 'base/Semaphore.cpp'; then $(CYGPATH_W) 'base/Semaphore.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Semaphore.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-Semaphore.Tpo base/$(DEPDIR)/es40_lsm-Semaphore.Po
#	$(AM_V_CXX)source='base/Semaphore.cpp' object='base/es40_lsm-Semaphore.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-Semaphore.obj `if test -f 'base/Semaphore.cpp'; then $(CYGPATH_W) 'base/Semaphore.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Semaphore.cpp'; fi`

base/es40_lsm-SignalHandler.o: base/SignalHandler.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-SignalHandler.o -MD -MP -MF base/$(DEPDIR)/es40_lsm-SignalHandler.Tpo -c -o base/es40_lsm-SignalHandler.o `test -f 'base/SignalHandler.cpp' || echo '$(srcdir)/'`base/SignalHandler.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-SignalHandler.Tpo base/$(DEPDIR)/es40_lsm-SignalHandler.Po
#	$(AM_V_CXX)source='base/SignalHandler.cpp' object='base/es40_lsm-SignalHandler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-SignalHandler.o `test -f 'base/SignalHandler.cpp' || echo '$(srcdir)/'`base/SignalHandler.cpp

base/es40_lsm-SignalHandler.obj: base/SignalHandler.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-SignalHandler.obj -MD -MP -MF base/$(DEPDIR)/es40_lsm-SignalHandler.Tpo -c -o base/es40_lsm-SignalHandler.obj `if test -f 'base/SignalHandler.cpp'; then $(CYGPATH_W) 'base/SignalHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/base/SignalHandler.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-SignalHandler.Tpo base/$(DEPDIR)/es40_lsm-SignalHandler.Po
#	$(AM_V_CXX)source='base/SignalHandler.cpp' object='base/es40_lsm-SignalHandler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-SignalHandler.obj `if test -f 'base/SignalHandler.cpp'; then $(CYGPATH_W) 'base/SignalHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/base/SignalHandler.cpp'; fi`

base/es40_lsm-ThreadLocal.o: base/ThreadLocal.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-ThreadLocal.o -MD -MP -MF base/$(DEPDIR)/es40_lsm-ThreadLocal.Tpo -c -o base/es40_lsm-ThreadLocal.o `test -f 'base/ThreadLocal.cpp' || echo '$(srcdir)/'`base/ThreadLocal.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-ThreadLocal.Tpo base/$(DEPDIR)/es40_lsm-ThreadLocal.Po
#	$(AM_V_CXX)source='base/ThreadLocal.cpp' object='base/es40_lsm-ThreadLocal.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-ThreadLocal.o `test -f 'base/ThreadLocal.cpp' || echo '$(srcdir)/'`base/ThreadLocal.cpp

base/es40_lsm-ThreadLocal.obj: base/ThreadLocal.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-ThreadLocal.obj -MD -MP -MF base/$(DEPDIR)/es40_lsm-ThreadLocal.Tpo -c -o base/es40_lsm-ThreadLocal.obj `if test -f 'base/ThreadLocal.cpp'; then $(CYGPATH_W) 'base/ThreadLocal.cpp'; else $(CYGPATH_W) '$(srcdir)/base/ThreadLocal.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-ThreadLocal.Tpo base/$(DEPDIR)/es40_lsm-ThreadLocal.Po
#	$(AM_V_CXX)source='base/ThreadLocal.cpp' object='base/es40_lsm-ThreadLocal.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-ThreadLocal.obj `if test -f 'base/ThreadLocal.cpp'; then $(CYGPATH_W) 'base/ThreadLocal.cpp'; else $(CYGPATH_W) '$(srcdir)/base/ThreadLocal.cpp'; fi`

base/es40_lsm-Thread.o: base/Thread.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-Thread.o -MD -MP -MF base/$(DEPDIR)/es40_lsm-Thread.Tpo -c -o base/es40_lsm-Thread.o `test -f 'base/Thread.cpp' || echo '$(srcdir)/'`base/Thread.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-Thread.Tpo base/$(DEPDIR)/es40_lsm-Thread.Po
#	$(AM_V_CXX)source='base/Thread.cpp' object='base/es40_lsm-Thread.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-Thread.o `test -f 'base/Thread.cpp' || echo '$(srcdir)/'`base/Thread.cpp

base/es40_lsm-Thread.obj: base/Thread.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-Thread.obj -MD -MP -MF base/$(DEPDIR)/es40_lsm-Thread.Tpo -c -o base/es40_lsm-Thread.obj `if test -f 'base/Thread.cpp'; then $(CYGPATH_W) 'base/Thread.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Thread.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-Thread.Tpo base/$(DEPDIR)/es40_lsm-Thread.Po
#	$(AM_V_CXX)source='base/Thread.cpp' object='base/es40_lsm-Thread.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-Thread.obj `if test -f 'base/Thread.cpp'; then $(CYGPATH_W) 'base/Thread.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Thread.cpp'; fi`

base/es40_lsm-Timestamp.o: base/Timestamp.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-Timestamp.o -MD -MP -MF base/$(DEPDIR)/es40_lsm-Timestamp.Tpo -c -o base/es40_lsm-Timestamp.o `test -f 'base/Timestamp.cpp' || echo '$(srcdir)/'`base/Timestamp.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-Timestamp.Tpo base/$(DEPDIR)/es40_lsm-Timestamp.Po
#	$(AM_V_CXX)source='base/Timestamp.cpp' object='base/es40_lsm-Timestamp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-Timestamp.o `test -f 'base/Timestamp.cpp' || echo '$(srcdir)/'`base/Timestamp.cpp

base/es40_lsm-Timestamp.obj: base/Timestamp.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lsm-Timestamp.obj -MD -MP -MF base/$(DEPDIR)/es40_lsm-Timestamp.Tpo -c -o base/es40_lsm-Timestamp.obj `if test -f 'base/Timestamp.cpp'; then $(CYGPATH_W) 'base/Timestamp.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Timestamp.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lsm-Timestamp.Tpo base/$(DEPDIR)/es40_lsm-Timestamp.Po
#	$(AM_V_CXX)source='base/Timestamp.cpp' object='base/es40_lsm-Timestamp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lsm_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lsm-Timestamp.obj `if test -f 'base/Timestamp.cpp'; then $(CYGPATH_W) 'base/Timestamp.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Timestamp.cpp'; fi`

es40_lss-AliM1543C.o: AliM1543C.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-AliM1543C.o -MD -MP -MF $(DEPDIR)/es40_lss-AliM1543C.Tpo -c -o es40_lss-AliM1543C.o `test -f 'AliM1543C.cpp' || echo '$(srcdir)/'`AliM1543C.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-AliM1543C.Tpo $(DEPDIR)/es40_lss-AliM1543C.Po
#	$(AM_V_CXX)source='AliM1543C.cpp' object='es40_lss-AliM1543C.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-AliM1543C.o `test -f 'AliM1543C.cpp' || echo '$(srcdir)/'`AliM1543C.cpp

es40_lss-AliM1543C.obj: AliM1543C.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-AliM1543C.obj -MD -MP -MF $(DEPDIR)/es40_lss-AliM1543C.Tpo -c -o es40_lss-AliM1543C.obj `if test -f 'AliM1543C.cpp'; then $(CYGPATH_W) 'AliM1543C.cpp'; else $(CYGPATH_W) '$(srcdir)/AliM1543C.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-AliM1543C.Tpo $(DEPDIR)/es40_lss-AliM1543C.Po
#	$(AM_V_CXX)source='AliM1543C.cpp' object='es40_lss-AliM1543C.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-AliM1543C.obj `if test -f 'AliM1543C.cpp'; then $(CYGPATH_W) 'AliM1543C.cpp'; else $(CYGPATH_W) '$(srcdir)/AliM1543C.cpp'; fi`

es40_lss-AliM1543C_ide.o: AliM1543C_ide.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-AliM1543C_ide.o -MD -MP -MF $(DEPDIR)/es40_lss-AliM1543C_ide.Tpo -c -o es40_lss-AliM1543C_ide.o `test -f 'AliM1543C_ide.cpp' || echo '$(srcdir)/'`AliM1543C_ide.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-AliM1543C_ide.Tpo $(DEPDIR)/es40_lss-AliM1543C_ide.Po
#	$(AM_V_CXX)source='AliM1543C_ide.cpp' object='es40_lss-AliM1543C_ide.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-AliM1543C_ide.o `test -f 'AliM1543C_ide.cpp' || echo '$(srcdir)/'`AliM1543C_ide.cpp

es40_lss-AliM1543C_ide.obj: AliM1543C_ide.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-AliM1543C_ide.obj -MD -MP -MF $(DEPDIR)/es40_lss-AliM1543C_ide.Tpo -c -o es40_lss-AliM1543C_ide.obj `if test -f 'AliM1543C_ide.cpp'; then $(CYGPATH_W) 'AliM1543C_ide.cpp'; else $(CYGPATH_W) '$(srcdir)/AliM1543C_ide.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-AliM1543C_ide.Tpo $(DEPDIR)/es40_lss-AliM1543C_ide.Po
#	$(AM_V_CXX)source='AliM1543C_ide.cpp' object='es40_lss-AliM1543C_ide.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-AliM1543C_ide.obj `if test -f 'AliM1543C_ide.cpp'; then $(CYGPATH_W) 'AliM1543C_ide.cpp'; else $(CYGPATH_W) '$(srcdir)/AliM1543C_ide.cpp'; fi`

es40_lss-AliM1543C_usb.o: AliM1543C_usb.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-AliM1543C_usb.o -MD -MP -MF $(DEPDIR)/es40_lss-AliM1543C_usb.Tpo -c -o es40_lss-AliM1543C_usb.o `test -f 'AliM1543C_usb.cpp' || echo '$(srcdir)/'`AliM1543C_usb.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-AliM1543C_usb.Tpo $(DEPDIR)/es40_lss-AliM1543C_usb.Po
#	$(AM_V_CXX)source='AliM1543C_usb.cpp' object='es40_lss-AliM1543C_usb.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-AliM1543C_usb.o `test -f 'AliM1543C_usb.cpp' || echo '$(srcdir)/'`AliM1543C_usb.cpp

es40_lss-AliM1543C_usb.obj: AliM1543C_usb.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-AliM1543C_usb.obj -MD -MP -MF $(DEPDIR)/es40_lss-AliM1543C_usb.Tpo -c -o es40_lss-AliM1543C_usb.obj `if test -f 'AliM1543C_usb.cpp'; then $(CYGPATH_W) 'AliM1543C_usb.cpp'; else $(CYGPATH_W) '$(srcdir)/AliM1543C_usb.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-AliM1543C_usb.Tpo $(DEPDIR)/es40_lss-AliM1543C_usb.Po
#	$(AM_V_CXX)source='AliM1543C_usb.cpp' object='es40_lss-AliM1543C_usb.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-AliM1543C_usb.obj `if test -f 'AliM1543C_usb.cpp'; then $(CYGPATH_W) 'AliM1543C_usb.cpp'; else $(CYGPATH_W) '$(srcdir)/AliM1543C_usb.cpp'; fi`

es40_lss-AlphaCPU.o: AlphaCPU.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-AlphaCPU.o -MD -MP -MF $(DEPDIR)/es40_lss-AlphaCPU.Tpo -c -o es40_lss-AlphaCPU.o `test -f 'AlphaCPU.cpp' || echo '$(srcdir)/'`AlphaCPU.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-AlphaCPU.Tpo $(DEPDIR)/es40_lss-AlphaCPU.Po
#	$(AM_V_CXX)source='AlphaCPU.cpp' object='es40_lss-AlphaCPU.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-AlphaCPU.o `test -f 'AlphaCPU.cpp' || echo '$(srcdir)/'`AlphaCPU.cpp

es40_lss-AlphaCPU.obj: AlphaCPU.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-AlphaCPU.obj -MD -MP -MF $(DEPDIR)/es40_lss-AlphaCPU.Tpo -c -o es40_lss-AlphaCPU.obj `if test -f 'AlphaCPU.cpp'; then $(CYGPATH_W) 'AlphaCPU.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-AlphaCPU.Tpo $(DEPDIR)/es40_lss-AlphaCPU.Po
#	$(AM_V_CXX)source='AlphaCPU.cpp' object='es40_lss-AlphaCPU.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-AlphaCPU.obj `if test -f 'AlphaCPU.cpp'; then $(CYGPATH_W) 'AlphaCPU.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU.cpp'; fi`

es40_lss-AlphaCPU_ieeefloat.o: AlphaCPU_ieeefloat.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-AlphaCPU_ieeefloat.o -MD -MP -MF $(DEPDIR)/es40_lss-AlphaCPU_ieeefloat.Tpo -c -o es40_lss-AlphaCPU_ieeefloat.o `test -f 'AlphaCPU_ieeefloat.cpp' || echo '$(srcdir)/'`AlphaCPU_ieeefloat.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-AlphaCPU_ieeefloat.Tpo $(DEPDIR)/es40_lss-AlphaCPU_ieeefloat.Po
#	$(AM_V_CXX)source='AlphaCPU_ieeefloat.cpp' object='es40_lss-AlphaCPU_ieeefloat.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-AlphaCPU_ieeefloat.o `test -f 'AlphaCPU_ieeefloat.cpp' || echo '$(srcdir)/'`AlphaCPU_ieeefloat.cpp

es40_lss-AlphaCPU_ieeefloat.obj: AlphaCPU_ieeefloat.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-AlphaCPU_ieeefloat.obj -MD -MP -MF $(DEPDIR)/es40_lss-AlphaCPU_ieeefloat.Tpo -c -o es40_lss-AlphaCPU_ieeefloat.obj `if test -f 'AlphaCPU_ieeefloat.cpp'; then $(CYGPATH_W) 'AlphaCPU_ieeefloat.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU_ieeefloat.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-AlphaCPU_ieeefloat.Tpo $(DEPDIR)/es40_lss-AlphaCPU_ieeefloat.Po
#	$(AM_V_CXX)source='AlphaCPU_ieeefloat.cpp' object='es40_lss-AlphaCPU_ieeefloat.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-AlphaCPU_ieeefloat.obj `if test -f 'AlphaCPU_ieeefloat.cpp'; then $(CYGPATH_W) 'AlphaCPU_ieeefloat.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU_ieeefloat.cpp'; fi`

es40_lss-AlphaCPU_vaxfloat.o: AlphaCPU_vaxfloat.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-AlphaCPU_vaxfloat.o -MD -MP -MF $(DEPDIR)/es40_lss-AlphaCPU_vaxfloat.Tpo -c -o es40_lss-AlphaCPU_vaxfloat.o `test -f 'AlphaCPU_vaxfloat.cpp' || echo '$(srcdir)/'`AlphaCPU_vaxfloat.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-AlphaCPU_vaxfloat.Tpo $(DEPDIR)/es40_lss-AlphaCPU_vaxfloat.Po
#	$(AM_V_CXX)source='AlphaCPU_vaxfloat.cpp' object='es40_lss-AlphaCPU_vaxfloat.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-AlphaCPU_vaxfloat.o `test -f 'AlphaCPU_vaxfloat.cpp' || echo '$(srcdir)/'`AlphaCPU_vaxfloat.cpp

es40_lss-AlphaCPU_vaxfloat.obj: AlphaCPU_vaxfloat.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-AlphaCPU_vaxfloat.obj -MD -MP -MF $(DEPDIR)/es40_lss-AlphaCPU_vaxfloat.Tpo -c -o es40_lss-AlphaCPU_vaxfloat.obj `if test -f 'AlphaCPU_vaxfloat.cpp'; then $(CYGPATH_W) 'AlphaCPU_vaxfloat.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU_vaxfloat.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-AlphaCPU_vaxfloat.Tpo $(DEPDIR)/es40_lss-AlphaCPU_vaxfloat.Po
#	$(AM_V_CXX)source='AlphaCPU_vaxfloat.cpp' object='es40_lss-AlphaCPU_vaxfloat.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-AlphaCPU_vaxfloat.obj `if test -f 'AlphaCPU_vaxfloat.cpp'; then $(CYGPATH_W) 'AlphaCPU_vaxfloat.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU_vaxfloat.cpp'; fi`

es40_lss-AlphaCPU_vmspal.o: AlphaCPU_vmspal.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-AlphaCPU_vmspal.o -MD -MP -MF $(DEPDIR)/es40_lss-AlphaCPU_vmspal.Tpo -c -o es40_lss-AlphaCPU_vmspal.o `test -f 'AlphaCPU_vmspal.cpp' || echo '$(srcdir)/'`AlphaCPU_vmspal.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-AlphaCPU_vmspal.Tpo $(DEPDIR)/es40_lss-AlphaCPU_vmspal.Po
#	$(AM_V_CXX)source='AlphaCPU_vmspal.cpp' object='es40_lss-AlphaCPU_vmspal.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-AlphaCPU_vmspal.o `test -f 'AlphaCPU_vmspal.cpp' || echo '$(srcdir)/'`AlphaCPU_vmspal.cpp

es40_lss-AlphaCPU_vmspal.obj: AlphaCPU_vmspal.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-AlphaCPU_vmspal.obj -MD -MP -MF $(DEPDIR)/es40_lss-AlphaCPU_vmspal.Tpo -c -o es40_lss-AlphaCPU_vmspal.obj `if test -f 'AlphaCPU_vmspal.cpp'; then $(CYGPATH_W) 'AlphaCPU_vmspal.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU_vmspal.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-AlphaCPU_vmspal.Tpo $(DEPDIR)/es40_lss-AlphaCPU_vmspal.Po
#	$(AM_V_CXX)source='AlphaCPU_vmspal.cpp' object='es40_lss-AlphaCPU_vmspal.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-AlphaCPU_vmspal.obj `if test -f 'AlphaCPU_vmspal.cpp'; then $(CYGPATH_W) 'AlphaCPU_vmspal.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaCPU_vmspal.cpp'; fi`

es40_lss-AlphaSim.o: AlphaSim.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-AlphaSim.o -MD -MP -MF $(DEPDIR)/es40_lss-AlphaSim.Tpo -c -o es40_lss-AlphaSim.o `test -f 'AlphaSim.cpp' || echo '$(srcdir)/'`AlphaSim.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-AlphaSim.Tpo $(DEPDIR)/es40_lss-AlphaSim.Po
#	$(AM_V_CXX)source='AlphaSim.cpp' object='es40_lss-AlphaSim.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-AlphaSim.o `test -f 'AlphaSim.cpp' || echo '$(srcdir)/'`AlphaSim.cpp

es40_lss-AlphaSim.obj: AlphaSim.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-AlphaSim.obj -MD -MP -MF $(DEPDIR)/es40_lss-AlphaSim.Tpo -c -o es40_lss-AlphaSim.obj `if test -f 'AlphaSim.cpp'; then $(CYGPATH_W) 'AlphaSim.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaSim.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-AlphaSim.Tpo $(DEPDIR)/es40_lss-AlphaSim.Po
#	$(AM_V_CXX)source='AlphaSim.cpp' object='es40_lss-AlphaSim.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-AlphaSim.obj `if test -f 'AlphaSim.cpp'; then $(CYGPATH_W) 'AlphaSim.cpp'; else $(CYGPATH_W) '$(srcdir)/AlphaSim.cpp'; fi`

es40_lss-Cirrus.o: Cirrus.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Cirrus.o -MD -MP -MF $(DEPDIR)/es40_lss-Cirrus.Tpo -c -o es40_lss-Cirrus.o `test -f 'Cirrus.cpp' || echo '$(srcdir)/'`Cirrus.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Cirrus.Tpo $(DEPDIR)/es40_lss-Cirrus.Po
#	$(AM_V_CXX)source='Cirrus.cpp' object='es40_lss-Cirrus.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Cirrus.o `test -f 'Cirrus.cpp' || echo '$(srcdir)/'`Cirrus.cpp

es40_lss-Cirrus.obj: Cirrus.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Cirrus.obj -MD -MP -MF $(DEPDIR)/es40_lss-Cirrus.Tpo -c -o es40_lss-Cirrus.obj `if test -f 'Cirrus.cpp'; then $(CYGPATH_W) 'Cirrus.cpp'; else $(CYGPATH_W) '$(srcdir)/Cirrus.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Cirrus.Tpo $(DEPDIR)/es40_lss-Cirrus.Po
#	$(AM_V_CXX)source='Cirrus.cpp' object='es40_lss-Cirrus.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Cirrus.obj `if test -f 'Cirrus.cpp'; then $(CYGPATH_W) 'Cirrus.cpp'; else $(CYGPATH_W) '$(srcdir)/Cirrus.cpp'; fi`

es40_lss-Configurator.o: Configurator.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Configurator.o -MD -MP -MF $(DEPDIR)/es40_lss-Configurator.Tpo -c -o es40_lss-Configurator.o `test -f 'Configurator.cpp' || echo '$(srcdir)/'`Configurator.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Configurator.Tpo $(DEPDIR)/es40_lss-Configurator.Po
#	$(AM_V_CXX)source='Configurator.cpp' object='es40_lss-Configurator.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Configurator.o `test -f 'Configurator.cpp' || echo '$(srcdir)/'`Configurator.cpp

es40_lss-Configurator.obj: Configurator.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Configurator.obj -MD -MP -MF $(DEPDIR)/es40_lss-Configurator.Tpo -c -o es40_lss-Configurator.obj `if test -f 'Configurator.cpp'; then $(CYGPATH_W) 'Configurator.cpp'; else $(CYGPATH_W) '$(srcdir)/Configurator.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Configurator.Tpo $(DEPDIR)/es40_lss-Configurator.Po
#	$(AM_V_CXX)source='Configurator.cpp' object='es40_lss-Configurator.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Configurator.obj `if test -f 'Configurator.cpp'; then $(CYGPATH_W) 'Configurator.cpp'; else $(CYGPATH_W) '$(srcdir)/Configurator.cpp'; fi`

es40_lss-DEC21143.o: DEC21143.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-DEC21143.o -MD -MP -MF $(DEPDIR)/es40_lss-DEC21143.Tpo -c -o es40_lss-DEC21143.o `test -f 'DEC21143.cpp' || echo '$(srcdir)/'`DEC21143.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-DEC21143.Tpo $(DEPDIR)/es40_lss-DEC21143.Po
#	$(AM_V_CXX)source='DEC21143.cpp' object='es40_lss-DEC21143.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-DEC21143.o `test -f 'DEC21143.cpp' || echo '$(srcdir)/'`DEC21143.cpp

es40_lss-DEC21143.obj: DEC21143.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-DEC21143.obj -MD -MP -MF $(DEPDIR)/es40_lss-DEC21143.Tpo -c -o es40_lss-DEC21143.obj `if test -f 'DEC21143.cpp'; then $(CYGPATH_W) 'DEC21143.cpp'; else $(CYGPATH_W) '$(srcdir)/DEC21143.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-DEC21143.Tpo $(DEPDIR)/es40_lss-DEC21143.Po
#	$(AM_V_CXX)source='DEC21143.cpp' object='es40_lss-DEC21143.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-DEC21143.obj `if test -f 'DEC21143.cpp'; then $(CYGPATH_W) 'DEC21143.cpp'; else $(CYGPATH_W) '$(srcdir)/DEC21143.cpp'; fi`

es40_lss-Disk.o: Disk.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Disk.o -MD -MP -MF $(DEPDIR)/es40_lss-Disk.Tpo -c -o es40_lss-Disk.o `test -f 'Disk.cpp' || echo '$(srcdir)/'`Disk.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Disk.Tpo $(DEPDIR)/es40_lss-Disk.Po
#	$(AM_V_CXX)source='Disk.cpp' object='es40_lss-Disk.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Disk.o `test -f 'Disk.cpp' || echo '$(srcdir)/'`Disk.cpp

es40_lss-Disk.obj: Disk.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Disk.obj -MD -MP -MF $(DEPDIR)/es40_lss-Disk.Tpo -c -o es40_lss-Disk.obj `if test -f 'Disk.cpp'; then $(CYGPATH_W) 'Disk.cpp'; else $(CYGPATH_W) '$(srcdir)/Disk.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Disk.Tpo $(DEPDIR)/es40_lss-Disk.Po
#	$(AM_V_CXX)source='Disk.cpp' object='es40_lss-Disk.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Disk.obj `if test -f 'Disk.cpp'; then $(CYGPATH_W) 'Disk.cpp'; else $(CYGPATH_W) '$(srcdir)/Disk.cpp'; fi`

es40_lss-DiskController.o: DiskController.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-DiskController.o -MD -MP -MF $(DEPDIR)/es40_lss-DiskController.Tpo -c -o es40_lss-DiskController.o `test -f 'DiskController.cpp' || echo '$(srcdir)/'`DiskController.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-DiskController.Tpo $(DEPDIR)/es40_lss-DiskController.Po
#	$(AM_V_CXX)source='DiskController.cpp' object='es40_lss-DiskController.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-DiskController.o `test -f 'DiskController.cpp' || echo '$(srcdir)/'`DiskController.cpp

es40_lss-DiskController.obj: DiskController.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-DiskController.obj -MD -MP -MF $(DEPDIR)/es40_lss-DiskController.Tpo -c -o es40_lss-DiskController.obj `if test -f 'DiskController.cpp'; then $(CYGPATH_W) 'DiskController.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskController.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-DiskController.Tpo $(DEPDIR)/es40_lss-DiskController.Po
#	$(AM_V_CXX)source='DiskController.cpp' object='es40_lss-DiskController.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-DiskController.obj `if test -f 'DiskController.cpp'; then $(CYGPATH_W) 'DiskController.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskController.cpp'; fi`

es40_lss-DiskDevice.o: DiskDevice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-DiskDevice.o -MD -MP -MF $(DEPDIR)/es40_lss-DiskDevice.Tpo -c -o es40_lss-DiskDevice.o `test -f 'DiskDevice.cpp' || echo '$(srcdir)/'`DiskDevice.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-DiskDevice.Tpo $(DEPDIR)/es40_lss-DiskDevice.Po
#	$(AM_V_CXX)source='DiskDevice.cpp' object='es40_lss-DiskDevice.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-DiskDevice.o `test -f 'DiskDevice.cpp' || echo '$(srcdir)/'`DiskDevice.cpp

es40_lss-DiskDevice.obj: DiskDevice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-DiskDevice.obj -MD -MP -MF $(DEPDIR)/es40_lss-DiskDevice.Tpo -c -o es40_lss-DiskDevice.obj `if test -f 'DiskDevice.cpp'; then $(CYGPATH_W) 'DiskDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskDevice.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-DiskDevice.Tpo $(DEPDIR)/es40_lss-DiskDevice.Po
#	$(AM_V_CXX)source='DiskDevice.cpp' object='es40_lss-DiskDevice.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-DiskDevice.obj `if test -f 'DiskDevice.cpp'; then $(CYGPATH_W) 'DiskDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskDevice.cpp'; fi`

es40_lss-DiskFile.o: DiskFile.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-DiskFile.o -MD -MP -MF $(DEPDIR)/es40_lss-DiskFile.Tpo -c -o es40_lss-DiskFile.o `test -f 'DiskFile.cpp' || echo '$(srcdir)/'`DiskFile.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-DiskFile.Tpo $(DEPDIR)/es40_lss-DiskFile.Po
#	$(AM_V_CXX)source='DiskFile.cpp' object='es40_lss-DiskFile.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-DiskFile.o `test -f 'DiskFile.cpp' || echo '$(srcdir)/'`DiskFile.cpp

es40_lss-DiskFile.obj: DiskFile.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-DiskFile.obj -MD -MP -MF $(DEPDIR)/es40_lss-DiskFile.Tpo -c -o es40_lss-DiskFile.obj `if test -f 'DiskFile.cpp'; then $(CYGPATH_W) 'DiskFile.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskFile.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-DiskFile.Tpo $(DEPDIR)/es40_lss-DiskFile.Po
#	$(AM_V_CXX)source='DiskFile.cpp' object='es40_lss-DiskFile.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-DiskFile.obj `if test -f 'DiskFile.cpp'; then $(CYGPATH_W) 'DiskFile.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskFile.cpp'; fi`

es40_lss-DiskRam.o: DiskRam.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-DiskRam.o -MD -MP -MF $(DEPDIR)/es40_lss-DiskRam.Tpo -c -o es40_lss-DiskRam.o `test -f 'DiskRam.cpp' || echo '$(srcdir)/'`DiskRam.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-DiskRam.Tpo $(DEPDIR)/es40_lss-DiskRam.Po
#	$(AM_V_CXX)source='DiskRam.cpp' object='es40_lss-DiskRam.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-DiskRam.o `test -f 'DiskRam.cpp' || echo '$(srcdir)/'`DiskRam.cpp

es40_lss-DiskRam.obj: DiskRam.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-DiskRam.obj -MD -MP -MF $(DEPDIR)/es40_lss-DiskRam.Tpo -c -o es40_lss-DiskRam.obj `if test -f 'DiskRam.cpp'; then $(CYGPATH_W) 'DiskRam.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskRam.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-DiskRam.Tpo $(DEPDIR)/es40_lss-DiskRam.Po
#	$(AM_V_CXX)source='DiskRam.cpp' object='es40_lss-DiskRam.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-DiskRam.obj `if test -f 'DiskRam.cpp'; then $(CYGPATH_W) 'DiskRam.cpp'; else $(CYGPATH_W) '$(srcdir)/DiskRam.cpp'; fi`

es40_lss-DMA.o: DMA.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-DMA.o -MD -MP -MF $(DEPDIR)/es40_lss-DMA.Tpo -c -o es40_lss-DMA.o `test -f 'DMA.cpp' || echo '$(srcdir)/'`DMA.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-DMA.Tpo $(DEPDIR)/es40_lss-DMA.Po
#	$(AM_V_CXX)source='DMA.cpp' object='es40_lss-DMA.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-DMA.o `test -f 'DMA.cpp' || echo '$(srcdir)/'`DMA.cpp

es40_lss-DMA.obj: DMA.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-DMA.obj -MD -MP -MF $(DEPDIR)/es40_lss-DMA.Tpo -c -o es40_lss-DMA.obj `if test -f 'DMA.cpp'; then $(CYGPATH_W) 'DMA.cpp'; else $(CYGPATH_W) '$(srcdir)/DMA.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-DMA.Tpo $(DEPDIR)/es40_lss-DMA.Po
#	$(AM_V_CXX)source='DMA.cpp' object='es40_lss-DMA.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-DMA.obj `if test -f 'DMA.cpp'; then $(CYGPATH_W) 'DMA.cpp'; else $(CYGPATH_W) '$(srcdir)/DMA.cpp'; fi`

es40_lss-DPR.o: DPR.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-DPR.o -MD -MP -MF $(DEPDIR)/es40_lss-DPR.Tpo -c -o es40_lss-DPR.o `test -f 'DPR.cpp' || echo '$(srcdir)/'`DPR.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-DPR.Tpo $(DEPDIR)/es40_lss-DPR.Po
#	$(AM_V_CXX)source='DPR.cpp' object='es40_lss-DPR.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-DPR.o `test -f 'DPR.cpp' || echo '$(srcdir)/'`DPR.cpp

es40_lss-DPR.obj: DPR.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-DPR.obj -MD -MP -MF $(DEPDIR)/es40_lss-DPR.Tpo -c -o es40_lss-DPR.obj `if test -f 'DPR.cpp'; then $(CYGPATH_W) 'DPR.cpp'; else $(CYGPATH_W) '$(srcdir)/DPR.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-DPR.Tpo $(DEPDIR)/es40_lss-DPR.Po
#	$(AM_V_CXX)source='DPR.cpp' object='es40_lss-DPR.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-DPR.obj `if test -f 'DPR.cpp'; then $(CYGPATH_W) 'DPR.cpp'; else $(CYGPATH_W) '$(srcdir)/DPR.cpp'; fi`

es40_lss-es40_debug.o: es40_debug.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-es40_debug.o -MD -MP -MF $(DEPDIR)/es40_lss-es40_debug.Tpo -c -o es40_lss-es40_debug.o `test -f 'es40_debug.cpp' || echo '$(srcdir)/'`es40_debug.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-es40_debug.Tpo $(DEPDIR)/es40_lss-es40_debug.Po
#	$(AM_V_CXX)source='es40_debug.cpp' object='es40_lss-es40_debug.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-es40_debug.o `test -f 'es40_debug.cpp' || echo '$(srcdir)/'`es40_debug.cpp

es40_lss-es40_debug.obj: es40_debug.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-es40_debug.obj -MD -MP -MF $(DEPDIR)/es40_lss-es40_debug.Tpo -c -o es40_lss-es40_debug.obj `if test -f 'es40_debug.cpp'; then $(CYGPATH_W) 'es40_debug.cpp'; else $(CYGPATH_W) '$(srcdir)/es40_debug.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-es40_debug.Tpo $(DEPDIR)/es40_lss-es40_debug.Po
#	$(AM_V_CXX)source='es40_debug.cpp' object='es40_lss-es40_debug.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-es40_debug.obj `if test -f 'es40_debug.cpp'; then $(CYGPATH_W) 'es40_debug.cpp'; else $(CYGPATH_W) '$(srcdir)/es40_debug.cpp'; fi`

es40_lss-Ethernet.o: Ethernet.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Ethernet.o -MD -MP -MF $(DEPDIR)/es40_lss-Ethernet.Tpo -c -o es40_lss-Ethernet.o `test -f 'Ethernet.cpp' || echo '$(srcdir)/'`Ethernet.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Ethernet.Tpo $(DEPDIR)/es40_lss-Ethernet.Po
#	$(AM_V_CXX)source='Ethernet.cpp' object='es40_lss-Ethernet.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Ethernet.o `test -f 'Ethernet.cpp' || echo '$(srcdir)/'`Ethernet.cpp

es40_lss-Ethernet.obj: Ethernet.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Ethernet.obj -MD -MP -MF $(DEPDIR)/es40_lss-Ethernet.Tpo -c -o es40_lss-Ethernet.obj `if test -f 'Ethernet.cpp'; then $(CYGPATH_W) 'Ethernet.cpp'; else $(CYGPATH_W) '$(srcdir)/Ethernet.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Ethernet.Tpo $(DEPDIR)/es40_lss-Ethernet.Po
#	$(AM_V_CXX)source='Ethernet.cpp' object='es40_lss-Ethernet.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Ethernet.obj `if test -f 'Ethernet.cpp'; then $(CYGPATH_W) 'Ethernet.cpp'; else $(CYGPATH_W) '$(srcdir)/Ethernet.cpp'; fi`

es40_lss-Flash.o: Flash.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Flash.o -MD -MP -MF $(DEPDIR)/es40_lss-Flash.Tpo -c -o es40_lss-Flash.o `test -f 'Flash.cpp' || echo '$(srcdir)/'`Flash.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Flash.Tpo $(DEPDIR)/es40_lss-Flash.Po
#	$(AM_V_CXX)source='Flash.cpp' object='es40_lss-Flash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Flash.o `test -f 'Flash.cpp' || echo '$(srcdir)/'`Flash.cpp

es40_lss-Flash.obj: Flash.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Flash.obj -MD -MP -MF $(DEPDIR)/es40_lss-Flash.Tpo -c -o es40_lss-Flash.obj `if test -f 'Flash.cpp'; then $(CYGPATH_W) 'Flash.cpp'; else $(CYGPATH_W) '$(srcdir)/Flash.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Flash.Tpo $(DEPDIR)/es40_lss-Flash.Po
#	$(AM_V_CXX)source='Flash.cpp' object='es40_lss-Flash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Flash.obj `if test -f 'Flash.cpp'; then $(CYGPATH_W) 'Flash.cpp'; else $(CYGPATH_W) '$(srcdir)/Flash.cpp'; fi`

es40_lss-FloppyController.o: FloppyController.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-FloppyController.o -MD -MP -MF $(DEPDIR)/es40_lss-FloppyController.Tpo -c -o es40_lss-FloppyController.o `test -f 'FloppyController.cpp' || echo '$(srcdir)/'`FloppyController.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-FloppyController.Tpo $(DEPDIR)/es40_lss-FloppyController.Po
#	$(AM_V_CXX)source='FloppyController.cpp' object='es40_lss-FloppyController.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-FloppyController.o `test -f 'FloppyController.cpp' || echo '$(srcdir)/'`FloppyController.cpp

es40_lss-FloppyController.obj: FloppyController.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-FloppyController.obj -MD -MP -MF $(DEPDIR)/es40_lss-FloppyController.Tpo -c -o es40_lss-FloppyController.obj `if test -f 'FloppyController.cpp'; then $(CYGPATH_W) 'FloppyController.cpp'; else $(CYGPATH_W) '$(srcdir)/FloppyController.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-FloppyController.Tpo $(DEPDIR)/es40_lss-FloppyController.Po
#	$(AM_V_CXX)source='FloppyController.cpp' object='es40_lss-FloppyController.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-FloppyController.obj `if test -f 'FloppyController.cpp'; then $(CYGPATH_W) 'FloppyController.cpp'; else $(CYGPATH_W) '$(srcdir)/FloppyController.cpp'; fi`

es40_lss-Keyboard.o: Keyboard.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Keyboard.o -MD -MP -MF $(DEPDIR)/es40_lss-Keyboard.Tpo -c -o es40_lss-Keyboard.o `test -f 'Keyboard.cpp' || echo '$(srcdir)/'`Keyboard.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Keyboard.Tpo $(DEPDIR)/es40_lss-Keyboard.Po
#	$(AM_V_CXX)source='Keyboard.cpp' object='es40_lss-Keyboard.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Keyboard.o `test -f 'Keyboard.cpp' || echo '$(srcdir)/'`Keyboard.cpp

es40_lss-Keyboard.obj: Keyboard.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Keyboard.obj -MD -MP -MF $(DEPDIR)/es40_lss-Keyboard.Tpo -c -o es40_lss-Keyboard.obj `if test -f 'Keyboard.cpp'; then $(CYGPATH_W) 'Keyboard.cpp'; else $(CYGPATH_W) '$(srcdir)/Keyboard.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Keyboard.Tpo $(DEPDIR)/es40_lss-Keyboard.Po
#	$(AM_V_CXX)source='Keyboard.cpp' object='es40_lss-Keyboard.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Keyboard.obj `if test -f 'Keyboard.cpp'; then $(CYGPATH_W) 'Keyboard.cpp'; else $(CYGPATH_W) '$(srcdir)/Keyboard.cpp'; fi`

es40_lss-lockstep.o: lockstep.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-lockstep.o -MD -MP -MF $(DEPDIR)/es40_lss-lockstep.Tpo -c -o es40_lss-lockstep.o `test -f 'lockstep.cpp' || echo '$(srcdir)/'`lockstep.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-lockstep.Tpo $(DEPDIR)/es40_lss-lockstep.Po
#	$(AM_V_CXX)source='lockstep.cpp' object='es40_lss-lockstep.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-lockstep.o `test -f 'lockstep.cpp' || echo '$(srcdir)/'`lockstep.cpp

es40_lss-lockstep.obj: lockstep.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-lockstep.obj -MD -MP -MF $(DEPDIR)/es40_lss-lockstep.Tpo -c -o es40_lss-lockstep.obj `if test -f 'lockstep.cpp'; then $(CYGPATH_W) 'lockstep.cpp'; else $(CYGPATH_W) '$(srcdir)/lockstep.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-lockstep.Tpo $(DEPDIR)/es40_lss-lockstep.Po
#	$(AM_V_CXX)source='lockstep.cpp' object='es40_lss-lockstep.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-lockstep.obj `if test -f 'lockstep.cpp'; then $(CYGPATH_W) 'lockstep.cpp'; else $(CYGPATH_W) '$(srcdir)/lockstep.cpp'; fi`

es40_lss-PCIDevice.o: PCIDevice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-PCIDevice.o -MD -MP -MF $(DEPDIR)/es40_lss-PCIDevice.Tpo -c -o es40_lss-PCIDevice.o `test -f 'PCIDevice.cpp' || echo '$(srcdir)/'`PCIDevice.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-PCIDevice.Tpo $(DEPDIR)/es40_lss-PCIDevice.Po
#	$(AM_V_CXX)source='PCIDevice.cpp' object='es40_lss-PCIDevice.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-PCIDevice.o `test -f 'PCIDevice.cpp' || echo '$(srcdir)/'`PCIDevice.cpp

es40_lss-PCIDevice.obj: PCIDevice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-PCIDevice.obj -MD -MP -MF $(DEPDIR)/es40_lss-PCIDevice.Tpo -c -o es40_lss-PCIDevice.obj `if test -f 'PCIDevice.cpp'; then $(CYGPATH_W) 'PCIDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/PCIDevice.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-PCIDevice.Tpo $(DEPDIR)/es40_lss-PCIDevice.Po
#	$(AM_V_CXX)source='PCIDevice.cpp' object='es40_lss-PCIDevice.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-PCIDevice.obj `if test -f 'PCIDevice.cpp'; then $(CYGPATH_W) 'PCIDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/PCIDevice.cpp'; fi`

es40_lss-Port80.o: Port80.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Port80.o -MD -MP -MF $(DEPDIR)/es40_lss-Port80.Tpo -c -o es40_lss-Port80.o `test -f 'Port80.cpp' || echo '$(srcdir)/'`Port80.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Port80.Tpo $(DEPDIR)/es40_lss-Port80.Po
#	$(AM_V_CXX)source='Port80.cpp' object='es40_lss-Port80.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Port80.o `test -f 'Port80.cpp' || echo '$(srcdir)/'`Port80.cpp

es40_lss-Port80.obj: Port80.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Port80.obj -MD -MP -MF $(DEPDIR)/es40_lss-Port80.Tpo -c -o es40_lss-Port80.obj `if test -f 'Port80.cpp'; then $(CYGPATH_W) 'Port80.cpp'; else $(CYGPATH_W) '$(srcdir)/Port80.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Port80.Tpo $(DEPDIR)/es40_lss-Port80.Po
#	$(AM_V_CXX)source='Port80.cpp' object='es40_lss-Port80.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Port80.obj `if test -f 'Port80.cpp'; then $(CYGPATH_W) 'Port80.cpp'; else $(CYGPATH_W) '$(srcdir)/Port80.cpp'; fi`

es40_lss-S3Trio64.o: S3Trio64.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-S3Trio64.o -MD -MP -MF $(DEPDIR)/es40_lss-S3Trio64.Tpo -c -o es40_lss-S3Trio64.o `test -f 'S3Trio64.cpp' || echo '$(srcdir)/'`S3Trio64.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-S3Trio64.Tpo $(DEPDIR)/es40_lss-S3Trio64.Po
#	$(AM_V_CXX)source='S3Trio64.cpp' object='es40_lss-S3Trio64.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-S3Trio64.o `test -f 'S3Trio64.cpp' || echo '$(srcdir)/'`S3Trio64.cpp

es40_lss-S3Trio64.obj: S3Trio64.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-S3Trio64.obj -MD -MP -MF $(DEPDIR)/es40_lss-S3Trio64.Tpo -c -o es40_lss-S3Trio64.obj `if test -f 'S3Trio64.cpp'; then $(CYGPATH_W) 'S3Trio64.cpp'; else $(CYGPATH_W) '$(srcdir)/S3Trio64.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-S3Trio64.Tpo $(DEPDIR)/es40_lss-S3Trio64.Po
#	$(AM_V_CXX)source='S3Trio64.cpp' object='es40_lss-S3Trio64.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-S3Trio64.obj `if test -f 'S3Trio64.cpp'; then $(CYGPATH_W) 'S3Trio64.cpp'; else $(CYGPATH_W) '$(srcdir)/S3Trio64.cpp'; fi`

es40_lss-SCSIBus.o: SCSIBus.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-SCSIBus.o -MD -MP -MF $(DEPDIR)/es40_lss-SCSIBus.Tpo -c -o es40_lss-SCSIBus.o `test -f 'SCSIBus.cpp' || echo '$(srcdir)/'`SCSIBus.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-SCSIBus.Tpo $(DEPDIR)/es40_lss-SCSIBus.Po
#	$(AM_V_CXX)source='SCSIBus.cpp' object='es40_lss-SCSIBus.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-SCSIBus.o `test -f 'SCSIBus.cpp' || echo '$(srcdir)/'`SCSIBus.cpp

es40_lss-SCSIBus.obj: SCSIBus.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-SCSIBus.obj -MD -MP -MF $(DEPDIR)/es40_lss-SCSIBus.Tpo -c -o es40_lss-SCSIBus.obj `if test -f 'SCSIBus.cpp'; then $(CYGPATH_W) 'SCSIBus.cpp'; else $(CYGPATH_W) '$(srcdir)/SCSIBus.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-SCSIBus.Tpo $(DEPDIR)/es40_lss-SCSIBus.Po
#	$(AM_V_CXX)source='SCSIBus.cpp' object='es40_lss-SCSIBus.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-SCSIBus.obj `if test -f 'SCSIBus.cpp'; then $(CYGPATH_W) 'SCSIBus.cpp'; else $(CYGPATH_W) '$(srcdir)/SCSIBus.cpp'; fi`

es40_lss-SCSIDevice.o: SCSIDevice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-SCSIDevice.o -MD -MP -MF $(DEPDIR)/es40_lss-SCSIDevice.Tpo -c -o es40_lss-SCSIDevice.o `test -f 'SCSIDevice.cpp' || echo '$(srcdir)/'`SCSIDevice.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-SCSIDevice.Tpo $(DEPDIR)/es40_lss-SCSIDevice.Po
#	$(AM_V_CXX)source='SCSIDevice.cpp' object='es40_lss-SCSIDevice.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-SCSIDevice.o `test -f 'SCSIDevice.cpp' || echo '$(srcdir)/'`SCSIDevice.cpp

es40_lss-SCSIDevice.obj: SCSIDevice.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-SCSIDevice.obj -MD -MP -MF $(DEPDIR)/es40_lss-SCSIDevice.Tpo -c -o es40_lss-SCSIDevice.obj `if test -f 'SCSIDevice.cpp'; then $(CYGPATH_W) 'SCSIDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/SCSIDevice.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-SCSIDevice.Tpo $(DEPDIR)/es40_lss-SCSIDevice.Po
#	$(AM_V_CXX)source='SCSIDevice.cpp' object='es40_lss-SCSIDevice.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-SCSIDevice.obj `if test -f 'SCSIDevice.cpp'; then $(CYGPATH_W) 'SCSIDevice.cpp'; else $(CYGPATH_W) '$(srcdir)/SCSIDevice.cpp'; fi`

es40_lss-Serial.o: Serial.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Serial.o -MD -MP -MF $(DEPDIR)/es40_lss-Serial.Tpo -c -o es40_lss-Serial.o `test -f 'Serial.cpp' || echo '$(srcdir)/'`Serial.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Serial.Tpo $(DEPDIR)/es40_lss-Serial.Po
#	$(AM_V_CXX)source='Serial.cpp' object='es40_lss-Serial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Serial.o `test -f 'Serial.cpp' || echo '$(srcdir)/'`Serial.cpp

es40_lss-Serial.obj: Serial.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Serial.obj -MD -MP -MF $(DEPDIR)/es40_lss-Serial.Tpo -c -o es40_lss-Serial.obj `if test -f 'Serial.cpp'; then $(CYGPATH_W) 'Serial.cpp'; else $(CYGPATH_W) '$(srcdir)/Serial.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Serial.Tpo $(DEPDIR)/es40_lss-Serial.Po
#	$(AM_V_CXX)source='Serial.cpp' object='es40_lss-Serial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Serial.obj `if test -f 'Serial.cpp'; then $(CYGPATH_W) 'Serial.cpp'; else $(CYGPATH_W) '$(srcdir)/Serial.cpp'; fi`

es40_lss-StdAfx.o: StdAfx.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-StdAfx.o -MD -MP -MF $(DEPDIR)/es40_lss-StdAfx.Tpo -c -o es40_lss-StdAfx.o `test -f 'StdAfx.cpp' || echo '$(srcdir)/'`StdAfx.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-StdAfx.Tpo $(DEPDIR)/es40_lss-StdAfx.Po
#	$(AM_V_CXX)source='StdAfx.cpp' object='es40_lss-StdAfx.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-StdAfx.o `test -f 'StdAfx.cpp' || echo '$(srcdir)/'`StdAfx.cpp

es40_lss-StdAfx.obj: StdAfx.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-StdAfx.obj -MD -MP -MF $(DEPDIR)/es40_lss-StdAfx.Tpo -c -o es40_lss-StdAfx.obj `if test -f 'StdAfx.cpp'; then $(CYGPATH_W) 'StdAfx.cpp'; else $(CYGPATH_W) '$(srcdir)/StdAfx.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-StdAfx.Tpo $(DEPDIR)/es40_lss-StdAfx.Po
#	$(AM_V_CXX)source='StdAfx.cpp' object='es40_lss-StdAfx.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-StdAfx.obj `if test -f 'StdAfx.cpp'; then $(CYGPATH_W) 'StdAfx.cpp'; else $(CYGPATH_W) '$(srcdir)/StdAfx.cpp'; fi`

es40_lss-Sym53C810.o: Sym53C810.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Sym53C810.o -MD -MP -MF $(DEPDIR)/es40_lss-Sym53C810.Tpo -c -o es40_lss-Sym53C810.o `test -f 'Sym53C810.cpp' || echo '$(srcdir)/'`Sym53C810.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Sym53C810.Tpo $(DEPDIR)/es40_lss-Sym53C810.Po
#	$(AM_V_CXX)source='Sym53C810.cpp' object='es40_lss-Sym53C810.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Sym53C810.o `test -f 'Sym53C810.cpp' || echo '$(srcdir)/'`Sym53C810.cpp

es40_lss-Sym53C810.obj: Sym53C810.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Sym53C810.obj -MD -MP -MF $(DEPDIR)/es40_lss-Sym53C810.Tpo -c -o es40_lss-Sym53C810.obj `if test -f 'Sym53C810.cpp'; then $(CYGPATH_W) 'Sym53C810.cpp'; else $(CYGPATH_W) '$(srcdir)/Sym53C810.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Sym53C810.Tpo $(DEPDIR)/es40_lss-Sym53C810.Po
#	$(AM_V_CXX)source='Sym53C810.cpp' object='es40_lss-Sym53C810.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Sym53C810.obj `if test -f 'Sym53C810.cpp'; then $(CYGPATH_W) 'Sym53C810.cpp'; else $(CYGPATH_W) '$(srcdir)/Sym53C810.cpp'; fi`

es40_lss-Sym53C895.o: Sym53C895.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Sym53C895.o -MD -MP -MF $(DEPDIR)/es40_lss-Sym53C895.Tpo -c -o es40_lss-Sym53C895.o `test -f 'Sym53C895.cpp' || echo '$(srcdir)/'`Sym53C895.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Sym53C895.Tpo $(DEPDIR)/es40_lss-Sym53C895.Po
#	$(AM_V_CXX)source='Sym53C895.cpp' object='es40_lss-Sym53C895.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Sym53C895.o `test -f 'Sym53C895.cpp' || echo '$(srcdir)/'`Sym53C895.cpp

es40_lss-Sym53C895.obj: Sym53C895.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-Sym53C895.obj -MD -MP -MF $(DEPDIR)/es40_lss-Sym53C895.Tpo -c -o es40_lss-Sym53C895.obj `if test -f 'Sym53C895.cpp'; then $(CYGPATH_W) 'Sym53C895.cpp'; else $(CYGPATH_W) '$(srcdir)/Sym53C895.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-Sym53C895.Tpo $(DEPDIR)/es40_lss-Sym53C895.Po
#	$(AM_V_CXX)source='Sym53C895.cpp' object='es40_lss-Sym53C895.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-Sym53C895.obj `if test -f 'Sym53C895.cpp'; then $(CYGPATH_W) 'Sym53C895.cpp'; else $(CYGPATH_W) '$(srcdir)/Sym53C895.cpp'; fi`

es40_lss-SystemComponent.o: SystemComponent.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-SystemComponent.o -MD -MP -MF $(DEPDIR)/es40_lss-SystemComponent.Tpo -c -o es40_lss-SystemComponent.o `test -f 'SystemComponent.cpp' || echo '$(srcdir)/'`SystemComponent.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-SystemComponent.Tpo $(DEPDIR)/es40_lss-SystemComponent.Po
#	$(AM_V_CXX)source='SystemComponent.cpp' object='es40_lss-SystemComponent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-SystemComponent.o `test -f 'SystemComponent.cpp' || echo '$(srcdir)/'`SystemComponent.cpp

es40_lss-SystemComponent.obj: SystemComponent.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-SystemComponent.obj -MD -MP -MF $(DEPDIR)/es40_lss-SystemComponent.Tpo -c -o es40_lss-SystemComponent.obj `if test -f 'SystemComponent.cpp'; then $(CYGPATH_W) 'SystemComponent.cpp'; else $(CYGPATH_W) '$(srcdir)/SystemComponent.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-SystemComponent.Tpo $(DEPDIR)/es40_lss-SystemComponent.Po
#	$(AM_V_CXX)source='SystemComponent.cpp' object='es40_lss-SystemComponent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-SystemComponent.obj `if test -f 'SystemComponent.cpp'; then $(CYGPATH_W) 'SystemComponent.cpp'; else $(CYGPATH_W) '$(srcdir)/SystemComponent.cpp'; fi`

es40_lss-System.o: System.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-System.o -MD -MP -MF $(DEPDIR)/es40_lss-System.Tpo -c -o es40_lss-System.o `test -f 'System.cpp' || echo '$(srcdir)/'`System.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-System.Tpo $(DEPDIR)/es40_lss-System.Po
#	$(AM_V_CXX)source='System.cpp' object='es40_lss-System.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-System.o `test -f 'System.cpp' || echo '$(srcdir)/'`System.cpp

es40_lss-System.obj: System.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-System.obj -MD -MP -MF $(DEPDIR)/es40_lss-System.Tpo -c -o es40_lss-System.obj `if test -f 'System.cpp'; then $(CYGPATH_W) 'System.cpp'; else $(CYGPATH_W) '$(srcdir)/System.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-System.Tpo $(DEPDIR)/es40_lss-System.Po
#	$(AM_V_CXX)source='System.cpp' object='es40_lss-System.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-System.obj `if test -f 'System.cpp'; then $(CYGPATH_W) 'System.cpp'; else $(CYGPATH_W) '$(srcdir)/System.cpp'; fi`

es40_lss-TraceEngine.o: TraceEngine.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-TraceEngine.o -MD -MP -MF $(DEPDIR)/es40_lss-TraceEngine.Tpo -c -o es40_lss-TraceEngine.o `test -f 'TraceEngine.cpp' || echo '$(srcdir)/'`TraceEngine.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-TraceEngine.Tpo $(DEPDIR)/es40_lss-TraceEngine.Po
#	$(AM_V_CXX)source='TraceEngine.cpp' object='es40_lss-TraceEngine.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-TraceEngine.o `test -f 'TraceEngine.cpp' || echo '$(srcdir)/'`TraceEngine.cpp

es40_lss-TraceEngine.obj: TraceEngine.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-TraceEngine.obj -MD -MP -MF $(DEPDIR)/es40_lss-TraceEngine.Tpo -c -o es40_lss-TraceEngine.obj `if test -f 'TraceEngine.cpp'; then $(CYGPATH_W) 'TraceEngine.cpp'; else $(CYGPATH_W) '$(srcdir)/TraceEngine.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-TraceEngine.Tpo $(DEPDIR)/es40_lss-TraceEngine.Po
#	$(AM_V_CXX)source='TraceEngine.cpp' object='es40_lss-TraceEngine.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-TraceEngine.obj `if test -f 'TraceEngine.cpp'; then $(CYGPATH_W) 'TraceEngine.cpp'; else $(CYGPATH_W) '$(srcdir)/TraceEngine.cpp'; fi`

es40_lss-VGA.o: VGA.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-VGA.o -MD -MP -MF $(DEPDIR)/es40_lss-VGA.Tpo -c -o es40_lss-VGA.o `test -f 'VGA.cpp' || echo '$(srcdir)/'`VGA.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-VGA.Tpo $(DEPDIR)/es40_lss-VGA.Po
#	$(AM_V_CXX)source='VGA.cpp' object='es40_lss-VGA.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-VGA.o `test -f 'VGA.cpp' || echo '$(srcdir)/'`VGA.cpp

es40_lss-VGA.obj: VGA.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT es40_lss-VGA.obj -MD -MP -MF $(DEPDIR)/es40_lss-VGA.Tpo -c -o es40_lss-VGA.obj `if test -f 'VGA.cpp'; then $(CYGPATH_W) 'VGA.cpp'; else $(CYGPATH_W) '$(srcdir)/VGA.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/es40_lss-VGA.Tpo $(DEPDIR)/es40_lss-VGA.Po
#	$(AM_V_CXX)source='VGA.cpp' object='es40_lss-VGA.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o es40_lss-VGA.obj `if test -f 'VGA.cpp'; then $(CYGPATH_W) 'VGA.cpp'; else $(CYGPATH_W) '$(srcdir)/VGA.cpp'; fi`

gui/es40_lss-gui.o: gui/gui.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lss-gui.o -MD -MP -MF gui/$(DEPDIR)/es40_lss-gui.Tpo -c -o gui/es40_lss-gui.o `test -f 'gui/gui.cpp' || echo '$(srcdir)/'`gui/gui.cpp
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lss-gui.Tpo gui/$(DEPDIR)/es40_lss-gui.Po
#	$(AM_V_CXX)source='gui/gui.cpp' object='gui/es40_lss-gui.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lss-gui.o `test -f 'gui/gui.cpp' || echo '$(srcdir)/'`gui/gui.cpp

gui/es40_lss-gui.obj: gui/gui.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lss-gui.obj -MD -MP -MF gui/$(DEPDIR)/es40_lss-gui.Tpo -c -o gui/es40_lss-gui.obj `if test -f 'gui/gui.cpp'; then $(CYGPATH_W) 'gui/gui.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/gui.cpp'; fi`
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lss-gui.Tpo gui/$(DEPDIR)/es40_lss-gui.Po
#	$(AM_V_CXX)source='gui/gui.cpp' object='gui/es40_lss-gui.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lss-gui.obj `if test -f 'gui/gui.cpp'; then $(CYGPATH_W) 'gui/gui.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/gui.cpp'; fi`

gui/es40_lss-gui_x11.o: gui/gui_x11.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lss-gui_x11.o -MD -MP -MF gui/$(DEPDIR)/es40_lss-gui_x11.Tpo -c -o gui/es40_lss-gui_x11.o `test -f 'gui/gui_x11.cpp' || echo '$(srcdir)/'`gui/gui_x11.cpp
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lss-gui_x11.Tpo gui/$(DEPDIR)/es40_lss-gui_x11.Po
#	$(AM_V_CXX)source='gui/gui_x11.cpp' object='gui/es40_lss-gui_x11.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lss-gui_x11.o `test -f 'gui/gui_x11.cpp' || echo '$(srcdir)/'`gui/gui_x11.cpp

gui/es40_lss-gui_x11.obj: gui/gui_x11.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lss-gui_x11.obj -MD -MP -MF gui/$(DEPDIR)/es40_lss-gui_x11.Tpo -c -o gui/es40_lss-gui_x11.obj `if test -f 'gui/gui_x11.cpp'; then $(CYGPATH_W) 'gui/gui_x11.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/gui_x11.cpp'; fi`
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lss-gui_x11.Tpo gui/$(DEPDIR)/es40_lss-gui_x11.Po
#	$(AM_V_CXX)source='gui/gui_x11.cpp' object='gui/es40_lss-gui_x11.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lss-gui_x11.obj `if test -f 'gui/gui_x11.cpp'; then $(CYGPATH_W) 'gui/gui_x11.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/gui_x11.cpp'; fi`

gui/es40_lss-keymap.o: gui/keymap.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lss-keymap.o -MD -MP -MF gui/$(DEPDIR)/es40_lss-keymap.Tpo -c -o gui/es40_lss-keymap.o `test -f 'gui/keymap.cpp' || echo '$(srcdir)/'`gui/keymap.cpp
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lss-keymap.Tpo gui/$(DEPDIR)/es40_lss-keymap.Po
#	$(AM_V_CXX)source='gui/keymap.cpp' object='gui/es40_lss-keymap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lss-keymap.o `test -f 'gui/keymap.cpp' || echo '$(srcdir)/'`gui/keymap.cpp

gui/es40_lss-keymap.obj: gui/keymap.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lss-keymap.obj -MD -MP -MF gui/$(DEPDIR)/es40_lss-keymap.Tpo -c -o gui/es40_lss-keymap.obj `if test -f 'gui/keymap.cpp'; then $(CYGPATH_W) 'gui/keymap.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/keymap.cpp'; fi`
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lss-keymap.Tpo gui/$(DEPDIR)/es40_lss-keymap.Po
#	$(AM_V_CXX)source='gui/keymap.cpp' object='gui/es40_lss-keymap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lss-keymap.obj `if test -f 'gui/keymap.cpp'; then $(CYGPATH_W) 'gui/keymap.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/keymap.cpp'; fi`

gui/es40_lss-scancodes.o: gui/scancodes.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lss-scancodes.o -MD -MP -MF gui/$(DEPDIR)/es40_lss-scancodes.Tpo -c -o gui/es40_lss-scancodes.o `test -f 'gui/scancodes.cpp' || echo '$(srcdir)/'`gui/scancodes.cpp
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lss-scancodes.Tpo gui/$(DEPDIR)/es40_lss-scancodes.Po
#	$(AM_V_CXX)source='gui/scancodes.cpp' object='gui/es40_lss-scancodes.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lss-scancodes.o `test -f 'gui/scancodes.cpp' || echo '$(srcdir)/'`gui/scancodes.cpp

gui/es40_lss-scancodes.obj: gui/scancodes.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lss-scancodes.obj -MD -MP -MF gui/$(DEPDIR)/es40_lss-scancodes.Tpo -c -o gui/es40_lss-scancodes.obj `if test -f 'gui/scancodes.cpp'; then $(CYGPATH_W) 'gui/scancodes.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/scancodes.cpp'; fi`
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lss-scancodes.Tpo gui/$(DEPDIR)/es40_lss-scancodes.Po
#	$(AM_V_CXX)source='gui/scancodes.cpp' object='gui/es40_lss-scancodes.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lss-scancodes.obj `if test -f 'gui/scancodes.cpp'; then $(CYGPATH_W) 'gui/scancodes.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/scancodes.cpp'; fi`

gui/es40_lss-sdl.o: gui/sdl.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lss-sdl.o -MD -MP -MF gui/$(DEPDIR)/es40_lss-sdl.Tpo -c -o gui/es40_lss-sdl.o `test -f 'gui/sdl.cpp' || echo '$(srcdir)/'`gui/sdl.cpp
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lss-sdl.Tpo gui/$(DEPDIR)/es40_lss-sdl.Po
#	$(AM_V_CXX)source='gui/sdl.cpp' object='gui/es40_lss-sdl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lss-sdl.o `test -f 'gui/sdl.cpp' || echo '$(srcdir)/'`gui/sdl.cpp

gui/es40_lss-sdl.obj: gui/sdl.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT gui/es40_lss-sdl.obj -MD -MP -MF gui/$(DEPDIR)/es40_lss-sdl.Tpo -c -o gui/es40_lss-sdl.obj `if test -f 'gui/sdl.cpp'; then $(CYGPATH_W) 'gui/sdl.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/sdl.cpp'; fi`
	$(AM_V_at)$(am__mv) gui/$(DEPDIR)/es40_lss-sdl.Tpo gui/$(DEPDIR)/es40_lss-sdl.Po
#	$(AM_V_CXX)source='gui/sdl.cpp' object='gui/es40_lss-sdl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o gui/es40_lss-sdl.obj `if test -f 'gui/sdl.cpp'; then $(CYGPATH_W) 'gui/sdl.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/sdl.cpp'; fi`

base/es40_lss-Bugcheck.o: base/Bugcheck.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-Bugcheck.o -MD -MP -MF base/$(DEPDIR)/es40_lss-Bugcheck.Tpo -c -o base/es40_lss-Bugcheck.o `test -f 'base/Bugcheck.cpp' || echo '$(srcdir)/'`base/Bugcheck.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-Bugcheck.Tpo base/$(DEPDIR)/es40_lss-Bugcheck.Po
#	$(AM_V_CXX)source='base/Bugcheck.cpp' object='base/es40_lss-Bugcheck.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-Bugcheck.o `test -f 'base/Bugcheck.cpp' || echo '$(srcdir)/'`base/Bugcheck.cpp

base/es40_lss-Bugcheck.obj: base/Bugcheck.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-Bugcheck.obj -MD -MP -MF base/$(DEPDIR)/es40_lss-Bugcheck.Tpo -c -o base/es40_lss-Bugcheck.obj `if test -f 'base/Bugcheck.cpp'; then $(CYGPATH_W) 'base/Bugcheck.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Bugcheck.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-Bugcheck.Tpo base/$(DEPDIR)/es40_lss-Bugcheck.Po
#	$(AM_V_CXX)source='base/Bugcheck.cpp' object='base/es40_lss-Bugcheck.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-Bugcheck.obj `if test -f 'base/Bugcheck.cpp'; then $(CYGPATH_W) 'base/Bugcheck.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Bugcheck.cpp'; fi`

base/es40_lss-ErrorHandler.o: base/ErrorHandler.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-ErrorHandler.o -MD -MP -MF base/$(DEPDIR)/es40_lss-ErrorHandler.Tpo -c -o base/es40_lss-ErrorHandler.o `test -f 'base/ErrorHandler.cpp' || echo '$(srcdir)/'`base/ErrorHandler.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-ErrorHandler.Tpo base/$(DEPDIR)/es40_lss-ErrorHandler.Po
#	$(AM_V_CXX)source='base/ErrorHandler.cpp' object='base/es40_lss-ErrorHandler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-ErrorHandler.o `test -f 'base/ErrorHandler.cpp' || echo '$(srcdir)/'`base/ErrorHandler.cpp

base/es40_lss-ErrorHandler.obj: base/ErrorHandler.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-ErrorHandler.obj -MD -MP -MF base/$(DEPDIR)/es40_lss-ErrorHandler.Tpo -c -o base/es40_lss-ErrorHandler.obj `if test -f 'base/ErrorHandler.cpp'; then $(CYGPATH_W) 'base/ErrorHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/base/ErrorHandler.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-ErrorHandler.Tpo base/$(DEPDIR)/es40_lss-ErrorHandler.Po
#	$(AM_V_CXX)source='base/ErrorHandler.cpp' object='base/es40_lss-ErrorHandler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-ErrorHandler.obj `if test -f 'base/ErrorHandler.cpp'; then $(CYGPATH_W) 'base/ErrorHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/base/ErrorHandler.cpp'; fi`

base/es40_lss-Event.o: base/Event.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-Event.o -MD -MP -MF base/$(DEPDIR)/es40_lss-Event.Tpo -c -o base/es40_lss-Event.o `test -f 'base/Event.cpp' || echo '$(srcdir)/'`base/Event.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-Event.Tpo base/$(DEPDIR)/es40_lss-Event.Po
#	$(AM_V_CXX)source='base/Event.cpp' object='base/es40_lss-Event.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-Event.o `test -f 'base/Event.cpp' || echo '$(srcdir)/'`base/Event.cpp

base/es40_lss-Event.obj: base/Event.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-Event.obj -MD -MP -MF base/$(DEPDIR)/es40_lss-Event.Tpo -c -o base/es40_lss-Event.obj `if test -f 'base/Event.cpp'; then $(CYGPATH_W) 'base/Event.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Event.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-Event.Tpo base/$(DEPDIR)/es40_lss-Event.Po
#	$(AM_V_CXX)source='base/Event.cpp' object='base/es40_lss-Event.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-Event.obj `if test -f 'base/Event.cpp'; then $(CYGPATH_W) 'base/Event.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Event.cpp'; fi`

base/es40_lss-Exception.o: base/Exception.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-Exception.o -MD -MP -MF base/$(DEPDIR)/es40_lss-Exception.Tpo -c -o base/es40_lss-Exception.o `test -f 'base/Exception.cpp' || echo '$(srcdir)/'`base/Exception.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-Exception.Tpo base/$(DEPDIR)/es40_lss-Exception.Po
#	$(AM_V_CXX)source='base/Exception.cpp' object='base/es40_lss-Exception.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-Exception.o `test -f 'base/Exception.cpp' || echo '$(srcdir)/'`base/Exception.cpp

base/es40_lss-Exception.obj: base/Exception.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-Exception.obj -MD -MP -MF base/$(DEPDIR)/es40_lss-Exception.Tpo -c -o base/es40_lss-Exception.obj `if test -f 'base/Exception.cpp'; then $(CYGPATH_W) 'base/Exception.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Exception.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-Exception.Tpo base/$(DEPDIR)/es40_lss-Exception.Po
#	$(AM_V_CXX)source='base/Exception.cpp' object='base/es40_lss-Exception.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-Exception.obj `if test -f 'base/Exception.cpp'; then $(CYGPATH_W) 'base/Exception.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Exception.cpp'; fi`

base/es40_lss-Mutex.o: base/Mutex.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-Mutex.o -MD -MP -MF base/$(DEPDIR)/es40_lss-Mutex.Tpo -c -o base/es40_lss-Mutex.o `test -f 'base/Mutex.cpp' || echo '$(srcdir)/'`base/Mutex.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-Mutex.Tpo base/$(DEPDIR)/es40_lss-Mutex.Po
#	$(AM_V_CXX)source='base/Mutex.cpp' object='base/es40_lss-Mutex.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-Mutex.o `test -f 'base/Mutex.cpp' || echo '$(srcdir)/'`base/Mutex.cpp

base/es40_lss-Mutex.obj: base/Mutex.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-Mutex.obj -MD -MP -MF base/$(DEPDIR)/es40_lss-Mutex.Tpo -c -o base/es40_lss-Mutex.obj `if test -f 'base/Mutex.cpp'; then $(CYGPATH_W) 'base/Mutex.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Mutex.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-Mutex.Tpo base/$(DEPDIR)/es40_lss-Mutex.Po
#	$(AM_V_CXX)source='base/Mutex.cpp' object='base/es40_lss-Mutex.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-Mutex.obj `if test -f 'base/Mutex.cpp'; then $(CYGPATH_W) 'base/Mutex.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Mutex.cpp'; fi`

base/es40_lss-NumberFormatter.o: base/NumberFormatter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-NumberFormatter.o -MD -MP -MF base/$(DEPDIR)/es40_lss-NumberFormatter.Tpo -c -o base/es40_lss-NumberFormatter.o `test -f 'base/NumberFormatter.cpp' || echo '$(srcdir)/'`base/NumberFormatter.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-NumberFormatter.Tpo base/$(DEPDIR)/es40_lss-NumberFormatter.Po
#	$(AM_V_CXX)source='base/NumberFormatter.cpp' object='base/es40_lss-NumberFormatter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-NumberFormatter.o `test -f 'base/NumberFormatter.cpp' || echo '$(srcdir)/'`base/NumberFormatter.cpp

base/es40_lss-NumberFormatter.obj: base/NumberFormatter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-NumberFormatter.obj -MD -MP -MF base/$(DEPDIR)/es40_lss-NumberFormatter.Tpo -c -o base/es40_lss-NumberFormatter.obj `if test -f 'base/NumberFormatter.cpp'; then $(CYGPATH_W) 'base/NumberFormatter.cpp'; else $(CYGPATH_W) '$(srcdir)/base/NumberFormatter.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-NumberFormatter.Tpo base/$(DEPDIR)/es40_lss-NumberFormatter.Po
#	$(AM_V_CXX)source='base/NumberFormatter.cpp' object='base/es40_lss-NumberFormatter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-NumberFormatter.obj `if test -f 'base/NumberFormatter.cpp'; then $(CYGPATH_W) 'base/NumberFormatter.cpp'; else $(CYGPATH_W) '$(srcdir)/base/NumberFormatter.cpp'; fi`

base/es40_lss-RefCountedObject.o: base/RefCountedObject.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-RefCountedObject.o -MD -MP -MF base/$(DEPDIR)/es40_lss-RefCountedObject.Tpo -c -o base/es40_lss-RefCountedObject.o `test -f 'base/RefCountedObject.cpp' || echo '$(srcdir)/'`base/RefCountedObject.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-RefCountedObject.Tpo base/$(DEPDIR)/es40_lss-RefCountedObject.Po
#	$(AM_V_CXX)source='base/RefCountedObject.cpp' object='base/es40_lss-RefCountedObject.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-RefCountedObject.o `test -f 'base/RefCountedObject.cpp' || echo '$(srcdir)/'`base/RefCountedObject.cpp

base/es40_lss-RefCountedObject.obj: base/RefCountedObject.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-RefCountedObject.obj -MD -MP -MF base/$(DEPDIR)/es40_lss-RefCountedObject.Tpo -c -o base/es40_lss-RefCountedObject.obj `if test -f 'base/RefCountedObject.cpp'; then $(CYGPATH_W) 'base/RefCountedObject.cpp'; else $(CYGPATH_W) '$(srcdir)/base/RefCountedObject.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-RefCountedObject.Tpo base/$(DEPDIR)/es40_lss-RefCountedObject.Po
#	$(AM_V_CXX)source='base/RefCountedObject.cpp' object='base/es40_lss-RefCountedObject.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-RefCountedObject.obj `if test -f 'base/RefCountedObject.cpp'; then $(CYGPATH_W) 'base/RefCountedObject.cpp'; else $(CYGPATH_W) '$(srcdir)/base/RefCountedObject.cpp'; fi`

base/es40_lss-Runnable.o: base/Runnable.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-Runnable.o -MD -MP -MF base/$(DEPDIR)/es40_lss-Runnable.Tpo -c -o base/es40_lss-Runnable.o `test -f 'base/Runnable.cpp' || echo '$(srcdir)/'`base/Runnable.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-Runnable.Tpo base/$(DEPDIR)/es40_lss-Runnable.Po
#	$(AM_V_CXX)source='base/Runnable.cpp' object='base/es40_lss-Runnable.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-Runnable.o `test -f 'base/Runnable.cpp' || echo '$(srcdir)/'`base/Runnable.cpp

base/es40_lss-Runnable.obj: base/Runnable.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-Runnable.obj -MD -MP -MF base/$(DEPDIR)/es40_lss-Runnable.Tpo -c -o base/es40_lss-Runnable.obj `if test -f 'base/Runnable.cpp'; then $(CYGPATH_W) 'base/Runnable.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Runnable.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-Runnable.Tpo base/$(DEPDIR)/es40_lss-Runnable.Po
#	$(AM_V_CXX)source='base/Runnable.cpp' object='base/es40_lss-Runnable.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-Runnable.obj `if test -f 'base/Runnable.cpp'; then $(CYGPATH_W) 'base/Runnable.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Runnable.cpp'; fi`

base/es40_lss-RWLock.o: base/RWLock.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-RWLock.o -MD -MP -MF base/$(DEPDIR)/es40_lss-RWLock.Tpo -c -o base/es40_lss-RWLock.o `test -f 'base/RWLock.cpp' || echo '$(srcdir)/'`base/RWLock.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-RWLock.Tpo base/$(DEPDIR)/es40_lss-RWLock.Po
#	$(AM_V_CXX)source='base/RWLock.cpp' object='base/es40_lss-RWLock.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-RWLock.o `test -f 'base/RWLock.cpp' || echo '$(srcdir)/'`base/RWLock.cpp

base/es40_lss-RWLock.obj: base/RWLock.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-RWLock.obj -MD -MP -MF base/$(DEPDIR)/es40_lss-RWLock.Tpo -c -o base/es40_lss-RWLock.obj `if test -f 'base/RWLock.cpp'; then $(CYGPATH_W) 'base/RWLock.cpp'; else $(CYGPATH_W) '$(srcdir)/base/RWLock.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-RWLock.Tpo base/$(DEPDIR)/es40_lss-RWLock.Po
#	$(AM_V_CXX)source='base/RWLock.cpp' object='base/es40_lss-RWLock.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-RWLock.obj `if test -f 'base/RWLock.cpp'; then $(CYGPATH_W) 'base/RWLock.cpp'; else $(CYGPATH_W) '$(srcdir)/base/RWLock.cpp'; fi`

base/es40_lss-Semaphore.o: base/Semaphore.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-Semaphore.o -MD -MP -MF base/$(DEPDIR)/es40_lss-Semaphore.Tpo -c -o base/es40_lss-Semaphore.o `test -f 'base/Semaphore.cpp' || echo '$(srcdir)/'`base/Semaphore.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-Semaphore.Tpo base/$(DEPDIR)/es40_lss-Semaphore.Po
#	$(AM_V_CXX)source='base/Semaphore.cpp' object='base/es40_lss-Semaphore.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-Semaphore.o `test -f 'base/Semaphore.cpp' || echo '$(srcdir)/'`base/Semaphore.cpp

base/es40_lss-Semaphore.obj: base/Semaphore.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-Semaphore.obj -MD -MP -MF base/$(DEPDIR)/es40_lss-Semaphore.Tpo -c -o base/es40_lss-Semaphore.obj `if test -f 'base/Semaphore.cpp'; then $(CYGPATH_W) 'base/Semaphore.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Semaphore.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-Semaphore.Tpo base/$(DEPDIR)/es40_lss-Semaphore.Po
#	$(AM_V_CXX)source='base/Semaphore.cpp' object='base/es40_lss-Semaphore.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-Semaphore.obj `if test -f 'base/Semaphore.cpp'; then $(CYGPATH_W) 'base/Semaphore.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Semaphore.cpp'; fi`

base/es40_lss-SignalHandler.o: base/SignalHandler.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-SignalHandler.o -MD -MP -MF base/$(DEPDIR)/es40_lss-SignalHandler.Tpo -c -o base/es40_lss-SignalHandler.o `test -f 'base/SignalHandler.cpp' || echo '$(srcdir)/'`base/SignalHandler.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-SignalHandler.Tpo base/$(DEPDIR)/es40_lss-SignalHandler.Po
#	$(AM_V_CXX)source='base/SignalHandler.cpp' object='base/es40_lss-SignalHandler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-SignalHandler.o `test -f 'base/SignalHandler.cpp' || echo '$(srcdir)/'`base/SignalHandler.cpp

base/es40_lss-SignalHandler.obj: base/SignalHandler.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-SignalHandler.obj -MD -MP -MF base/$(DEPDIR)/es40_lss-SignalHandler.Tpo -c -o base/es40_lss-SignalHandler.obj `if test -f 'base/SignalHandler.cpp'; then $(CYGPATH_W) 'base/SignalHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/base/SignalHandler.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-SignalHandler.Tpo base/$(DEPDIR)/es40_lss-SignalHandler.Po
#	$(AM_V_CXX)source='base/SignalHandler.cpp' object='base/es40_lss-SignalHandler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-SignalHandler.obj `if test -f 'base/SignalHandler.cpp'; then $(CYGPATH_W) 'base/SignalHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/base/SignalHandler.cpp'; fi`

base/es40_lss-ThreadLocal.o: base/ThreadLocal.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-ThreadLocal.o -MD -MP -MF base/$(DEPDIR)/es40_lss-ThreadLocal.Tpo -c -o base/es40_lss-ThreadLocal.o `test -f 'base/ThreadLocal.cpp' || echo '$(srcdir)/'`base/ThreadLocal.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-ThreadLocal.Tpo base/$(DEPDIR)/es40_lss-ThreadLocal.Po
#	$(AM_V_CXX)source='base/ThreadLocal.cpp' object='base/es40_lss-ThreadLocal.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-ThreadLocal.o `test -f 'base/ThreadLocal.cpp' || echo '$(srcdir)/'`base/ThreadLocal.cpp

base/es40_lss-ThreadLocal.obj: base/ThreadLocal.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-ThreadLocal.obj -MD -MP -MF base/$(DEPDIR)/es40_lss-ThreadLocal.Tpo -c -o base/es40_lss-ThreadLocal.obj `if test -f 'base/ThreadLocal.cpp'; then $(CYGPATH_W) 'base/ThreadLocal.cpp'; else $(CYGPATH_W) '$(srcdir)/base/ThreadLocal.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-ThreadLocal.Tpo base/$(DEPDIR)/es40_lss-ThreadLocal.Po
#	$(AM_V_CXX)source='base/ThreadLocal.cpp' object='base/es40_lss-ThreadLocal.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-ThreadLocal.obj `if test -f 'base/ThreadLocal.cpp'; then $(CYGPATH_W) 'base/ThreadLocal.cpp'; else $(CYGPATH_W) '$(srcdir)/base/ThreadLocal.cpp'; fi`

base/es40_lss-Thread.o: base/Thread.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-Thread.o -MD -MP -MF base/$(DEPDIR)/es40_lss-Thread.Tpo -c -o base/es40_lss-Thread.o `test -f 'base/Thread.cpp' || echo '$(srcdir)/'`base/Thread.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-Thread.Tpo base/$(DEPDIR)/es40_lss-Thread.Po
#	$(AM_V_CXX)source='base/Thread.cpp' object='base/es40_lss-Thread.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-Thread.o `test -f 'base/Thread.cpp' || echo '$(srcdir)/'`base/Thread.cpp

base/es40_lss-Thread.obj: base/Thread.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-Thread.obj -MD -MP -MF base/$(DEPDIR)/es40_lss-Thread.Tpo -c -o base/es40_lss-Thread.obj `if test -f 'base/Thread.cpp'; then $(CYGPATH_W) 'base/Thread.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Thread.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-Thread.Tpo base/$(DEPDIR)/es40_lss-Thread.Po
#	$(AM_V_CXX)source='base/Thread.cpp' object='base/es40_lss-Thread.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-Thread.obj `if test -f 'base/Thread.cpp'; then $(CYGPATH_W) 'base/Thread.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Thread.cpp'; fi`

base/es40_lss-Timestamp.o: base/Timestamp.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-Timestamp.o -MD -MP -MF base/$(DEPDIR)/es40_lss-Timestamp.Tpo -c -o base/es40_lss-Timestamp.o `test -f 'base/Timestamp.cpp' || echo '$(srcdir)/'`base/Timestamp.cpp
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-Timestamp.Tpo base/$(DEPDIR)/es40_lss-Timestamp.Po
#	$(AM_V_CXX)source='base/Timestamp.cpp' object='base/es40_lss-Timestamp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-Timestamp.o `test -f 'base/Timestamp.cpp' || echo '$(srcdir)/'`base/Timestamp.cpp

base/es40_lss-Timestamp.obj: base/Timestamp.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -MT base/es40_lss-Timestamp.obj -MD -MP -MF base/$(DEPDIR)/es40_lss-Timestamp.Tpo -c -o base/es40_lss-Timestamp.obj `if test -f 'base/Timestamp.cpp'; then $(CYGPATH_W) 'base/Timestamp.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Timestamp.cpp'; fi`
	$(AM_V_at)$(am__mv) base/$(DEPDIR)/es40_lss-Timestamp.Tpo base/$(DEPDIR)/es40_lss-Timestamp.Po
#	$(AM_V_CXX)source='base/Timestamp.cpp' object='base/es40_lss-Timestamp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(es40_lss_CXXFLAGS) $(CXXFLAGS) -c -o base/es40_lss-Timestamp.obj `if test -f 'base/Timestamp.cpp'; then $(CYGPATH_W) 'base/Timestamp.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Timestamp.cpp'; fi`

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS) config.h
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-rm -f base/$(DEPDIR)/$(am__dirstamp)
	-rm -f base/$(am__dirstamp)
	-rm -f gui/$(DEPDIR)/$(am__dirstamp)
	-rm -f gui/$(am__dirstamp)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR) base/$(DEPDIR) gui/$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-hdr distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR) base/$(DEPDIR) gui/$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: all install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean \
	clean-binPROGRAMS clean-generic cscopelist-am ctags ctags-am \
	distclean distclean-compile distclean-generic distclean-hdr \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-binPROGRAMS install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags tags-am uninstall \
	uninstall-am uninstall-binPROGRAMS

.PRECIOUS: Makefile


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
