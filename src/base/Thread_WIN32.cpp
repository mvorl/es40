/* ES40 emulator.
 * Copyright (C) 2007-2008 by the ES40 Emulator Project
 *
 * WWW    : http://www.es40.org
 * E-mail : camiel@es40.org
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * 
 * Although this is not required, the author would appreciate being notified of, 
 * and receiving any modifications you may make to the source code that might serve
 * the general public.
 *
 * Parts of this file based upon the Poco C++ Libraries, which is Copyright (C) 
 * 2004-2006, Applied Informatics Software Engineering GmbH. and Contributors.
 */

/**
 * $Id: Thread_WIN32.cpp,v 1.1 2008/05/31 15:47:29 iamcamiel Exp $
 *
 * X-1.1        Camiel Vanderhoeven                             31-MAY-2008
 *      Initial version for ES40 emulator.
 **/

//
// Thread_WIN32.h
//
// $Id: Thread_WIN32.cpp,v 1.1 2008/05/31 15:47:29 iamcamiel Exp $
//
// Library: Foundation
// Package: Threading
// Module:  Thread
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#include "Thread_WIN32.h"
#include "Exception.h"
#include <process.h>

DWORD CThreadImpl::_currentKey = TLS_OUT_OF_INDEXES;

CThreadImpl::CThreadImpl(): _pTarget(0), _thread(0), _prio(PRIO_NORMAL_IMPL)
{
	if (_currentKey == TLS_OUT_OF_INDEXES)
	{
		_currentKey = TlsAlloc();
		if (_currentKey == TLS_OUT_OF_INDEXES)
			throw CSystemException("cannot allocate thread context key");
	}
}

			
CThreadImpl::~CThreadImpl()
{
	if (_thread) CloseHandle(_thread);
}


void CThreadImpl::setPriorityImpl(int prio)
{
	if (prio != _prio)
	{
		_prio = prio;
		if (_thread)
		{
			if (SetThreadPriority(_thread, _prio) == 0)
				throw CSystemException("cannot set thread priority");
		}
	}
}


void CThreadImpl::startImpl(CRunnable& target)
{
	if (_thread) throw CSystemException("thread already running");

	_pTarget = &target;
#if defined(_DLL)
	DWORD threadId;
	_thread = CreateThread(NULL, 0, entry, this, 0, &threadId);
#else
	unsigned threadId;
	_thread = (HANDLE) _beginthreadex(NULL, 0, entry, this, 0, &threadId);
#endif
	if (!_thread)
		throw CSystemException("cannot create thread");
	if (_prio != PRIO_NORMAL_IMPL && !SetThreadPriority(_thread, _prio))
		throw CSystemException("cannot set thread priority");
}


void CThreadImpl::joinImpl()
{
	if (!_thread) return;

	switch (WaitForSingleObject(_thread, INFINITE))
	{
	case WAIT_OBJECT_0:
		return;
	default:
		throw CSystemException("cannot join thread");
	}
}


bool CThreadImpl::joinImpl(long milliseconds)
{
	if (!_thread) return true;

	switch (WaitForSingleObject(_thread, milliseconds + 1))
	{
	case WAIT_TIMEOUT:
		return false;
	case WAIT_OBJECT_0:
		return true;
	default:
		throw CSystemException("cannot join thread");
	}
}


bool CThreadImpl::isRunningImpl() const
{
	if (_thread)
	{
		DWORD ec = 0;
		return GetExitCodeThread(_thread, &ec) && ec == STILL_ACTIVE;
	}
	return false;
}


CThreadImpl* CThreadImpl::currentImpl()
{
	if (_currentKey == TLS_OUT_OF_INDEXES)
		return 0;
	else
		return (CThreadImpl*) TlsGetValue(_currentKey);
}

#if defined(_DLL)
DWORD WINAPI CThreadImpl::entry(LPVOID pThread)
#else
unsigned __stdcall CThreadImpl::entry(void* pThread)
#endif
{
	TlsSetValue(_currentKey, pThread);
	try
	{
		reinterpret_cast<CThreadImpl*>(pThread)->_pTarget->run();
	}
	catch (CException& exc)
	{
      printf("Thread has terminated with an unexpected %s exception:\n",exc.className());
      printf("  %s\n",exc.displayText());
	}
	catch (std::exception& exc)
	{
      printf("Thread has terminated with an unexpected %s exception.\n",exc.what());
	}
	catch (...)
	{
      printf("Thread has terminated with an unexpected exception.\n");
	}
	return 0;
}
