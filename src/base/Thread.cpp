/* ES40 emulator.
 * Copyright (C) 2007-2008 by the ES40 Emulator Project
 *
 * WWW    : http://www.es40.org
 * E-mail : camiel@es40.org
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * 
 * Although this is not required, the author would appreciate being notified of, 
 * and receiving any modifications you may make to the source code that might serve
 * the general public.
 *
 * Parts of this file based upon the Poco C++ Libraries, which is Copyright (C) 
 * 2004-2006, Applied Informatics Software Engineering GmbH. and Contributors.
 */

/**
 * $Id: Thread.cpp,v 1.1 2008/05/31 15:47:28 iamcamiel Exp $
 *
 * X-1.1        Camiel Vanderhoeven                             31-MAY-2008
 *      Initial version for ES40 emulator.
 **/

//
// Thread.cpp
//
// $Id: Thread.cpp,v 1.1 2008/05/31 15:47:28 iamcamiel Exp $
//
// Library: Foundation
// Package: Threading
// Module:  Thread
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Mutex.h"
#include "Thread.h"
#include "Exception.h"
#include "ThreadLocal.h"
#include <sstream>


#if defined(POCO_OS_FAMILY_WINDOWS)
#include "Thread_WIN32.cpp"
#else
#include "Thread_POSIX.cpp"
#endif

CThread::CThread(): 
	_id(uniqueId()), 
	_name(makeName()), 
	_pTLS(0)
{
}


CThread::CThread(const std::string& name): 
	_id(uniqueId()), 
	_name(name), 
	_pTLS(0)
{
}


CThread::~CThread()
{
	delete _pTLS;
}


void CThread::setPriority(Priority prio)
{
	setPriorityImpl(prio);
}


CThread::Priority CThread::getPriority() const
{
	return Priority(getPriorityImpl());
}


void CThread::start(CRunnable& target)
{
	startImpl(target);
}


void CThread::join()
{
	joinImpl();
}


void CThread::join(long milliseconds)
{
	if (!joinImpl(milliseconds))
		throw CTimeoutException();
}


bool CThread::tryJoin(long milliseconds)
{
	return joinImpl(milliseconds);
}


CThreadLocalStorage& CThread::tls()
{
	if (!_pTLS)
		_pTLS = new CThreadLocalStorage;
	return *_pTLS;
}


void CThread::clearTLS()
{
	if (_pTLS)
	{
		delete _pTLS;
		_pTLS = 0;
	}
}


std::string CThread::makeName()
{
	std::ostringstream name;
	name << '#' << _id;
	return name.str();
}


int CThread::uniqueId()
{
	static CFastMutex mtx;
	CFastMutex::CScopedLock lock(&mtx);

	static unsigned count = 0;
	++count;
	return count;
}


void CThread::setName(const std::string& name)
{
	CFastMutex::CScopedLock lock(&_mutex);

	_name = name;
}
