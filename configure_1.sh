#! /bin/sh

################################################################################
# ES40 emulator.
# Copyright (C) 2007-2008 by the ES40 Emulator Project
#
# Website: http://www.es40.org
# E-mail : camiel@es40.org
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 
# 02110-1301, USA.
# 
# Although this is not required, the author would appreciate being notified of, 
# and receiving any modifications you may make to the source code that might serve
# the general public.
#
################################################################################
#
# $Id: configure_1.m4,v 1.7 2008/05/31 15:47:07 iamcamiel Exp $
#
# X-1.7      Camiel Vanderhoeven                      31-MAY-2008
#      Add parts of Poco.
#
# X-1.6      Camiel Vanderhoeven                          29-APR-2008
#     Added CHECK_MEM_RANGES and DUMP_MEMMAP
#
# X-1.5      Camiel Vanderhoeven                          03-APR-2008
#     Fixed typo
#
# X-1.4      Camiel Vanderhoeven                          03-APR-2008
#     Added MIPS_ESTIMATE and HAVE_NEW_FP
#
# X-1.3      Camiel Vanderhoeven                          02-APR-2008
#     More questions, better structure.
#
################################################################################










#! /bin/sh
#
# Configure debugging options for es40.
#
echo "This is the debug-options configuration script for the ES40 emulator"
echo "If you don't want any debugging options enabled, answer YES to the"
echo "following question"
echo ""
cat >src/config_debug.h <<EOF
// This is config_debug.h
//
// This file contains the debug configuration options.
// This file was generated by configure_1.sh
//
// \$Id\$
EOF
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="yes"
    else
      while true; do
        echo -n "Do you want the defaults for all options? (yes, no) [yes]: "
        read answer
        if test "X$answer" = "X"; then
          answer="yes"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    all_default="yes"
  elif test "$answer" = "no"; then
    all_default="no"
  fi


  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to show the cycle counter? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "yes" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to show the cycle counter
#define HIDE_COUNTER 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to show the cycle counter
#undef HIDE_COUNTER
EOF
  fi

  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to show estimate speed? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to show estimate speed
#define MIPS_ESTIMATE 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to show estimate speed
#undef MIPS_ESTIMATE
EOF
  fi

  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to show memory map? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to show memory map
#define DUMP_MEMMAP 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to show memory map
#undef DUMP_MEMMAP
EOF
  fi


  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="yes"
    else
      while true; do
        echo -n "Do you want to check for overlapping of memory ranges? (yes, no) [yes]: "
        read answer
        if test "X$answer" = "X"; then
          answer="yes"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to check for overlapping of memory ranges
#define CHECK_MEM_RANGES 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to check for overlapping of memory ranges
#undef CHECK_MEM_RANGES
EOF
  fi


  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to use the new floating-point implementation? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to use the new floating-point implementation
#define HAVE_NEW_FP 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to use the new floating-point implementation
#undef HAVE_NEW_FP
EOF
  fi


  # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable VGA debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable VGA debugging
#define DEBUG_VGA 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable VGA debugging
#undef DEBUG_VGA
EOF
  fi


  # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable Serial Port debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Serial Port debugging
#define DEBUG_SERIAL 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Serial Port debugging
#undef DEBUG_SERIAL
EOF
  fi


    
  # ask a higher-level question, with a response of yes, no, or some
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: action on some
# arg 6: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 7: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable IDE debugging options? (yes, no, some) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        elif test "$answer" = "s" -o "$answer" = "so" -o "$answer" = "som" -o "$answer" = "some"; then
          answer="some"
          break
        fi
        echo "Invalid value: please answer yes no or some"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    ide="yes"
  elif test "$answer" = "no"; then
    ide="no"
  elif test "$answer" = "some"; then
    ide=""
  fi

    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$ide" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable IDE General debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$ide"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE General debugging
#define DEBUG_IDE 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE General debugging
#undef DEBUG_IDE
EOF
  fi


    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$ide" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable IDE Busmaster debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$ide"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE Busmaster debugging
#define DEBUG_IDE_BUSMASTER 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE Busmaster debugging
#undef DEBUG_IDE_BUSMASTER
EOF
  fi


    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$ide" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable IDE Command debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$ide"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE Command debugging
#define DEBUG_IDE_COMMAND 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE Command debugging
#undef DEBUG_IDE_COMMAND
EOF
  fi


    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$ide" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable IDE CMD debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$ide"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE CMD debugging
#define DEBUG_IDE_CMD 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE CMD debugging
#undef DEBUG_IDE_CMD
EOF
  fi


    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$ide" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable IDE DMA debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$ide"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE DMA debugging
#define DEBUG_IDE_DMA 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE DMA debugging
#undef DEBUG_IDE_DMA
EOF
  fi


    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$ide" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable IDE Interrupt debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$ide"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE Interrupt debugging
#define DEBUG_IDE_INTERRUPT 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE Interrupt debugging
#undef DEBUG_IDE_INTERRUPT
EOF
  fi


    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$ide" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable IDE Command Register debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$ide"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE Command Register debugging
#define DEBUG_IDE_REG_COMMAND 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE Command Register debugging
#undef DEBUG_IDE_REG_COMMAND
EOF
  fi


    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$ide" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable IDE Control Register debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$ide"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE Control Register debugging
#define DEBUG_IDE_REG_CONTROL 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE Control Register debugging
#undef DEBUG_IDE_REG_CONTROL
EOF
  fi


    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$ide" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable IDE ATAPI Packet debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$ide"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE ATAPI Packet debugging
#define DEBUG_IDE_PACKET 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE ATAPI Packet debugging
#undef DEBUG_IDE_PACKET
EOF
  fi


    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$ide" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable IDE Thread debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$ide"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE Thread debugging
#define DEBUG_IDE_THREADS 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE Thread debugging
#undef DEBUG_IDE_THREADS
EOF
  fi


    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$ide" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable IDE Mutexes debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$ide"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE Mutexes debugging
#define DEBUG_IDE_LOCKS 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE Mutexes debugging
#undef DEBUG_IDE_LOCKS
EOF
  fi


    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$ide" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable IDE Multiple debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$ide"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE Multiple debugging
#define DEBUG_IDE_MULTIPLE 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable IDE Multiple debugging
#undef DEBUG_IDE_MULTIPLE
EOF
  fi



  # ask a higher-level question, with a response of yes, no, or some
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: action on some
# arg 6: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 7: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable Floating-point debugging options? (yes, no, some) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        elif test "$answer" = "s" -o "$answer" = "so" -o "$answer" = "som" -o "$answer" = "some"; then
          answer="some"
          break
        fi
        echo "Invalid value: please answer yes no or some"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    fp="yes"
  elif test "$answer" = "no"; then
    fp="no"
  elif test "$answer" = "some"; then
    fp=""
  fi

    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$fp" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable Floating Point conversions debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$fp"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Floating Point conversions debugging
#define DEBUG_FP_CONVERSION 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Floating Point conversions debugging
#undef DEBUG_FP_CONVERSION
EOF
  fi


    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$fp" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable Floating Point load/store debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$fp"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Floating Point load/store debugging
#define DEBUG_FP_LOADSTORE 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Floating Point load/store debugging
#undef DEBUG_FP_LOADSTORE
EOF
  fi



  # ask a higher-level question, with a response of yes, no, or some
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: action on some
# arg 6: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 7: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable network interface debugging options? (yes, no, some) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        elif test "$answer" = "s" -o "$answer" = "so" -o "$answer" = "som" -o "$answer" = "some"; then
          answer="some"
          break
        fi
        echo "Invalid value: please answer yes no or some"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    nic="yes"
  elif test "$answer" = "no"; then
    nic="no"
  elif test "$answer" = "some"; then
    nic=""
  fi

    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$nic" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable General NIC debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$nic"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable General NIC debugging
#define DEBUG_NIC 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable General NIC debugging
#undef DEBUG_NIC
EOF
  fi


    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$nic" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable NIC Filter debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$nic"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable NIC Filter debugging
#define DEBUG_NIC_FILTER 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable NIC Filter debugging
#undef DEBUG_NIC_FILTER
EOF
  fi


    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$nic" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable NIC Serial ROM debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$nic"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable NIC Serial ROM debugging
#define DEBUG_NIC_SROM 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable NIC Serial ROM debugging
#undef DEBUG_NIC_SROM
EOF
  fi



  # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable unknown memory access debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable unknown memory access debugging
#define DEBUG_UNKMEM 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable unknown memory access debugging
#undef DEBUG_UNKMEM
EOF
  fi


  # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable PCI debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable PCI debugging
#define DEBUG_PCI 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable PCI debugging
#undef DEBUG_PCI
EOF
  fi


  # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable Translationbuffer debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Translationbuffer debugging
#define DEBUG_TB 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Translationbuffer debugging
#undef DEBUG_TB
EOF
  fi


  # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable I/O Port Access debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable I/O Port Access debugging
#define DEBUG_PORTACCESS 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable I/O Port Access debugging
#undef DEBUG_PORTACCESS
EOF
  fi


  # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable Keyboard debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Keyboard debugging
#define DEBUG_KBD 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Keyboard debugging
#undef DEBUG_KBD
EOF
  fi


  # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable Programmable Interrupt Controller (PIC) debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Programmable Interrupt Controller (PIC) debugging
#define DEBUG_PIC 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Programmable Interrupt Controller (PIC) debugging
#undef DEBUG_PIC
EOF
  fi


  # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable Printer port debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Printer port debugging
#define DEBUG_LPT 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Printer port debugging
#undef DEBUG_LPT
EOF
  fi


  # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable USB Controller debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable USB Controller debugging
#define DEBUG_USB 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable USB Controller debugging
#undef DEBUG_USB
EOF
  fi


 
  # ask a higher-level question, with a response of yes, no, or some
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: action on some
# arg 6: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 7: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do ypu want to enable SCSI debugging options? (yes, no, some) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        elif test "$answer" = "s" -o "$answer" = "so" -o "$answer" = "som" -o "$answer" = "some"; then
          answer="some"
          break
        fi
        echo "Invalid value: please answer yes no or some"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    scsi="yes"
  elif test "$answer" = "no"; then
    scsi="no"
  elif test "$answer" = "some"; then
    scsi=""
  fi

    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$scsi" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable SCSI Device debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$scsi"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable SCSI Device debugging
#define DEBUG_SCSI 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable SCSI Device debugging
#undef DEBUG_SCSI
EOF
  fi


    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$scsi" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable Symbios SCSI Controller debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$scsi"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Symbios SCSI Controller debugging
#define DEBUG_SYM 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Symbios SCSI Controller debugging
#undef DEBUG_SYM
EOF
  fi


    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$scsi" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable Symbios Registers debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$scsi"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Symbios Registers debugging
#define DEBUG_SYM_REGS 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Symbios Registers debugging
#undef DEBUG_SYM_REGS
EOF
  fi


    # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X$scsi" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable Symbios SCRIPTS Execution debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer="$scsi"
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Symbios SCRIPTS Execution debugging
#define DEBUG_SYM_SCRIPTS 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable Symbios SCRIPTS Execution debugging
#undef DEBUG_SYM_SCRIPTS
EOF
  fi



  # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable DMA Controller debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable DMA Controller debugging
#define DEBUG_DMA 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable DMA Controller debugging
#undef DEBUG_DMA
EOF
  fi


  # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable backtrace on SIGSEGV debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable backtrace on SIGSEGV debugging
#define DEBUG_BACKTRACE 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable backtrace on SIGSEGV debugging
#undef DEBUG_BACKTRACE
EOF
  fi


  # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable mutex debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable mutex debugging
#define DEBUG_LOCKS 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable mutex debugging
#undef DEBUG_LOCKS
EOF
  fi


  # arg 1: human-readable name of debugging
# arg 2: name of debug-macro (excluding DEBUG_)
# arg 3: pre-determined answer
  # ask a yes/no question, and define/undefine a macro accordingly
# arg 1: question to follow "Do you want to "
# arg 2: name of macro
# arg 3: default value
# arg 4: pre-determined answer
# arg 5: explanation
# arg 6: reverse (yes, no)
  # ask a question with a response of yes or no
# arg 1: question
# arg 2: default value
# arg 3: action on yes
# arg 4: action on no
# arg 5: pre-determined answer (if not "", the answer will be assumed to be this)
# arg 6: explanation
  if test "X" = "X"; then
    if test "$all_default" = "yes"; then
      answer="no"
    else
      while true; do
        echo -n "Do you want to enable SDL Key translation debugging? (yes, no) [no]: "
        read answer
        if test "X$answer" = "X"; then
          answer="no"
        fi
        if test "$answer" = "y" -o "$answer" = "ye" -o "$answer" = "yes"; then
          answer="yes"
          break
        elif test "$answer" = "n" -o "$answer" = "no"; then
          answer="no"
          break
        fi
        echo "Invalid value: please answer yes or no"
      done
    fi
  else
    answer=""
  fi
  if test "$answer" = "yes"; then
    debug="yes"
  elif test "$answer" = "no"; then
    debug="no"
  fi

  if test "" = "yes"; then
    check_for="no"
  else
    check_for="yes"
  fi
  if test "$debug" = $check_for; then
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable SDL Key translation debugging
#define DEBUG_SDL_KEY 1
EOF
  else
    cat >>src/config_debug.h <<EOF

// Define to 1 if you want to enable SDL Key translation debugging
#undef DEBUG_SDL_KEY
EOF
  fi



exit
